{
  "api/Semiodesk.Trinity.Store.dotNetRDFStore.html": {
    "href": "api/Semiodesk.Trinity.Store.dotNetRDFStore.html",
    "title": "Trinity RDF | Class dotNetRDFStore",
    "keywords": "Class dotNetRDFStore A store adapter for dotNetRDF. Inheritance System.Object StoreBase dotNetRDFStore Implements IStore System.IDisposable Inherited Members StoreBase.Log StoreBase.RemoveModel(IModel) StoreBase.ContainsModel(IModel) StoreBase.LoadOntologySettings(String, String) StoreBase.InitializeFromConfiguration(String, String) StoreBase.LoadConfiguration(String) StoreBase.LoadOntologies(IConfiguration, String) StoreBase.CreateModel(Uri) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Store Assembly : Semiodesk.Trinity.dll Syntax public class dotNetRDFStore : StoreBase, IStore, IDisposable Constructors | Improve this Doc View Source dotNetRDFStore(String[]) Creates a new dotNetRDFStore. Declaration public dotNetRDFStore(string[] schemes) Parameters Type Name Description System.String [] schemes A list of ontology file paths relative to this assembly. The store will be populated with these ontologies. Properties | Improve this Doc View Source IsReady Indicates if the store is ready to be queried. Declaration public override bool IsReady { get; protected set; } Property Value Type Description System.Boolean Overrides StoreBase.IsReady Methods | Improve this Doc View Source BeginTransaction(IsolationLevel) Declaration public override ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel Returns Type Description ITransaction Overrides StoreBase.BeginTransaction(IsolationLevel) | Improve this Doc View Source ContainsModel(Uri) Query if the model exists in the store. OBSOLETE: This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty() Declaration [Obsolete(\"This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty()\")] public override bool ContainsModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model which is to be queried. Returns Type Description System.Boolean Overrides StoreBase.ContainsModel(Uri) | Improve this Doc View Source CreateModelGroup(IModel[]) Creates a model group which allows for queries to be made on multiple models at once. Declaration public IModelGroup CreateModelGroup(params IModel[] models) Parameters Type Name Description IModel [] models Returns Type Description IModelGroup | Improve this Doc View Source CreateModelGroup(Uri[]) Creates a model group which allows for queries to be made on multiple models at once. Declaration public override IModelGroup CreateModelGroup(params Uri[] models) Parameters Type Name Description System.Uri [] models Returns Type Description IModelGroup Overrides StoreBase.CreateModelGroup(Uri[]) | Improve this Doc View Source Dispose() Closes the store. It is not usable after this call. Declaration public override void Dispose() Overrides StoreBase.Dispose() | Improve this Doc View Source ExecuteNonQuery(SparqlUpdate, ITransaction) Executes a query on the store which does not expect a result. Declaration public override void ExecuteNonQuery(SparqlUpdate query, ITransaction transaction = null) Parameters Type Name Description SparqlUpdate query The update query ITransaction transaction An associated transaction Overrides StoreBase.ExecuteNonQuery(SparqlUpdate, ITransaction) | Improve this Doc View Source ExecuteQuery(ISparqlQuery, ITransaction) Executes a SparqlQuery on the store. Declaration public override ISparqlQueryResult ExecuteQuery(ISparqlQuery query, ITransaction transaction = null) Parameters Type Name Description ISparqlQuery query ITransaction transaction Returns Type Description ISparqlQueryResult Overrides StoreBase.ExecuteQuery(ISparqlQuery, ITransaction) | Improve this Doc View Source ExecuteQuery(String) This method queries the dotNetRdf store directly. Declaration public object ExecuteQuery(string query) Parameters Type Name Description System.String query Returns Type Description System.Object | Improve this Doc View Source GetModel(Uri) Gets a handle to a model in the store. Declaration public override IModel GetModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model. Returns Type Description IModel Overrides StoreBase.GetModel(Uri) | Improve this Doc View Source ListModels() Lists all models in the store. Declaration public override IEnumerable<IModel> ListModels() Returns Type Description System.Collections.Generic.IEnumerable < IModel > All handles to existing models. Overrides StoreBase.ListModels() | Improve this Doc View Source Read(Stream, Uri, RdfSerializationFormat, Boolean) Loads a serialized graph from the given stream into the current store. See allowed RdfSerializationFormat . Declaration public override Uri Read(Stream stream, Uri graphUri, RdfSerializationFormat format, bool update) Parameters Type Name Description System.IO.Stream stream Stream containing a serialized graph System.Uri graphUri Uri of the graph in this store RdfSerializationFormat format Allowed formats System.Boolean update Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing. Returns Type Description System.Uri Overrides StoreBase.Read(Stream, Uri, RdfSerializationFormat, Boolean) | Improve this Doc View Source Read(Uri, Uri, RdfSerializationFormat, Boolean) Loads a serialized graph from the given location into the current store. See allowed RdfSerializationFormat . Declaration public override Uri Read(Uri graphUri, Uri url, RdfSerializationFormat format, bool update) Parameters Type Name Description System.Uri graphUri Uri of the graph in this store System.Uri url Location RdfSerializationFormat format Allowed formats System.Boolean update Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing. Returns Type Description System.Uri Overrides StoreBase.Read(Uri, Uri, RdfSerializationFormat, Boolean) | Improve this Doc View Source RemoveModel(Uri) Removes model from the store. Declaration public override void RemoveModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model which is to be removed. Overrides StoreBase.RemoveModel(Uri) | Improve this Doc View Source TryParse(TextReader, IGraph, RdfSerializationFormat) Try parse RDF from a given text reader into the store. Declaration public static void TryParse(TextReader reader, IGraph graph, RdfSerializationFormat format) Parameters Type Name Description System.IO.TextReader reader The text reader to read from. VDS.RDF.IGraph graph The graph to store the read triples. RdfSerializationFormat format RDF format to be read. | Improve this Doc View Source Write(Stream, Uri, RdfSerializationFormat, INamespaceMap) Writes a serialized graph to the given stream. See allowed RdfSerializationFormat . Declaration public override void Write(Stream stream, Uri graphUri, RdfSerializationFormat format, INamespaceMap namespaces = null) Parameters Type Name Description System.IO.Stream stream Stream to which the content should be written. System.Uri graphUri Uri fo the graph in this store RdfSerializationFormat format Allowed formats INamespaceMap namespaces Defines namespace to prefix mappings for the output. Overrides StoreBase.Write(Stream, Uri, RdfSerializationFormat, INamespaceMap) Implements IStore System.IDisposable"
  },
  "api/Semiodesk.Trinity.MappingDiscovery.html": {
    "href": "api/Semiodesk.Trinity.MappingDiscovery.html",
    "title": "Trinity RDF | Class MappingDiscovery",
    "keywords": "Class MappingDiscovery This static class is responsible for discovering mapped classes. Every assembly that defines mapping classes needs to register them with this service. Inheritance System.Object MappingDiscovery Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public static class MappingDiscovery Fields | Improve this Doc View Source MappingClasses The list of all registered mapped classes. Declaration public static List<MappingDiscovery.MappingClass> MappingClasses Field Value Type Description System.Collections.Generic.List < MappingDiscovery.MappingClass > | Improve this Doc View Source RegisteredAssemblies The list of all registered assemblies. Declaration public static List<string> RegisteredAssemblies Field Value Type Description System.Collections.Generic.List < System.String > Methods | Improve this Doc View Source AddMappingClass(Type) Adds a mapped class to the registration. Declaration public static void AddMappingClass(Type _class) Parameters Type Name Description System.Type _class | Improve this Doc View Source AddMappingClasses(IList<Type>) Adds a collection of mapped classes to the registration. Declaration public static void AddMappingClasses(IList<Type> list) Parameters Type Name Description System.Collections.Generic.IList < System.Type > list | Improve this Doc View Source GetBaseTypes(Type, ref List<Class>) Add the super classes of a given .NET type to a given list. Declaration public static void GetBaseTypes(Type type, ref List<Class> baseTypes) Parameters Type Name Description System.Type type A .NET type. System.Collections.Generic.List < Class > baseTypes List where the base types will be added to. | Improve this Doc View Source GetMatchingTypes(IEnumerable<Class>, Type, Boolean) Returns all types which match the given restrictions. Declaration public static Type[] GetMatchingTypes(IEnumerable<Class> classes, Type type, bool inferencingEnabled = false) Parameters Type Name Description System.Collections.Generic.IEnumerable < Class > classes List of RDF classes System.Type type A c# type in a inheritence tree. Give Resource if you don't know what to do. System.Boolean inferencingEnabled Should inferencing be factored in. Returns Type Description System.Type [] | Improve this Doc View Source GetRdfClasses(Type) The the RDF class of a C# type. Declaration public static IEnumerable<Class> GetRdfClasses(Type type) Parameters Type Name Description System.Type type Returns Type Description System.Collections.Generic.IEnumerable < Class > | Improve this Doc View Source RegisterAllCurrentAssemblies() Register ALL THE THINGS!! from all assemblies currently loaded. Declaration public static void RegisterAllCurrentAssemblies() | Improve this Doc View Source RegisterAssembly(Assembly) Load all mapped classes from the given assembly. Declaration public static void RegisterAssembly(Assembly asm) Parameters Type Name Description System.Reflection.Assembly asm | Improve this Doc View Source RegisterCallingAssembly() Loads all mapped classes from the assembly calling this method. Declaration public static void RegisterCallingAssembly()"
  },
  "api/Semiodesk.Trinity.IResource.html": {
    "href": "api/Semiodesk.Trinity.IResource.html",
    "title": "Trinity RDF | Interface IResource",
    "keywords": "Interface IResource This interface encapsulates the access to the methods of a RDF resource. Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged System.IDisposable.Dispose() ITransactional.Commit() ITransactional.Rollback() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public interface IResource : INotifyPropertyChanged, IDisposable, ITransactional Properties | Improve this Doc View Source IsDisposed Indicates if the resources has been disposed. Declaration bool IsDisposed { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsReadOnly Indicates that this resource is not writable, thus Commit() is illegal. Declaration bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Language Set the language of this resource. This will change te mapped strings to this language. Declaration string Language { get; set; } Property Value Type Description System.String | Improve this Doc View Source Model Model from which the resource was instantiated. Declaration IModel Model { get; } Property Value Type Description IModel | Improve this Doc View Source Uri Uniform Resource Identifier (URI). Declaration UriRef Uri { get; set; } Property Value Type Description UriRef Methods | Improve this Doc View Source AddProperty(Property, IResource) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, IResource value) Parameters Type Name Description Property property Property the value should be associated with. IResource value A instance of IResource. | Improve this Doc View Source AddProperty(Property, Boolean) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, bool value) Parameters Type Name Description Property property Property the value should be associated with. System.Boolean value A boolean value. | Improve this Doc View Source AddProperty(Property, Byte[]) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, byte[] value) Parameters Type Name Description Property property Property the value should be associated with. System.Byte [] value Arbitrary data in form of a byte array. | Improve this Doc View Source AddProperty(Property, DateTime) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, DateTime value) Parameters Type Name Description Property property Property the value should be associated with. System.DateTime value A datetime value. | Improve this Doc View Source AddProperty(Property, Decimal) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, decimal value) Parameters Type Name Description Property property Property the value should be associated with. System.Decimal value A decimal value. | Improve this Doc View Source AddProperty(Property, Double) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, double value) Parameters Type Name Description Property property Property the value should be associated with. System.Double value A double precision float value. | Improve this Doc View Source AddProperty(Property, Int16) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, short value) Parameters Type Name Description Property property Property the value should be associated with. System.Int16 value A 16-bit integer value. | Improve this Doc View Source AddProperty(Property, Int32) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, int value) Parameters Type Name Description Property property Property the value should be associated with. System.Int32 value A 32-bit integer value. | Improve this Doc View Source AddProperty(Property, Int64) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, long value) Parameters Type Name Description Property property Property the value should be associated with. System.Int64 value A 64-bit integer value. | Improve this Doc View Source AddProperty(Property, Single) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, float value) Parameters Type Name Description Property property Property the value should be associated with. System.Single value A single precision float value. | Improve this Doc View Source AddProperty(Property, String) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, string value) Parameters Type Name Description Property property Property the value should be associated with. System.String value A string literal. | Improve this Doc View Source AddProperty(Property, String, CultureInfo) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, string value, CultureInfo language) Parameters Type Name Description Property property Property the value should be associated with. System.String value A string literal. System.Globalization.CultureInfo language The culture of the string literal. | Improve this Doc View Source AddProperty(Property, String, String) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, string value, string language) Parameters Type Name Description Property property Property the value should be associated with. System.String value A string literal. System.String language The language of the string literal. | Improve this Doc View Source AddProperty(Property, UInt16) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, ushort value) Parameters Type Name Description Property property Property the value should be associated with. System.UInt16 value A 16-bit unsigned integer value. | Improve this Doc View Source AddProperty(Property, UInt32) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, uint value) Parameters Type Name Description Property property Property the value should be associated with. System.UInt32 value A 32-bit unsigned integer value. | Improve this Doc View Source AddProperty(Property, UInt64) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, ulong value) Parameters Type Name Description Property property Property the value should be associated with. System.UInt64 value A 64-bit unsigned integer value. | Improve this Doc View Source AddProperty(Property, Uri) Adds a new property with the given value to the resource. Declaration void AddProperty(Property property, Uri value) Parameters Type Name Description Property property Property the value should be associated with. System.Uri value An Uri. | Improve this Doc View Source GetValue(Property) Gets the value of a uniquely asserted property. Declaration object GetValue(Property property) Parameters Type Name Description Property property A RDF property. Returns Type Description System.Object | Improve this Doc View Source GetValue(Property, Object) Gets the value of a uniquely asserted property. Declaration object GetValue(Property property, object defaultValue) Parameters Type Name Description Property property A RDF property. System.Object defaultValue Specifies a default value that should be returned if no value exists. Returns Type Description System.Object | Improve this Doc View Source HasProperty(Property) Indicates if the resource has at least one property of the given type. Declaration bool HasProperty(Property property) Parameters Type Name Description Property property Returns Type Description System.Boolean True on success, False otherwise. | Improve this Doc View Source HasProperty(Property, Object) Indicates if the resource has a property with the given value. Declaration bool HasProperty(Property property, object value) Parameters Type Name Description Property property System.Object value Returns Type Description System.Boolean True on success, False otherwise. | Improve this Doc View Source HasProperty(Property, String, CultureInfo) Indicates if the resource has a property with the given translated string value. Declaration bool HasProperty(Property property, string value, CultureInfo language) Parameters Type Name Description Property property System.String value System.Globalization.CultureInfo language Returns Type Description System.Boolean True on success, False otherwise. | Improve this Doc View Source HasProperty(Property, String, String) Indicates if the resource has a property with the given translated string value. Declaration bool HasProperty(Property property, string value, string language) Parameters Type Name Description Property property System.String value System.String language Returns Type Description System.Boolean True on success, False otherwise. | Improve this Doc View Source ListProperties() Enumerates all properties associated with this resource. Declaration IEnumerable<Property> ListProperties() Returns Type Description System.Collections.Generic.IEnumerable < Property > | Improve this Doc View Source ListValues(Property) Enumerates all property values associated with this resource. Declaration IEnumerable<object> ListValues(Property property) Parameters Type Name Description Property property Returns Type Description System.Collections.Generic.IEnumerable < System.Object > | Improve this Doc View Source ListValues(Boolean) Enumerates all properties associated with this resource in form of a tuple mapping properties to their corresponding values. Declaration IEnumerable<Tuple<Property, object>> ListValues(bool forSerialization = false) Parameters Type Name Description System.Boolean forSerialization Only return values which should be serialized. Returns Type Description System.Collections.Generic.IEnumerable < System.Tuple < Property , System.Object >> | Improve this Doc View Source RemoveProperty(Property, IResource) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, IResource value) Parameters Type Name Description Property property Property the given value is associated with. IResource value An IResource instance. | Improve this Doc View Source RemoveProperty(Property, Boolean) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, bool value) Parameters Type Name Description Property property Property the given value is associated with. System.Boolean value A blooean value. | Improve this Doc View Source RemoveProperty(Property, Byte[]) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, byte[] value) Parameters Type Name Description Property property Property the given value is associated with. System.Byte [] value Arbitrary data in form of a byte array. | Improve this Doc View Source RemoveProperty(Property, DateTime) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, DateTime value) Parameters Type Name Description Property property Property the given value is associated with. System.DateTime value A date value. | Improve this Doc View Source RemoveProperty(Property, Decimal) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, decimal value) Parameters Type Name Description Property property Property the given value is associated with. System.Decimal value A decimal value. | Improve this Doc View Source RemoveProperty(Property, Double) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, double value) Parameters Type Name Description Property property Property the given value is associated with. System.Double value A double precision float value. | Improve this Doc View Source RemoveProperty(Property, Int16) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, short value) Parameters Type Name Description Property property Property the given value is associated with. System.Int16 value A 16-bit integer value. | Improve this Doc View Source RemoveProperty(Property, Int32) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, int value) Parameters Type Name Description Property property Property the given value is associated with. System.Int32 value A 32-bit integer value. | Improve this Doc View Source RemoveProperty(Property, Int64) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, long value) Parameters Type Name Description Property property Property the given value is associated with. System.Int64 value A 64-bit integer value. | Improve this Doc View Source RemoveProperty(Property, Single) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, float value) Parameters Type Name Description Property property Property the given value is associated with. System.Single value A single precision float value. | Improve this Doc View Source RemoveProperty(Property, String) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, string value) Parameters Type Name Description Property property Property the given value is associated with. System.String value A instance of IResource. | Improve this Doc View Source RemoveProperty(Property, String, CultureInfo) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, string value, CultureInfo language) Parameters Type Name Description Property property Property the given value is associated with. System.String value A string literal. System.Globalization.CultureInfo language The culture of the string | Improve this Doc View Source RemoveProperty(Property, String, String) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, string value, string language) Parameters Type Name Description Property property Property the given value is associated with. System.String value A string literal. System.String language The language of the string. | Improve this Doc View Source RemoveProperty(Property, UInt16) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, ushort value) Parameters Type Name Description Property property Property the given value is associated with. System.UInt16 value A 16-bit unsigned integer value. | Improve this Doc View Source RemoveProperty(Property, UInt32) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, uint value) Parameters Type Name Description Property property Property the given value is associated with. System.UInt32 value A 32-bit unsigned integer value. | Improve this Doc View Source RemoveProperty(Property, UInt64) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, ulong value) Parameters Type Name Description Property property Property the given value is associated with. System.UInt64 value A 64-bit unsigned integer value. | Improve this Doc View Source RemoveProperty(Property, Uri) Removes an associated property from the resource. Declaration void RemoveProperty(Property property, Uri value) Parameters Type Name Description Property property Property the given value is associated with. System.Uri value An Uri."
  },
  "api/Semiodesk.Trinity.IStore.html": {
    "href": "api/Semiodesk.Trinity.IStore.html",
    "title": "Trinity RDF | Interface IStore",
    "keywords": "Interface IStore The IStorage interface describes the methods an RDF Storage has to implement. Inherited Members System.IDisposable.Dispose() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public interface IStore : IDisposable Properties | Improve this Doc View Source IsReady Indicates if the store is ready to be queried. Declaration bool IsReady { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Log Set this property to log the SPARQL queries which are executed on this store. For example, to log to the console, set this property to System.Console.Write(System.String). Declaration Action<string> Log { get; set; } Property Value Type Description System.Action < System.String > Methods | Improve this Doc View Source BeginTransaction(IsolationLevel) Starts a transaction. The resulting transaction handle can be used to chain operations together. Declaration ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel The isolation level of the transaction. Returns Type Description ITransaction | Improve this Doc View Source ContainsModel(IModel) Query if the model exists in the store. OBSOLETE: This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty Declaration [Obsolete(\"This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty\")] bool ContainsModel(IModel model) Parameters Type Name Description IModel model Handle to the model which is to be queried. Returns Type Description System.Boolean | Improve this Doc View Source ContainsModel(Uri) Query if the model exists in the store. OBSOLETE: This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty Declaration [Obsolete(\"This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty\")] bool ContainsModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model which is to be queried. Returns Type Description System.Boolean | Improve this Doc View Source CreateModel(Uri) Adds a new model with the given uri to the storage. Declaration IModel CreateModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model Returns Type Description IModel Handle to the model | Improve this Doc View Source CreateModelGroup(IModel[]) Creates a model group which allows for queries to be made on multiple models at once. Declaration IModelGroup CreateModelGroup(params IModel[] models) Parameters Type Name Description IModel [] models The list of uris of the models that should be grouped together. Returns Type Description IModelGroup | Improve this Doc View Source CreateModelGroup(Uri[]) Creates a model group which allows for queries to be made on multiple models at once. Declaration IModelGroup CreateModelGroup(params Uri[] models) Parameters Type Name Description System.Uri [] models The list of uris of the models that should be grouped together. Returns Type Description IModelGroup | Improve this Doc View Source ExecuteNonQuery(SparqlUpdate, ITransaction) Executes a query on the store which does not expect a result. Declaration void ExecuteNonQuery(SparqlUpdate update, ITransaction transaction = null) Parameters Type Name Description SparqlUpdate update ITransaction transaction | Improve this Doc View Source ExecuteQuery(ISparqlQuery, ITransaction) Executes a SparqlQuery on the store. Declaration ISparqlQueryResult ExecuteQuery(ISparqlQuery query, ITransaction transaction = null) Parameters Type Name Description ISparqlQuery query ITransaction transaction Returns Type Description ISparqlQueryResult | Improve this Doc View Source GetModel(Uri) Gets a handle to a model in the store. Declaration IModel GetModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model. Returns Type Description IModel | Improve this Doc View Source InitializeFromConfiguration(String, String) Initializes the store from the configuration. It uses either the provided file or attempts to load from \"ontologies.config\" located next to the executing assembly. For legacy reasons it also looks in the app.config file. If the ontology files are in a different path, this can be supplied as a base path.. Declaration void InitializeFromConfiguration(string configPath = null, string sourceDir = null) Parameters Type Name Description System.String configPath Path the configuration should be read from. System.String sourceDir Path where the ontologies should be searched for. | Improve this Doc View Source ListModels() Lists all models in the store. Declaration IEnumerable<IModel> ListModels() Returns Type Description System.Collections.Generic.IEnumerable < IModel > All handles to existing models. | Improve this Doc View Source LoadOntologySettings(String, String) Initializes the store from the configuration. It uses either the provided file or attempts to load from \"ontologies.config\" located next to the executing assembly. For legacy reasons it also looks in the app.config file. If the ontology files are in a different path, this can be supplied as a base path.. Declaration [Obsolete(\"This method will be removed in the future. Use InitializeFromConfiguration() instead.\")] void LoadOntologySettings(string configPath = null, string sourceDir = null) Parameters Type Name Description System.String configPath Load a specific configuration file. System.String sourceDir If given, this function tries to load the ontologies from this folder. | Improve this Doc View Source Read(Stream, Uri, RdfSerializationFormat, Boolean) Loads a serialized graph from the given stream into the current store. See allowed RdfSerializationFormat . Declaration Uri Read(Stream stream, Uri graphUri, RdfSerializationFormat format, bool update) Parameters Type Name Description System.IO.Stream stream Stream containing a serialized graph System.Uri graphUri Uri of the graph in this store RdfSerializationFormat format Allowed formats System.Boolean update Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing. Returns Type Description System.Uri | Improve this Doc View Source Read(Uri, Uri, RdfSerializationFormat, Boolean) Loads a serialized graph from the given location into the current store. See allowed RdfSerializationFormat . Declaration Uri Read(Uri graphUri, Uri url, RdfSerializationFormat format, bool update) Parameters Type Name Description System.Uri graphUri Uri of the graph in this store System.Uri url Location RdfSerializationFormat format Allowed formats System.Boolean update Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing. Returns Type Description System.Uri | Improve this Doc View Source RemoveModel(IModel) Removes model from the store. Declaration void RemoveModel(IModel model) Parameters Type Name Description IModel model Handle to the model which is to be removed. | Improve this Doc View Source RemoveModel(Uri) Removes model from the store. Declaration void RemoveModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model which is to be removed. | Improve this Doc View Source Write(Stream, Uri, RdfSerializationFormat, INamespaceMap) Writes a serialized graph to the given stream. See allowed RdfSerializationFormat . Declaration void Write(Stream fs, Uri graphUri, RdfSerializationFormat format, INamespaceMap namespaces = null) Parameters Type Name Description System.IO.Stream fs Stream to which the content should be written. System.Uri graphUri Uri fo the graph in this store RdfSerializationFormat format Allowed formats INamespaceMap namespaces Defines namespace to prefix mappings for the output."
  },
  "api/Semiodesk.Trinity.Collections.html": {
    "href": "api/Semiodesk.Trinity.Collections.html",
    "title": "Trinity RDF | Namespace Semiodesk.Trinity.Collections",
    "keywords": "Namespace Semiodesk.Trinity.Collections Classes AsyncVirtualizingCollection<T> Derived VirtualizatingCollection, performing loading asychronously. AsyncVirtualizingSparqlCollection<T> An generic asynchrous virtualizing collection for sparql queries. VirtualizingCollection<T> A generic virtualizing collection. Interfaces IItemsProvider<T> A generic items provider collection."
  },
  "api/Semiodesk.Trinity.Model.html": {
    "href": "api/Semiodesk.Trinity.Model.html",
    "title": "Trinity RDF | Class Model",
    "keywords": "Class Model A set of resources which represent a logical model for a given application domain. Inheritance System.Object Model Implements IModel Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class Model : IModel Constructors | Improve this Doc View Source Model(IStore, UriRef) This constructor is intended to be used only be the ModelManager. Declaration public Model(IStore store, UriRef uri) Parameters Type Name Description IStore store The underlying triple store implementation to be used. UriRef uri Uniform Resource Identifier of the model. Properties | Improve this Doc View Source IgnoreUnmappedProperties All unampped properties will be ignored for update and thus deleted. This reduces the amount of data thats get sent to the database but also might remove important data. Setting this to true essentialy disables the triple API. Declaration public bool IgnoreUnmappedProperties { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsEmpty Indicates if the model contains statements. Declaration [JsonIgnore] public bool IsEmpty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Uri The Uniform Resource Identifier which provides a name for the model. Declaration public UriRef Uri { get; set; } Property Value Type Description UriRef Methods | Improve this Doc View Source AddResource(IResource, ITransaction) Adds an existing resource to the model and its backing RDF store. The resulting resource supports the use of the Commit() method. Declaration public virtual IResource AddResource(IResource resource, ITransaction transaction = null) Parameters Type Name Description IResource resource The resource to be added to the model. ITransaction transaction Transaction associated with the action. Returns Type Description IResource The resource which is now connected to the current model. | Improve this Doc View Source AddResource<T>(T, ITransaction) Adds an existing resource to the model and its backing RDF store. The resulting resource supports the use of the Commit() method. Declaration public virtual T AddResource<T>(T resource, ITransaction transaction = null) where T : Resource Parameters Type Name Description T resource The resource to be added to the model. ITransaction transaction Transaction associated with the action. Returns Type Description T The resource which is now connected to the current model. Type Parameters Name Description T | Improve this Doc View Source AsQueryable<T>(Boolean) TODO Declaration public IQueryable<T> AsQueryable<T>(bool inferenceEnabled = false) where T : Resource Parameters Type Name Description System.Boolean inferenceEnabled Returns Type Description System.Linq.IQueryable <T> Type Parameters Name Description T | Improve this Doc View Source BeginTransaction(IsolationLevel) Starts a transaction which can be used to group more queries together to be executed as one. Declaration public ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel Isolation level used to lock the database. Returns Type Description ITransaction A handle to the transaction. | Improve this Doc View Source Clear() Removes all elements from the model. Declaration public void Clear() | Improve this Doc View Source ContainsResource(IResource, ITransaction) Indicates wheter a given resource is part of the model. Declaration public bool ContainsResource(IResource resource, ITransaction transaction = null) Parameters Type Name Description IResource resource A resource object. ITransaction transaction Transaction associated with this action. Returns Type Description System.Boolean True if the resource is part of the model, False if not. | Improve this Doc View Source ContainsResource(Uri, ITransaction) Indicates wheter a given resource is part of the model. Declaration public bool ContainsResource(Uri uri, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction Transaction associated with this action. Returns Type Description System.Boolean True if the resource is part of the model, False if not. | Improve this Doc View Source CreateResource(String, ITransaction) Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type. Declaration public virtual IResource CreateResource(string format = \"urn:uuid:{0}\", ITransaction transaction = null) Parameters Type Name Description System.String format The format of the resulting uri. ITransaction transaction Transaction associated with this action. Returns Type Description IResource An instance of the given object type wrapping the newly created resource. Exceptions Type Condition System.ArgumentException Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source CreateResource(Type, String, ITransaction) Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type. Declaration public virtual object CreateResource(Type t, string format = \"urn:uuid:{0}\", ITransaction transaction = null) Parameters Type Name Description System.Type t Type of the resource object. Must be derived from Resource. System.String format The format of the resulting uri. ITransaction transaction Transaction associated with this action. Returns Type Description System.Object An instance of the given object type wrapping the newly created resource. Exceptions Type Condition System.ArgumentException Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source CreateResource(Uri, ITransaction) Creates a new resource in the model and its backing RDF store. Declaration public virtual IResource CreateResource(Uri uri, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction Transaction associated with this action. Returns Type Description IResource The newly created resource. Exceptions Type Condition System.ArgumentException Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source CreateResource(Uri, Type, ITransaction) Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type. This method can be used to create a resource of a type which was asserted at runtime. Declaration public virtual object CreateResource(Uri uri, Type t, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. System.Type t Type of the resource object. Must be derived from Resource. ITransaction transaction Transaction associated with this action. Returns Type Description System.Object An instance of the given object type wrapping the newly created resource. Exceptions Type Condition System.Exception Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source CreateResource<T>(String, ITransaction) Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type. Declaration public virtual T CreateResource<T>(string format = \"urn:uuid:{0}\", ITransaction transaction = null) where T : Resource Parameters Type Name Description System.String format The format of the resulting uri. ITransaction transaction Transaction associated with this action. Returns Type Description T An instance of the given object type wrapping the newly created resource. Type Parameters Name Description T Type of the resource object. Must be derived from Resource. Exceptions Type Condition System.ArgumentException Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source CreateResource<T>(Uri, ITransaction) Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type. Declaration public virtual T CreateResource<T>(Uri uri, ITransaction transaction = null) where T : Resource Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction Transaction associated with this action. Returns Type Description T An instance of the given object type wrapping the newly created resource. Type Parameters Name Description T Type of the resource object. Must be derived from Resource. Exceptions Type Condition System.ArgumentException Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source DeleteResource(IResource, ITransaction) Removes the given resource from the model and its backing RDF store. Note that there is no verification that the given resource and its stored representation have identical properties. Declaration public virtual void DeleteResource(IResource resource, ITransaction transaction = null) Parameters Type Name Description IResource resource A resource object. ITransaction transaction Transaction associated with this action. | Improve this Doc View Source DeleteResource(Uri, ITransaction) Removes the given resource from the model and its backing RDF store. Note that there is no verification that the given resource and its stored representation have identical properties. Declaration public virtual void DeleteResource(Uri uri, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction Transaction associated with this action. | Improve this Doc View Source ExecuteQuery(ISparqlQuery, Boolean, ITransaction) Execute a SPARQL Query. Declaration public ISparqlQueryResult ExecuteQuery(ISparqlQuery query, bool inferenceEnabled = false, ITransaction transaction = null) Parameters Type Name Description ISparqlQuery query A SparqlQuery object. System.Boolean inferenceEnabled Indicate that this query should work with enabled inferencing. ITransaction transaction Transaction associated with this action. Returns Type Description ISparqlQueryResult A SparqlQueryResults object in any case. | Improve this Doc View Source ExecuteUpdate(SparqlUpdate, ITransaction) Execute a SPARQL Update. Declaration public void ExecuteUpdate(SparqlUpdate update, ITransaction transaction = null) Parameters Type Name Description SparqlUpdate update A SparqlUpdate object. ITransaction transaction Transaction associated with this action. | Improve this Doc View Source GetBindings(ISparqlQuery, Boolean, ITransaction) Executes a SPARQL-select query and provides a list of binding sets. This method implements transparent type marshalling and delivers the bound variables in C# native data types. Declaration public IEnumerable<BindingSet> GetBindings(ISparqlQuery query, bool inferenceEnabled = false, ITransaction transaction = null) Parameters Type Name Description ISparqlQuery query A SPARQL-select query which results in a set of bound variables. System.Boolean inferenceEnabled Indicate that this query should work with enabled inferencing. ITransaction transaction Transaction associated with this action. Returns Type Description System.Collections.Generic.IEnumerable < BindingSet > An enumeration of bound variables that match the given query. | Improve this Doc View Source GetResource(IResource, ITransaction) Retrieves a resource from the model. Declaration public IResource GetResource(IResource resource, ITransaction transaction = null) Parameters Type Name Description IResource resource The instance of IResource to be retrieved. ITransaction transaction Transaction associated with this action. Returns Type Description IResource A resource with all asserted properties. | Improve this Doc View Source GetResource(Uri, ITransaction) Retrieves a resource from the model. Declaration public IResource GetResource(Uri uri, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction Transaction associated with this action. Returns Type Description IResource A resource with all asserted properties. | Improve this Doc View Source GetResource(Uri, Type, ITransaction) Retrieves a resource from the model. Provides a resource object of the given type. This method can be used for runtime asserted types. Declaration public object GetResource(Uri uri, Type type, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. System.Type type Type of the resource object. Must be derived from Resource. ITransaction transaction Transaction associated with this action. Returns Type Description System.Object An instance of the given resource object type, Null otherwise. | Improve this Doc View Source GetResource<T>(IResource, ITransaction) Retrieves a resource from the model. Provides a resource object of the given type. Declaration public T GetResource<T>(IResource resource, ITransaction transaction = null) where T : Resource Parameters Type Name Description IResource resource The resource that should be retrieved. ITransaction transaction Transaction associated with this action. Returns Type Description T A resource with all asserted properties. Type Parameters Name Description T | Improve this Doc View Source GetResource<T>(Uri, ITransaction) Retrieves a resource from the model. Provides a resource object of the given type. Declaration public T GetResource<T>(Uri uri, ITransaction transaction = null) where T : Resource Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction Transaction associated with this action. Returns Type Description T A resource with all asserted properties. Type Parameters Name Description T | Improve this Doc View Source GetResources(ISparqlQuery, Boolean, ITransaction) Executes a SPARQL query and provides an enumeration of matching resources. Declaration public IEnumerable<Resource> GetResources(ISparqlQuery query, bool inferenceEnabled = false, ITransaction transaction = null) Parameters Type Name Description ISparqlQuery query The SparqlQuery object that should be executed. System.Boolean inferenceEnabled Indicate that this query should work with enabled inferencing. ITransaction transaction transaction associated with this action. Returns Type Description System.Collections.Generic.IEnumerable < Resource > An enumeration of resources that match the given query. | Improve this Doc View Source GetResources<T>(ISparqlQuery, Boolean, ITransaction) Executes a SPARQL query and provides an enumeration of matching resources. Provides a resource object of the given type. Declaration public IEnumerable<T> GetResources<T>(ISparqlQuery query, bool inferenceEnabled = false, ITransaction transaction = null) where T : Resource Parameters Type Name Description ISparqlQuery query The SparqlQuery object that should be executed. System.Boolean inferenceEnabled Indicate that this query should work with enabled inferencing. ITransaction transaction transaction associated with this action. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumeration of resources that match the given query. Type Parameters Name Description T | Improve this Doc View Source GetResources<T>(Boolean, ITransaction) Returns a enumeration of all resources that match the given type. Declaration public IEnumerable<T> GetResources<T>(bool inferenceEnabled = false, ITransaction transaction = null) where T : Resource Parameters Type Name Description System.Boolean inferenceEnabled Indicate that this query should work with enabled inferencing. ITransaction transaction transaction associated with this action. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumeration of resources that match the given query. Type Parameters Name Description T | Improve this Doc View Source Read(Stream, RdfSerializationFormat, Boolean) Reads model contents from a stream. The method supports importing files and other models stored in the local RDF store. Declaration public bool Read(Stream stream, RdfSerializationFormat format, bool update) Parameters Type Name Description System.IO.Stream stream A stream. RdfSerializationFormat format Serialization format RdfSerializationFormat System.Boolean update Pass false if you want to overwrite existing data. True if you want to keep the data and add the new entries. Returns Type Description System.Boolean True if the contents of the model were imported, False if not. | Improve this Doc View Source Read(Uri, RdfSerializationFormat, Boolean) Imports the contents of a model located by the given URL. The method supports importing files and other models stored in the local RDF store. The location of the model is determined by the URI scheme. Declaration public bool Read(Uri url, RdfSerializationFormat format, bool update) Parameters Type Name Description System.Uri url A uniform resource locator. RdfSerializationFormat format Serialization format RdfSerializationFormat System.Boolean update Pass false if you want to overwrite existing data. True if you want to keep the data and add the new entries. Returns Type Description System.Boolean True if the contents of the model were imported, False if not. | Improve this Doc View Source UpdateResource(Resource, ITransaction) Updates the properties of a resource in the backing RDF store. Declaration public virtual void UpdateResource(Resource resource, ITransaction transaction = null) Parameters Type Name Description Resource resource Resource that is to be updated in the backing store. ITransaction transaction Transaction associated with this action. | Improve this Doc View Source Write(Stream, RdfSerializationFormat, INamespaceMap) Exports the contents of the model and provides a memory stream. Declaration public void Write(Stream fs, RdfSerializationFormat format, INamespaceMap namespaces = null) Parameters Type Name Description System.IO.Stream fs File stream to write to. RdfSerializationFormat format The serialization format. RdfSerializationFormat INamespaceMap namespaces Defines namespace to prefix mappings for the output. Implements IModel"
  },
  "api/Semiodesk.Trinity.UriRef.html": {
    "href": "api/Semiodesk.Trinity.UriRef.html",
    "title": "Trinity RDF | Class UriRef",
    "keywords": "Class UriRef This class extends the framework Uri class to also include fragments for equality testing. Inheritance System.Object System.Uri UriRef Urn Implements System.Runtime.Serialization.ISerializable Inherited Members System.Uri.SchemeDelimiter System.Uri.UriSchemeFile System.Uri.UriSchemeFtp System.Uri.UriSchemeGopher System.Uri.UriSchemeHttp System.Uri.UriSchemeHttps System.Uri.UriSchemeMailto System.Uri.UriSchemeNetPipe System.Uri.UriSchemeNetTcp System.Uri.UriSchemeNews System.Uri.UriSchemeNntp System.Uri.Canonicalize() System.Uri.CheckHostName(System.String) System.Uri.CheckSchemeName(System.String) System.Uri.CheckSecurity() System.Uri.Compare(System.Uri, System.Uri, System.UriComponents, System.UriFormat, System.StringComparison) System.Uri.Escape() System.Uri.EscapeDataString(System.String) System.Uri.EscapeString(System.String) System.Uri.EscapeUriString(System.String) System.Uri.FromHex(System.Char) System.Uri.GetComponents(System.UriComponents, System.UriFormat) System.Uri.GetLeftPart(System.UriPartial) System.Uri.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Uri.HexEscape(System.Char) System.Uri.HexUnescape(System.String, System.Int32) System.Uri.IsBadFileSystemCharacter(System.Char) System.Uri.IsBaseOf(System.Uri) System.Uri.IsExcludedCharacter(System.Char) System.Uri.IsHexDigit(System.Char) System.Uri.IsHexEncoding(System.String, System.Int32) System.Uri.IsReservedCharacter(System.Char) System.Uri.IsWellFormedOriginalString() System.Uri.IsWellFormedUriString(System.String, System.UriKind) System.Uri.MakeRelative(System.Uri) System.Uri.MakeRelativeUri(System.Uri) System.Uri.Parse() System.Uri.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Uri.ToString() System.Uri.TryCreate(System.String, System.UriKind, System.Uri) System.Uri.TryCreate(System.Uri, System.String, System.Uri) System.Uri.TryCreate(System.Uri, System.Uri, System.Uri) System.Uri.Unescape(System.String) System.Uri.UnescapeDataString(System.String) System.Uri.AbsolutePath System.Uri.AbsoluteUri System.Uri.Authority System.Uri.DnsSafeHost System.Uri.Fragment System.Uri.Host System.Uri.HostNameType System.Uri.IdnHost System.Uri.IsAbsoluteUri System.Uri.IsDefaultPort System.Uri.IsFile System.Uri.IsLoopback System.Uri.IsUnc System.Uri.LocalPath System.Uri.OriginalString System.Uri.PathAndQuery System.Uri.Port System.Uri.Query System.Uri.Scheme System.Uri.Segments System.Uri.UserEscaped System.Uri.UserInfo System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class UriRef : Uri, ISerializable Constructors | Improve this Doc View Source UriRef(String) Create an UriRef from a string. Declaration public UriRef(string uriString) Parameters Type Name Description System.String uriString | Improve this Doc View Source UriRef(String, UriKind) Creates an UriRef from a string with a given UriKind. Declaration public UriRef(string uriString, UriKind uriKind) Parameters Type Name Description System.String uriString System.UriKind uriKind | Improve this Doc View Source UriRef(Uri) Creates an UriRef from an Uri Declaration public UriRef(Uri uri) Parameters Type Name Description System.Uri uri | Improve this Doc View Source UriRef(Uri, String) Creates an UriRef from a base uri and a relative uri as string. Declaration public UriRef(Uri baseUri, string relativeUri) Parameters Type Name Description System.Uri baseUri System.String relativeUri Methods | Improve this Doc View Source Equals(Object) Tests the equality of two UriRefs. Declaration public override bool Equals(object comparand) Parameters Type Name Description System.Object comparand Returns Type Description System.Boolean Overrides System.Uri.Equals(System.Object) | Improve this Doc View Source GetGuid(String) Generates a globally unique resource identifier in the Semiodesk namespace: <urn:uuid:{GUID}/> Declaration public static Uri GetGuid(string format = \"urn:uuid:{0}\") Parameters Type Name Description System.String format Returns Type Description System.Uri A Uniform Resource Identifier. | Improve this Doc View Source GetHashCode() Override of GetHashCode which factors the fragment in. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Uri.GetHashCode() Implements System.Runtime.Serialization.ISerializable Extension Methods UriExtensions.ToUriRef(Uri)"
  },
  "api/Semiodesk.Trinity.BindingSet.html": {
    "href": "api/Semiodesk.Trinity.BindingSet.html",
    "title": "Trinity RDF | Class BindingSet",
    "keywords": "Class BindingSet A dictionary of named value bindings which represents a single query solution. Inheritance System.Object System.Collections.Generic.Dictionary < System.String , System.Object > BindingSet Implements System.Collections.Generic.IDictionary < System.String , System.Object > System.Collections.Generic.ICollection < System.Collections.Generic.KeyValuePair < System.String , System.Object >> System.Collections.Generic.IReadOnlyDictionary < System.String , System.Object > System.Collections.Generic.IReadOnlyCollection < System.Collections.Generic.KeyValuePair < System.String , System.Object >> System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.String , System.Object >> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable System.Runtime.Serialization.IDeserializationCallback System.Runtime.Serialization.ISerializable Inherited Members System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.set_Item(System.Object, System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.Add(System.String, System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.Clear() System.Collections.Generic.Dictionary<System.String, System.Object>.ContainsKey(System.String) System.Collections.Generic.Dictionary<System.String, System.Object>.ContainsValue(System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.Object>.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Collections.Generic.Dictionary<System.String, System.Object>.OnDeserialization(System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.Remove(System.String) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.Object>) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.Object>) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.Object>[], System.Int32) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.Object>) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Add(System.Object, System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Contains(System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Remove(System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IEnumerable.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.Object>.TryGetValue(System.String, System.Object) System.Collections.Generic.Dictionary<System.String, System.Object>.Comparer System.Collections.Generic.Dictionary<System.String, System.Object>.Count System.Collections.Generic.Dictionary<System.String, System.Object>.Item[System.String] System.Collections.Generic.Dictionary<System.String, System.Object>.Keys System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.IsReadOnly System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IDictionary<System.String, System.Object>.Keys System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IDictionary<System.String, System.Object>.Values System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>.Keys System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>.Values System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.ICollection.IsSynchronized System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.ICollection.SyncRoot System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.IsFixedSize System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.IsReadOnly System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Item[System.Object] System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Keys System.Collections.Generic.Dictionary<System.String, System.Object>.System.Collections.IDictionary.Values System.Collections.Generic.Dictionary<System.String, System.Object>.Values System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class BindingSet : Dictionary<string, object>, IDictionary<string, object>, ICollection<KeyValuePair<string, object>>, IReadOnlyDictionary<string, object>, IReadOnlyCollection<KeyValuePair<string, object>>, IEnumerable<KeyValuePair<string, object>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable Implements System.Collections.Generic.IDictionary<TKey, TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.IEnumerable System.Runtime.Serialization.IDeserializationCallback System.Runtime.Serialization.ISerializable"
  },
  "api/Semiodesk.Trinity.XsdTypeMapper.html": {
    "href": "api/Semiodesk.Trinity.XsdTypeMapper.html",
    "title": "Trinity RDF | Class XsdTypeMapper",
    "keywords": "Class XsdTypeMapper Provides functionality for the serialization and deserialization of .NET objects to XML Schema encoded strings. Inheritance System.Object XsdTypeMapper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class XsdTypeMapper Fields | Improve this Doc View Source NativeToXsd Maps .NET types to XSD type URIs. Declaration protected static Dictionary<Type, Uri> NativeToXsd Field Value Type Description System.Collections.Generic.Dictionary < System.Type , System.Uri > | Improve this Doc View Source Serializers Maps .NET types to object serialization delegates. Declaration protected static Dictionary<Type, XsdTypeMapper.ObjectSerializationDelegate> Serializers Field Value Type Description System.Collections.Generic.Dictionary < System.Type , XsdTypeMapper.ObjectSerializationDelegate > | Improve this Doc View Source XsdToNative Maps XSD type URIs to .NET types. Declaration protected static Dictionary<string, Type> XsdToNative Field Value Type Description System.Collections.Generic.Dictionary < System.String , System.Type > Methods | Improve this Doc View Source DeserializeBool(String) Deserialize a bool from a string. Declaration public static object DeserializeBool(string str) Parameters Type Name Description System.String str The serialized bool Returns Type Description System.Object A bool value | Improve this Doc View Source DeserializeByteArray(String) Deserialize a ByteArray from a string. Declaration public static object DeserializeByteArray(string str) Parameters Type Name Description System.String str The serialized ByteArray Returns Type Description System.Object A ByteArray value | Improve this Doc View Source DeserializeDateTime(String) Deserialize a DateTime from a string. Declaration public static object DeserializeDateTime(string str) Parameters Type Name Description System.String str The serialized DateTime Returns Type Description System.Object A DateTime value | Improve this Doc View Source DeserializeDecimal(String) Deserialize a decimal from a string. Declaration public static object DeserializeDecimal(string str) Parameters Type Name Description System.String str The serialized decimal Returns Type Description System.Object A decimal value | Improve this Doc View Source DeserializeDouble(String) Deserialize a double from a string. Declaration public static object DeserializeDouble(string str) Parameters Type Name Description System.String str The serialized double Returns Type Description System.Object A double value | Improve this Doc View Source DeserializeInt16(String) Deserialize an int16 from a string. Declaration public static object DeserializeInt16(string str) Parameters Type Name Description System.String str The serialized int16 Returns Type Description System.Object An int16 | Improve this Doc View Source DeserializeInt32(String) Deserialize an int32 from a string. Declaration public static object DeserializeInt32(string str) Parameters Type Name Description System.String str The serialized int32 Returns Type Description System.Object a int32 value | Improve this Doc View Source DeserializeInt64(String) Deserialize an int64 from a string. Declaration public static object DeserializeInt64(string str) Parameters Type Name Description System.String str The serialized int64 Returns Type Description System.Object A int64 value | Improve this Doc View Source DeserializeLiteralNode(BaseLiteralNode) Deserialize a LiteralNode from a string. Declaration public static object DeserializeLiteralNode(BaseLiteralNode node) Parameters Type Name Description VDS.RDF.BaseLiteralNode node The serialized LiteralNode Returns Type Description System.Object A LiteralNode value | Improve this Doc View Source DeserializeResource(String) Deserialize a Resource from a string. Declaration public static object DeserializeResource(string str) Parameters Type Name Description System.String str The serialized Resource Returns Type Description System.Object A Resource value | Improve this Doc View Source DeserializeSingle(String) Deserialize a single from a string. Declaration public static object DeserializeSingle(string str) Parameters Type Name Description System.String str The serialized single Returns Type Description System.Object A single value | Improve this Doc View Source DeserializeString(String) Deserialize string, nothing to do. Declaration public static object DeserializeString(string str) Parameters Type Name Description System.String str The string Returns Type Description System.Object The string | Improve this Doc View Source DeserializeString(String, Uri) Deserialize string with given type uri. Declaration public static object DeserializeString(string str, Uri typeUri) Parameters Type Name Description System.String str The value as string. System.Uri typeUri The xsd type. Returns Type Description System.Object The value in its correct type. | Improve this Doc View Source DeserializeUInt16(String) Deserialize an uint6 from a string. Declaration public static object DeserializeUInt16(string str) Parameters Type Name Description System.String str The serialized int64 Returns Type Description System.Object A uint16 value | Improve this Doc View Source DeserializeUInt32(String) Deserialize an int32 from a string. Declaration public static object DeserializeUInt32(string str) Parameters Type Name Description System.String str The serialized int32 Returns Type Description System.Object A int32 value | Improve this Doc View Source DeserializeUInt64(String) Deserialize an uint64 from a string. Declaration public static object DeserializeUInt64(string str) Parameters Type Name Description System.String str The serialized uint64 Returns Type Description System.Object A uint64 value | Improve this Doc View Source DeserializeUri(String) Deserialize a uri from a string. Declaration public static object DeserializeUri(string str) Parameters Type Name Description System.String str The serialized uri Returns Type Description System.Object A uri value | Improve this Doc View Source DeserializeXmlNode(XmlNode) Deserialize a XmlNode from a string. Declaration public static object DeserializeXmlNode(XmlNode node) Parameters Type Name Description System.Xml.XmlNode node The serialized XmlNode Returns Type Description System.Object A XmlNode value | Improve this Doc View Source GetTypeFromXsd(Uri) Provides the XML Schema type URI for a given .NET type. Declaration public static Type GetTypeFromXsd(Uri uri) Parameters Type Name Description System.Uri uri A xsd type uri. Returns Type Description System.Type A XML Schema type URI. | Improve this Doc View Source GetXsdTypeUri(Type) Provides the XML Schema type URI for a given .NET type. Declaration public static Uri GetXsdTypeUri(Type type) Parameters Type Name Description System.Type type A .NET type object. Returns Type Description System.Uri A XML Schema type URI. | Improve this Doc View Source HasXsdTypeUri(Type) Indicates if there is a registered XML Schema type URI for the given .NET type. Declaration public static bool HasXsdTypeUri(Type type) Parameters Type Name Description System.Type type A .NET type object. Returns Type Description System.Boolean true if there is a XML schema type, false otherwise. | Improve this Doc View Source SerializeBool(Object) Serialize a bool Declaration public static string SerializeBool(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeByteArray(Object) Serialize a byte array Declaration public static string SerializeByteArray(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeDateTime(Object) Serialize a DateTime Declaration public static string SerializeDateTime(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeDecimal(Object) Serialize a decimal Declaration public static string SerializeDecimal(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeDouble(Object) Serialize a double Declaration public static string SerializeDouble(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeInt16(Object) Serialize an Int16 Declaration public static string SerializeInt16(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeInt32(Object) Serialize an Int32 Declaration public static string SerializeInt32(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeInt64(Object) Serialize an Int64 Declaration public static string SerializeInt64(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeIResource(Object) Serialize an IResource Declaration public static string SerializeIResource(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeObject(Object) Serializes an object to an XML Schema encoded string. Declaration public static string SerializeObject(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeObject(Object, Type) Serializes an object forcd to a given type to an XML Schema encoded string. Declaration public static string SerializeObject(object obj, Type type) Parameters Type Name Description System.Object obj System.Type type Returns Type Description System.String | Improve this Doc View Source SerializeSingle(Object) Serialize a float Declaration public static string SerializeSingle(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeString(Object) Serialize a string Declaration public static string SerializeString(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeStringArray(Object) Serialize an array of strings Declaration public static string SerializeStringArray(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeStringCultureInfoTuple(Object) Serialize a tuple consisting of a string and its associated culture Declaration public static string SerializeStringCultureInfoTuple(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeUInt16(Object) Serialize an Uint16 Declaration public static string SerializeUInt16(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeUInt32(Object) Serialize an Uint32 Declaration public static string SerializeUInt32(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeUInt64(Object) Serialize an Uint64 Declaration public static string SerializeUInt64(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String | Improve this Doc View Source SerializeUri(Object) Serialize an Uri Declaration public static string SerializeUri(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.String"
  },
  "api/Semiodesk.Trinity.Resource.html": {
    "href": "api/Semiodesk.Trinity.Resource.html",
    "title": "Trinity RDF | Class Resource",
    "keywords": "Class Resource This class repesents a RDF resource. Inheritance System.Object Resource Class Property Implements IResource System.ComponentModel.INotifyPropertyChanged System.IDisposable ITransactional Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class Resource : IResource, INotifyPropertyChanged, IDisposable, ITransactional Constructors | Improve this Doc View Source Resource(Resource) Create a new instance of the class and copy the properties from another class instance. Declaration public Resource(Resource other) Parameters Type Name Description Resource other | Improve this Doc View Source Resource(UriRef) Create a new resource with a given Uri. Declaration public Resource(UriRef uri) Parameters Type Name Description UriRef uri | Improve this Doc View Source Resource(String) Create a new resource with a given string. Throws an exception if string is Uri compatible. Declaration public Resource(string uriString) Parameters Type Name Description System.String uriString The string converted to a Uri. Throws an exception if not possible. | Improve this Doc View Source Resource(Uri) Create a new resource with a given Uri. Declaration public Resource(Uri uri) Parameters Type Name Description System.Uri uri Properties | Improve this Doc View Source IsDisposed Indicates if the resources has been disposed. Declaration [JsonIgnore] public bool IsDisposed { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsNew New resource which have never been committed need to be treated differently. Declaration [JsonIgnore] public bool IsNew { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsReadOnly Indicates this resource is read-only. Declaration [JsonIgnore] public virtual bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSynchronized True if the properties of the resources has been committed to the model. Declaration [Browsable(false)] [JsonIgnore] public bool IsSynchronized { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Language Set the language of this resource. This will change te mapped strings to this language. Declaration [JsonIgnore] public string Language { get; set; } Property Value Type Description System.String | Improve this Doc View Source Model Public accessor to the model. Declaration public IModel Model { get; set; } Property Value Type Description IModel | Improve this Doc View Source ThrowOnInvalidPropertyName Returns whether an exception is thrown, or if a Debug.Fail() is used when an invalid property name is passed to the VerifyPropertyName method. The default value is false, but subclasses used by unit tests might override this property's getter to return true. Declaration protected virtual bool ThrowOnInvalidPropertyName { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Uri The uri which represents the resource. Declaration public UriRef Uri { get; set; } Property Value Type Description UriRef Methods | Improve this Doc View Source AddProperty(Property, IResource) Add a property with a resource as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public virtual void AddProperty(Property property, IResource value) Parameters Type Name Description Property property IResource value | Improve this Doc View Source AddProperty(Property, Boolean) Add a property with a bool as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, bool value) Parameters Type Name Description Property property System.Boolean value | Improve this Doc View Source AddProperty(Property, Byte[]) Add a property with a byte array as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, byte[] value) Parameters Type Name Description Property property System.Byte [] value | Improve this Doc View Source AddProperty(Property, DateTime) Add a property with a DateTime as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, DateTime value) Parameters Type Name Description Property property System.DateTime value | Improve this Doc View Source AddProperty(Property, Decimal) Add a property with a decimal as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, decimal value) Parameters Type Name Description Property property System.Decimal value | Improve this Doc View Source AddProperty(Property, Double) Add a property with a double as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, double value) Parameters Type Name Description Property property System.Double value | Improve this Doc View Source AddProperty(Property, Int16) Add a property with a Int16 as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, short value) Parameters Type Name Description Property property System.Int16 value | Improve this Doc View Source AddProperty(Property, Int32) Add a property with a Int32 as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, int value) Parameters Type Name Description Property property System.Int32 value | Improve this Doc View Source AddProperty(Property, Int64) Add a property with a Int64 as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, long value) Parameters Type Name Description Property property System.Int64 value | Improve this Doc View Source AddProperty(Property, Single) Add a property with a float as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, float value) Parameters Type Name Description Property property System.Single value | Improve this Doc View Source AddProperty(Property, String) Add a property with a string as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, string value) Parameters Type Name Description Property property System.String value | Improve this Doc View Source AddProperty(Property, String, CultureInfo) Add a property with a string and language as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, string value, CultureInfo language) Parameters Type Name Description Property property System.String value System.Globalization.CultureInfo language | Improve this Doc View Source AddProperty(Property, String, String) Add a property with a string and language as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, string value, string language) Parameters Type Name Description Property property System.String value System.String language | Improve this Doc View Source AddProperty(Property, UInt16) Add a property with a UInt16 as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, ushort value) Parameters Type Name Description Property property System.UInt16 value | Improve this Doc View Source AddProperty(Property, UInt32) Add a property with a UInt32 as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, uint value) Parameters Type Name Description Property property System.UInt32 value | Improve this Doc View Source AddProperty(Property, UInt64) Add a property with a UInt64 as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public void AddProperty(Property property, ulong value) Parameters Type Name Description Property property System.UInt64 value | Improve this Doc View Source AddProperty(Property, Uri) Add a property with an Uri as value. If this property is mapped with a compatible type, it will be filled with the given value. Declaration public virtual void AddProperty(Property property, Uri value) Parameters Type Name Description Property property System.Uri value | Improve this Doc View Source Commit() Persist changes in the model. Declaration public virtual void Commit() | Improve this Doc View Source Dispose() Dispose this resource. Does nothing meaningful currently. Declaration public void Dispose() | Improve this Doc View Source Equals(Object) Determines wheter the URIs of the compared objects are equal. Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other The object to be compared. Returns Type Description System.Boolean true if the URIs of the compared objects are equal, false otherwise. Overrides System.Object.Equals(System.Object) | Improve this Doc View Source Finalize() Destructor Declaration protected void Finalize() | Improve this Doc View Source GetHashCode() Returns the hash code of the objects URI. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code string. Overrides System.Object.GetHashCode() | Improve this Doc View Source GetTypes() Overwrite this method to return the RDF classes of your resource type. Declaration public virtual IEnumerable<Class> GetTypes() Returns Type Description System.Collections.Generic.IEnumerable < Class > | Improve this Doc View Source GetValue(Property) Return the value for a given property. Declaration public virtual object GetValue(Property property) Parameters Type Name Description Property property A RDF property. Returns Type Description System.Object The value on success, null if the object has no such property. | Improve this Doc View Source GetValue(Property, Object) Return the value for a given property with a predefined default value. Declaration public object GetValue(Property property, object defaultValue) Parameters Type Name Description Property property A RDF property. System.Object defaultValue Specifies a default value that should be returned if no value exists. Returns Type Description System.Object The value on success, the default value if the object has no such property. | Improve this Doc View Source GetValue<T>(PropertyMapping<T>) Returns the value from the mapped property. Declaration protected virtual T GetValue<T>(PropertyMapping<T> propertyMapping) Parameters Type Name Description PropertyMapping <T> propertyMapping Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source HasProperty(Property) Returns true if the resource has any object connected with the specified property. Declaration public virtual bool HasProperty(Property property) Parameters Type Name Description Property property The property to be checked. Returns Type Description System.Boolean true if the property is associated, false if not | Improve this Doc View Source HasProperty(Property, Object) Returns true if the specified value is connected to this resource with the given property. Declaration public virtual bool HasProperty(Property property, object value) Parameters Type Name Description Property property The property to be checked System.Object value The value that should be tested Returns Type Description System.Boolean true if the value is associated with the property, false if not | Improve this Doc View Source HasProperty(Property, String, CultureInfo) Returns true if the specified string value with the given language is connected to this resource with the given property. Declaration public virtual bool HasProperty(Property property, string value, CultureInfo language) Parameters Type Name Description Property property The property System.String value The string value. System.Globalization.CultureInfo language The language the string is in. Returns Type Description System.Boolean | Improve this Doc View Source HasProperty(Property, String, String) Returns true if the specified string value with the given language is connected to this resource with the given property. Declaration public virtual bool HasProperty(Property property, string value, string language) Parameters Type Name Description Property property The property System.String value The string value. System.String language The language the string is in. Returns Type Description System.Boolean | Improve this Doc View Source HasPropertyMapping(Property, Type) This method returns if property is mapped. Declaration public bool HasPropertyMapping(Property property, Type type) Parameters Type Name Description Property property Rdf property to be tested. System.Type type Type of the mapping. Returns Type Description System.Boolean | Improve this Doc View Source ListProperties() List all available properties. This includes mapped properties if they have valid values. Declaration public virtual IEnumerable<Property> ListProperties() Returns Type Description System.Collections.Generic.IEnumerable < Property > | Improve this Doc View Source ListValues(Property) Lists all values associated with one property. This inclues the mapped values as well. Declaration public virtual IEnumerable<object> ListValues(Property property) Parameters Type Name Description Property property Returns Type Description System.Collections.Generic.IEnumerable < System.Object > | Improve this Doc View Source ListValues(Boolean) This method lists all combinations of properties and values. Declaration public virtual IEnumerable<Tuple<Property, object>> ListValues(bool forSerialization = false) Parameters Type Name Description System.Boolean forSerialization Only return values which should be serialized. Returns Type Description System.Collections.Generic.IEnumerable < System.Tuple < Property , System.Object >> | Improve this Doc View Source RaisePropertyChanged(String) Raises the PropertyChanged event of the object. Declaration protected virtual void RaisePropertyChanged(string propertyName) Parameters Type Name Description System.String propertyName Name of a property. | Improve this Doc View Source RegisterPropertyChanged(String) Register a property name to raise the INotifyProperty signal on rollback. Declaration protected void RegisterPropertyChanged(string propertyName) Parameters Type Name Description System.String propertyName Name of a property. | Improve this Doc View Source ReloadLocalizedMappings() Update the property mappings with the values in the selected language. Declaration protected void ReloadLocalizedMappings() | Improve this Doc View Source RemoveProperty(Property, IResource) Removes a property with a IResource value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, IResource value) Parameters Type Name Description Property property IResource value | Improve this Doc View Source RemoveProperty(Property, Boolean) Removes a property with a bool value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, bool value) Parameters Type Name Description Property property System.Boolean value | Improve this Doc View Source RemoveProperty(Property, Byte[]) Removes a property with a byte array value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, byte[] value) Parameters Type Name Description Property property System.Byte [] value | Improve this Doc View Source RemoveProperty(Property, DateTime) Removes a property with a DateTime value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, DateTime value) Parameters Type Name Description Property property System.DateTime value | Improve this Doc View Source RemoveProperty(Property, Decimal) Removes a property with a decimal value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, decimal value) Parameters Type Name Description Property property System.Decimal value | Improve this Doc View Source RemoveProperty(Property, Double) Removes a property with a double value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, double value) Parameters Type Name Description Property property System.Double value | Improve this Doc View Source RemoveProperty(Property, Int16) Removes a property with a Int16 value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, short value) Parameters Type Name Description Property property System.Int16 value | Improve this Doc View Source RemoveProperty(Property, Int32) Removes a property with a Int32 value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, int value) Parameters Type Name Description Property property System.Int32 value | Improve this Doc View Source RemoveProperty(Property, Int64) Removes a property with a Int64 value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, long value) Parameters Type Name Description Property property System.Int64 value | Improve this Doc View Source RemoveProperty(Property, Single) Removes a property with a float value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, float value) Parameters Type Name Description Property property System.Single value | Improve this Doc View Source RemoveProperty(Property, String) Removes a property with a string value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, string value) Parameters Type Name Description Property property System.String value | Improve this Doc View Source RemoveProperty(Property, String, CultureInfo) Removes a property with a string value associated with the given language. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, string value, CultureInfo language) Parameters Type Name Description Property property System.String value System.Globalization.CultureInfo language | Improve this Doc View Source RemoveProperty(Property, String, String) Removes a property with a string value associated with the given language. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, string value, string language) Parameters Type Name Description Property property System.String value System.String language | Improve this Doc View Source RemoveProperty(Property, UInt16) Removes a property with a UInt16 value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, ushort value) Parameters Type Name Description Property property System.UInt16 value | Improve this Doc View Source RemoveProperty(Property, UInt32) Removes a property with a UInt32 value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, uint value) Parameters Type Name Description Property property System.UInt32 value | Improve this Doc View Source RemoveProperty(Property, UInt64) Removes a property with a UInt64 value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, ulong value) Parameters Type Name Description Property property System.UInt64 value | Improve this Doc View Source RemoveProperty(Property, Uri) Removes a property with an Uri value. If this property is mapped with a compatible type, the given value will be removed. Declaration public void RemoveProperty(Property property, Uri value) Parameters Type Name Description Property property System.Uri value | Improve this Doc View Source Rollback() Reload the resource from the model. Declaration public void Rollback() | Improve this Doc View Source SetIsReadOnly(Boolean) This method provides a mechanism to change writability in subclasses. Declaration protected virtual void SetIsReadOnly(bool value) Parameters Type Name Description System.Boolean value | Improve this Doc View Source SetModel(IModel) Sets the model the resource is stored in. Declaration public void SetModel(IModel model) Parameters Type Name Description IModel model A model. | Improve this Doc View Source SetValue<T>(PropertyMapping<T>, T) Set the mapped value. This also raises the PropertyChanged event. Declaration protected virtual void SetValue<T>(PropertyMapping<T> propertyMapping, T value) Parameters Type Name Description PropertyMapping <T> propertyMapping T value Type Parameters Name Description T | Improve this Doc View Source ToString() Returns the uri with brackets. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source VerifyPropertyName(String) Warns the developer if this object does not have a public property with the specified name. This method does not exist in a Release build. Declaration [Conditional(\"DEBUG\")] public void VerifyPropertyName(string propertyName) Parameters Type Name Description System.String propertyName Events | Improve this Doc View Source PropertyChanged Needed for the implementation of the INotifyPropertyChanged interface. Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description System.ComponentModel.PropertyChangedEventHandler Implements IResource System.ComponentModel.INotifyPropertyChanged System.IDisposable ITransactional"
  },
  "api/Semiodesk.Trinity.Query.MemberInfoExtensions.html": {
    "href": "api/Semiodesk.Trinity.Query.MemberInfoExtensions.html",
    "title": "Trinity RDF | Class MemberInfoExtensions",
    "keywords": "Class MemberInfoExtensions Extensions for the MemberInfo type. Inheritance System.Object MemberInfoExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Query Assembly : Semiodesk.Trinity.dll Syntax public static class MemberInfoExtensions Methods | Improve this Doc View Source GetMemberType(MemberInfo) Get the .NET type of the given class member. Declaration public static Type GetMemberType(this MemberInfo member) Parameters Type Name Description System.Reflection.MemberInfo member A class member. Returns Type Description System.Type The class member type. | Improve this Doc View Source IsBuiltInCall(MemberInfo) Indicates if the given member is a built-in call. Declaration public static bool IsBuiltInCall(this MemberInfo member) Parameters Type Name Description System.Reflection.MemberInfo member A class member. Returns Type Description System.Boolean true if the class member is a built-in call, false otherwise. | Improve this Doc View Source IsUriType(MemberInfo) Indicates if the given member is of type Uri or a sub type. Declaration public static bool IsUriType(this MemberInfo member) Parameters Type Name Description System.Reflection.MemberInfo member A class member. Returns Type Description System.Boolean true if the member can be represented by a URI, false otherwise. | Improve this Doc View Source TryGetCustomAttribute<TAttribute>(MemberInfo) Gets the first custom attribute of a specified type which is attached to a class member. Declaration public static TAttribute TryGetCustomAttribute<TAttribute>(this MemberInfo member) where TAttribute : Attribute Parameters Type Name Description System.Reflection.MemberInfo member A class member. Returns Type Description TAttribute A custom attribute object on success, null otherwise. Type Parameters Name Description TAttribute Custom attribute type."
  },
  "api/Semiodesk.Trinity.NamespaceMap.html": {
    "href": "api/Semiodesk.Trinity.NamespaceMap.html",
    "title": "Trinity RDF | Class NamespaceMap",
    "keywords": "Class NamespaceMap A dictionary which maps prefixes to namespace URIs. Inheritance System.Object System.Collections.Generic.Dictionary < System.String , System.Uri > NamespaceMap Implements System.Collections.Generic.IReadOnlyDictionary < System.String , System.Uri > System.Collections.Generic.IReadOnlyCollection < System.Collections.Generic.KeyValuePair < System.String , System.Uri >> System.Collections.IDictionary System.Collections.ICollection System.Runtime.Serialization.IDeserializationCallback System.Runtime.Serialization.ISerializable INamespaceMap System.Collections.Generic.IDictionary < System.String , System.Uri > System.Collections.Generic.ICollection < System.Collections.Generic.KeyValuePair < System.String , System.Uri >> System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.String , System.Uri >> System.Collections.IEnumerable Inherited Members System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.IDictionary.set_Item(System.Object, System.Object) System.Collections.Generic.Dictionary<System.String, System.Uri>.Add(System.String, System.Uri) System.Collections.Generic.Dictionary<System.String, System.Uri>.Clear() System.Collections.Generic.Dictionary<System.String, System.Uri>.ContainsKey(System.String) System.Collections.Generic.Dictionary<System.String, System.Uri>.ContainsValue(System.Uri) System.Collections.Generic.Dictionary<System.String, System.Uri>.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.Uri>.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Collections.Generic.Dictionary<System.String, System.Uri>.OnDeserialization(System.Object) System.Collections.Generic.Dictionary<System.String, System.Uri>.Remove(System.String) System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Uri>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.Uri>) System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Uri>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.Uri>) System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Uri>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.Uri>[], System.Int32) System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Uri>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.Uri>) System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Uri>>.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.IDictionary.Add(System.Object, System.Object) System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.IDictionary.Contains(System.Object) System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.IDictionary.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.IDictionary.Remove(System.Object) System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.IEnumerable.GetEnumerator() System.Collections.Generic.Dictionary<System.String, System.Uri>.TryGetValue(System.String, System.Uri) System.Collections.Generic.Dictionary<System.String, System.Uri>.Comparer System.Collections.Generic.Dictionary<System.String, System.Uri>.Count System.Collections.Generic.Dictionary<System.String, System.Uri>.Item[System.String] System.Collections.Generic.Dictionary<System.String, System.Uri>.Keys System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Uri>>.IsReadOnly System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.Generic.IDictionary<System.String, System.Uri>.Keys System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.Generic.IDictionary<System.String, System.Uri>.Values System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Uri>.Keys System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.Generic.IReadOnlyDictionary<System.String, System.Uri>.Values System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.ICollection.IsSynchronized System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.ICollection.SyncRoot System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.IDictionary.IsFixedSize System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.IDictionary.IsReadOnly System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.IDictionary.Item[System.Object] System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.IDictionary.Keys System.Collections.Generic.Dictionary<System.String, System.Uri>.System.Collections.IDictionary.Values System.Collections.Generic.Dictionary<System.String, System.Uri>.Values System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class NamespaceMap : Dictionary<string, Uri>, IReadOnlyDictionary<string, Uri>, IReadOnlyCollection<KeyValuePair<string, Uri>>, IDictionary, ICollection, IDeserializationCallback, ISerializable, INamespaceMap, IDictionary<string, Uri>, ICollection<KeyValuePair<string, Uri>>, IEnumerable<KeyValuePair<string, Uri>>, IEnumerable Implements System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.IDictionary System.Collections.ICollection System.Runtime.Serialization.IDeserializationCallback System.Runtime.Serialization.ISerializable INamespaceMap System.Collections.Generic.IDictionary<TKey, TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Semiodesk.Trinity.FinishedTransactionEvent.html": {
    "href": "api/Semiodesk.Trinity.FinishedTransactionEvent.html",
    "title": "Trinity RDF | Delegate FinishedTransactionEvent",
    "keywords": "Delegate FinishedTransactionEvent Handle for transaction events. Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public delegate void FinishedTransactionEvent(object sender, TransactionEventArgs e); Parameters Type Name Description System.Object sender Object which raised the event. TransactionEventArgs e Event arguments."
  },
  "api/Semiodesk.Trinity.OntologyDiscovery.html": {
    "href": "api/Semiodesk.Trinity.OntologyDiscovery.html",
    "title": "Trinity RDF | Class OntologyDiscovery",
    "keywords": "Class OntologyDiscovery This static class contains a mapping of all properties and classes to its uris for discovery of the proper object and its attributes. For future reference: look into PreApplicationStartMethodAttribute Class or ModuleInitializer Inheritance System.Object OntologyDiscovery Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public static class OntologyDiscovery Fields | Improve this Doc View Source Classes All registered RDF classes in the current application. Declaration public static readonly Dictionary<string, Class> Classes Field Value Type Description System.Collections.Generic.Dictionary < System.String , Class > | Improve this Doc View Source Namespaces All registered RDF ontology prefixes in the current application. Declaration public static readonly Dictionary<string, Uri> Namespaces Field Value Type Description System.Collections.Generic.Dictionary < System.String , System.Uri > | Improve this Doc View Source Properties All registered RDF properties in the current application. Declaration public static readonly Dictionary<string, Property> Properties Field Value Type Description System.Collections.Generic.Dictionary < System.String , Property > Methods | Improve this Doc View Source AddAssembly(Assembly) Register an assembly to search for RDF ontologies. Declaration public static void AddAssembly(Assembly asm) Parameters Type Name Description System.Reflection.Assembly asm | Improve this Doc View Source AddAssembly(Type) Declaration public static void AddAssembly(Type type) Parameters Type Name Description System.Type type | Improve this Doc View Source AddNamespace(String, Uri) Register a namespace with a prefix. Declaration public static void AddNamespace(string prefix, Uri uri) Parameters Type Name Description System.String prefix A namespace prefix. System.Uri uri A uniform resource identifier. | Improve this Doc View Source GetProperty(String) Returns a a property with the given string. Creates a new one if it doesn't exist. Declaration public static Property GetProperty(string u) Parameters Type Name Description System.String u Returns Type Description Property | Improve this Doc View Source GetProperty(Uri) Returns a a property with the given Uri. Creates a new one if it doesn't exist. Declaration public static Property GetProperty(Uri u) Parameters Type Name Description System.Uri u Returns Type Description Property | Improve this Doc View Source RegisterCallingAssembly() Register the calling assembly to search for RDF ontologies. Declaration public static void RegisterCallingAssembly()"
  },
  "api/Semiodesk.Trinity.Collections.AsyncVirtualizingCollection-1.html": {
    "href": "api/Semiodesk.Trinity.Collections.AsyncVirtualizingCollection-1.html",
    "title": "Trinity RDF | Class AsyncVirtualizingCollection<T>",
    "keywords": "Class AsyncVirtualizingCollection<T> Derived VirtualizatingCollection, performing loading asychronously. Inheritance System.Object VirtualizingCollection <T> AsyncVirtualizingCollection<T> AsyncVirtualizingSparqlCollection<T> Implements System.Collections.Generic.IList <T> System.Collections.Generic.ICollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable System.Collections.Specialized.INotifyCollectionChanged System.ComponentModel.INotifyPropertyChanged Inherited Members VirtualizingCollection<T>._pageSize VirtualizingCollection<T>._pageTimeout VirtualizingCollection<T>.PageSize VirtualizingCollection<T>.PageTimeout VirtualizingCollection<T>.Count VirtualizingCollection<T>.SyncRoot VirtualizingCollection<T>.IsSynchronized VirtualizingCollection<T>.IsReadOnly VirtualizingCollection<T>.IsFixedSize VirtualizingCollection<T>.Item[Int32] VirtualizingCollection<T>.IList.Item[Int32] VirtualizingCollection<T>.GetEnumerator() VirtualizingCollection<T>.IEnumerable.GetEnumerator() VirtualizingCollection<T>.Add(T) VirtualizingCollection<T>.IList.Add(Object) VirtualizingCollection<T>.IList.Contains(Object) VirtualizingCollection<T>.Contains(T) VirtualizingCollection<T>.Clear() VirtualizingCollection<T>.IList.IndexOf(Object) VirtualizingCollection<T>.IndexOf(T) VirtualizingCollection<T>.Insert(Int32, T) VirtualizingCollection<T>.IList.Insert(Int32, Object) VirtualizingCollection<T>.RemoveAt(Int32) VirtualizingCollection<T>.IList.Remove(Object) VirtualizingCollection<T>.Remove(T) VirtualizingCollection<T>.CopyTo(T[], Int32) VirtualizingCollection<T>.ICollection.CopyTo(Array, Int32) VirtualizingCollection<T>.CleanUpPages() VirtualizingCollection<T>.PopulatePage(Int32, IList<T>) VirtualizingCollection<T>.RequestPage(Int32) VirtualizingCollection<T>.FetchPage(Int32) VirtualizingCollection<T>.FetchCount() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Collections Assembly : Semiodesk.Trinity.dll Syntax public class AsyncVirtualizingCollection<T> : VirtualizingCollection<T>, IList<T>, ICollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable, INotifyCollectionChanged, INotifyPropertyChanged where T : Resource Type Parameters Name Description T The type of items in the collection Constructors | Improve this Doc View Source AsyncVirtualizingCollection(IItemsProvider<T>) Initializes a new instance of the AsyncVirtualizingCollection<T> class. Declaration public AsyncVirtualizingCollection(IItemsProvider<T> itemsProvider) Parameters Type Name Description IItemsProvider <T> itemsProvider The items provider. | Improve this Doc View Source AsyncVirtualizingCollection(IItemsProvider<T>, Int32) Initializes a new instance of the AsyncVirtualizingCollection<T> class. Declaration public AsyncVirtualizingCollection(IItemsProvider<T> itemsProvider, int pageSize) Parameters Type Name Description IItemsProvider <T> itemsProvider The items provider. System.Int32 pageSize Size of the page. | Improve this Doc View Source AsyncVirtualizingCollection(IItemsProvider<T>, Int32, Int32) Initializes a new instance of the AsyncVirtualizingCollection<T> class. Declaration public AsyncVirtualizingCollection(IItemsProvider<T> itemsProvider, int pageSize, int pageTimeout) Parameters Type Name Description IItemsProvider <T> itemsProvider The items provider. System.Int32 pageSize Size of the page. System.Int32 pageTimeout The page timeout. Properties | Improve this Doc View Source IsLoading Gets or sets a value indicating whether the collection is loading. Declaration public bool IsLoading { get; set; } Property Value Type Description System.Boolean true if this collection is loading; otherwise, false . | Improve this Doc View Source SynchronizationContext Gets the synchronization context used for UI-related operations. This is obtained as the current SynchronizationContext when the AsyncVirtualizingCollection is created. Declaration protected SynchronizationContext SynchronizationContext { get; } Property Value Type Description System.Threading.SynchronizationContext The synchronization context. Methods | Improve this Doc View Source LoadCount() Asynchronously loads the count of items. Declaration protected override void LoadCount() Overrides Semiodesk.Trinity.Collections.VirtualizingCollection<T>.LoadCount() | Improve this Doc View Source LoadPage(Int32) Asynchronously loads the page. Declaration protected override void LoadPage(int index) Parameters Type Name Description System.Int32 index The index. Overrides Semiodesk.Trinity.Collections.VirtualizingCollection<T>.LoadPage(System.Int32) Events | Improve this Doc View Source CollectionChanged The event that gets notified if the collection gets changed. Declaration public event NotifyCollectionChangedEventHandler CollectionChanged Event Type Type Description System.Collections.Specialized.NotifyCollectionChangedEventHandler | Improve this Doc View Source PropertyChanged The event that gets notified if a property has changed. Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description System.ComponentModel.PropertyChangedEventHandler Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable System.Collections.Specialized.INotifyCollectionChanged System.ComponentModel.INotifyPropertyChanged"
  },
  "api/Semiodesk.Trinity.StoreFactory.html": {
    "href": "api/Semiodesk.Trinity.StoreFactory.html",
    "title": "Trinity RDF | Class StoreFactory",
    "keywords": "Class StoreFactory This is the factory for object implementing the IStore interface. If you want to use your own store, you can load the assembly containing the provider with the LoadProvider method. Inheritance System.Object StoreFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class StoreFactory Methods | Improve this Doc View Source CreateMemoryStore() Creates a temporary in-memory store using the dotNetRDF provider. Declaration public static IStore CreateMemoryStore() Returns Type Description IStore | Improve this Doc View Source CreateSparqlEndpointStore(Uri) Create a store suitable for querying SPARQL protocol endpoints. Declaration public static IStore CreateSparqlEndpointStore(Uri url) Parameters Type Name Description System.Uri url URL of the SPARQL endpoint. Returns Type Description IStore | Improve this Doc View Source CreateStore(String) Creates a store from the given connection string. Declaration public static IStore CreateStore(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description IStore | Improve this Doc View Source CreateStoreFromConfiguration(String) Tries to read a connection string with the given name from the configuration. If no name was given, the first compatible connection string is used. Declaration public static IStore CreateStoreFromConfiguration(string name = null) Parameters Type Name Description System.String name Returns Type Description IStore | Improve this Doc View Source LoadProvider(StoreProvider) Loads a store provider. Declaration public static bool LoadProvider(StoreProvider provider) Parameters Type Name Description StoreProvider provider Returns Type Description System.Boolean | Improve this Doc View Source LoadProvider<T>() Loads a store provider Declaration public static bool LoadProvider<T>() where T : StoreProvider, new() Returns Type Description System.Boolean Type Parameters Name Description T A store provider type | Improve this Doc View Source TestConnectionString(String) Tests if the given connection string is valid. Declaration public static bool TestConnectionString(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description System.Boolean"
  },
  "api/Semiodesk.Trinity.Property.html": {
    "href": "api/Semiodesk.Trinity.Property.html",
    "title": "Trinity RDF | Class Property",
    "keywords": "Class Property Objects of this class represent RDF properties. Inheritance System.Object Resource Property Implements IResource System.ComponentModel.INotifyPropertyChanged System.IDisposable ITransactional Inherited Members Resource.Model Resource.Uri Resource.IsNew Resource.IsDisposed Resource.IsSynchronized Resource.IsReadOnly Resource.SetIsReadOnly(Boolean) Resource.Language Resource.SetModel(IModel) Resource.GetTypes() Resource.ToString() Resource.AddProperty(Property, IResource) Resource.AddProperty(Property, String) Resource.AddProperty(Property, String, CultureInfo) Resource.AddProperty(Property, String, String) Resource.AddProperty(Property, Int16) Resource.AddProperty(Property, Int32) Resource.AddProperty(Property, Int64) Resource.AddProperty(Property, UInt16) Resource.AddProperty(Property, UInt32) Resource.AddProperty(Property, UInt64) Resource.AddProperty(Property, Single) Resource.AddProperty(Property, Double) Resource.AddProperty(Property, Decimal) Resource.AddProperty(Property, Boolean) Resource.AddProperty(Property, DateTime) Resource.AddProperty(Property, Byte[]) Resource.AddProperty(Property, Uri) Resource.RemoveProperty(Property, IResource) Resource.RemoveProperty(Property, String) Resource.RemoveProperty(Property, String, CultureInfo) Resource.RemoveProperty(Property, String, String) Resource.RemoveProperty(Property, Int16) Resource.RemoveProperty(Property, Int32) Resource.RemoveProperty(Property, Int64) Resource.RemoveProperty(Property, UInt16) Resource.RemoveProperty(Property, UInt32) Resource.RemoveProperty(Property, UInt64) Resource.RemoveProperty(Property, Single) Resource.RemoveProperty(Property, Double) Resource.RemoveProperty(Property, Decimal) Resource.RemoveProperty(Property, Boolean) Resource.RemoveProperty(Property, DateTime) Resource.RemoveProperty(Property, Byte[]) Resource.RemoveProperty(Property, Uri) Resource.HasProperty(Property) Resource.HasProperty(Property, Object) Resource.HasProperty(Property, String, CultureInfo) Resource.HasProperty(Property, String, String) Resource.ListValues(Boolean) Resource.ListValues(Property) Resource.ListProperties() Resource.GetValue(Property) Resource.GetValue(Property, Object) Resource.Commit() Resource.Rollback() Resource.HasPropertyMapping(Property, Type) Resource.GetValue<T>(PropertyMapping<T>) Resource.SetValue<T>(PropertyMapping<T>, T) Resource.RegisterPropertyChanged(String) Resource.RaisePropertyChanged(String) Resource.ReloadLocalizedMappings() Resource.Dispose() Resource.PropertyChanged Resource.VerifyPropertyName(String) Resource.ThrowOnInvalidPropertyName System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class Property : Resource, IResource, INotifyPropertyChanged, IDisposable, ITransactional Constructors | Improve this Doc View Source Property(UriRef) Constructor taking a UriRef parameter Declaration public Property(UriRef uri) Parameters Type Name Description UriRef uri Uri of the property | Improve this Doc View Source Property(Uri) Constructor taking a Uri parameter Declaration public Property(Uri uri) Parameters Type Name Description System.Uri uri Uri of the property Methods | Improve this Doc View Source Equals(Object) Determines wheter the URIs of the compared objects are equal. Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other The object to be compared. Returns Type Description System.Boolean true if the URIs of the compared objects are equal, false otherwise. Overrides Resource.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code of the objects URI. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code string. Overrides Resource.GetHashCode() Implements IResource System.ComponentModel.INotifyPropertyChanged System.IDisposable ITransactional"
  },
  "api/Semiodesk.Trinity.MappingDiscovery.MappingClass.html": {
    "href": "api/Semiodesk.Trinity.MappingDiscovery.MappingClass.html",
    "title": "Trinity RDF | Class MappingDiscovery.MappingClass",
    "keywords": "Class MappingDiscovery.MappingClass A class containing information about a RDF class mapped to c#. Inheritance System.Object MappingDiscovery.MappingClass Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class MappingClass Constructors | Improve this Doc View Source MappingClass(Type, IEnumerable<Class>, IEnumerable<Class>) Constructor to create a new MappingClass Declaration public MappingClass(Type mappingClassType, IEnumerable<Class> rdfClasses, IEnumerable<Class> rdfBaseClasses) Parameters Type Name Description System.Type mappingClassType The c# type System.Collections.Generic.IEnumerable < Class > rdfClasses The mapped rdf classes. System.Collections.Generic.IEnumerable < Class > rdfBaseClasses The rdf base classes. Fields | Improve this Doc View Source BaseClassCount The number of classes that are not sub class of any other class. Declaration public readonly uint BaseClassCount Field Value Type Description System.UInt32 | Improve this Doc View Source MappingClassType The .NET type of the class. Declaration public readonly Type MappingClassType Field Value Type Description System.Type | Improve this Doc View Source RdfBaseClasses Inferenced RDF classes mapped to this class. Currently not used. Declaration public readonly Class[] RdfBaseClasses Field Value Type Description Class [] | Improve this Doc View Source RdfClasses RDF classes that are mapped to this class. Declaration public readonly Class[] RdfClasses Field Value Type Description Class []"
  },
  "api/Semiodesk.Trinity.ResourceLockedException.html": {
    "href": "api/Semiodesk.Trinity.ResourceLockedException.html",
    "title": "Trinity RDF | Class ResourceLockedException",
    "keywords": "Class ResourceLockedException Represents error when one or more resources you tried to access was locked. Inheritance System.Object System.Exception ResourceLockedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class ResourceLockedException : Exception, ISerializable Constructors | Improve this Doc View Source ResourceLockedException(Exception) Create a new instance of the ResourceLockedException class. Declaration public ResourceLockedException(Exception inner) Parameters Type Name Description System.Exception inner Inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Semiodesk.Trinity.Query.MethodCallExpressionExtensions.html": {
    "href": "api/Semiodesk.Trinity.Query.MethodCallExpressionExtensions.html",
    "title": "Trinity RDF | Class MethodCallExpressionExtensions",
    "keywords": "Class MethodCallExpressionExtensions Extensions for the MethodCall type. Inheritance System.Object MethodCallExpressionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Query Assembly : Semiodesk.Trinity.dll Syntax public static class MethodCallExpressionExtensions Methods | Improve this Doc View Source GetArgumentValue<T>(MethodCallExpression, Int32) Get the value of an argument at the specified location. Declaration public static T GetArgumentValue<T>(this MethodCallExpression expression, int index) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression A method call expression. System.Int32 index Argument location. Returns Type Description T Type Parameters Name Description T Value type. | Improve this Doc View Source GetArgumentValue<T>(MethodCallExpression, Int32, T) Get the value of an argument at the specified location. Declaration public static T GetArgumentValue<T>(this MethodCallExpression expression, int index, T defaultValue) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression A method call expression. System.Int32 index Argument location. T defaultValue Value to be returned if no argument is specified at the given location. Returns Type Description T Type Parameters Name Description T Value type. | Improve this Doc View Source HasArgumentValue(MethodCallExpression, Int32, Object) Indicates if the method call has an argument with a specified value at a specified location. Declaration public static bool HasArgumentValue(this MethodCallExpression expression, int index, object value) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression A method call expression. System.Int32 index Location of the argument. System.Object value Value of the argument. Returns Type Description System.Boolean true if the method call has an argument with the given value, false otherwise. | Improve this Doc View Source HasArgumentValueFromAlternatives(MethodCallExpression, Int32, Object[]) Indicates if the method call has an argument at a speficied loaction with one of the specified values. Declaration public static bool HasArgumentValueFromAlternatives(this MethodCallExpression expression, int index, params object[] values) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression expression A method call expression. System.Int32 index Location of the argument. System.Object [] values Values of the argument. Returns Type Description System.Boolean true if the method call has an argument with one of the given values, false otherwise."
  },
  "api/Semiodesk.Trinity.SparqlQueryType.html": {
    "href": "api/Semiodesk.Trinity.SparqlQueryType.html",
    "title": "Trinity RDF | Enum SparqlQueryType",
    "keywords": "Enum SparqlQueryType The SPARQL query forms as specified in http://www.w3.org/TR/rdf-sparql-query/#QueryForms Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public enum SparqlQueryType Fields Name Description Ask The ASK query form. Construct The CONSTRUCT query form. Describe The DESCRIBE query form. Select The SELECT query form. Unknown The SPARQL query type could not be determined."
  },
  "api/Semiodesk.Trinity.Serialization.JsonResourceSerializerSettings.html": {
    "href": "api/Semiodesk.Trinity.Serialization.JsonResourceSerializerSettings.html",
    "title": "Trinity RDF | Class JsonResourceSerializerSettings",
    "keywords": "Class JsonResourceSerializerSettings Settings for the serializing resources to and from JSON format. Inheritance System.Object Newtonsoft.Json.JsonSerializerSettings JsonResourceSerializerSettings Inherited Members Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling Newtonsoft.Json.JsonSerializerSettings.NullValueHandling Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling Newtonsoft.Json.JsonSerializerSettings.Converters Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling Newtonsoft.Json.JsonSerializerSettings.MetadataPropertyHandling Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormatHandling Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling Newtonsoft.Json.JsonSerializerSettings.ContractResolver Newtonsoft.Json.JsonSerializerSettings.EqualityComparer Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver Newtonsoft.Json.JsonSerializerSettings.ReferenceResolverProvider Newtonsoft.Json.JsonSerializerSettings.TraceWriter Newtonsoft.Json.JsonSerializerSettings.Binder Newtonsoft.Json.JsonSerializerSettings.SerializationBinder Newtonsoft.Json.JsonSerializerSettings.Error Newtonsoft.Json.JsonSerializerSettings.Context Newtonsoft.Json.JsonSerializerSettings.DateFormatString Newtonsoft.Json.JsonSerializerSettings.MaxDepth Newtonsoft.Json.JsonSerializerSettings.Formatting Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling Newtonsoft.Json.JsonSerializerSettings.DateParseHandling Newtonsoft.Json.JsonSerializerSettings.FloatFormatHandling Newtonsoft.Json.JsonSerializerSettings.FloatParseHandling Newtonsoft.Json.JsonSerializerSettings.StringEscapeHandling Newtonsoft.Json.JsonSerializerSettings.Culture Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Serialization Assembly : Semiodesk.Trinity.dll Syntax public class JsonResourceSerializerSettings : JsonSerializerSettings Constructors | Improve this Doc View Source JsonResourceSerializerSettings(IStore) Create a new instance of the JsonResourceSerializerSettings class. Declaration public JsonResourceSerializerSettings(IStore store) Parameters Type Name Description IStore store A triple store."
  },
  "api/Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.TripleSet.html": {
    "href": "api/Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.TripleSet.html",
    "title": "Trinity RDF | Class StardogUpdateSparqlConverter.TripleSet",
    "keywords": "Class StardogUpdateSparqlConverter.TripleSet An RDF triple. Inheritance System.Object StardogUpdateSparqlConverter.TripleSet Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity.Store.Stardog Assembly : Semiodesk.Trinity.dll Syntax public class TripleSet Properties | Improve this Doc View Source Object Get or set the object of the triple. Declaration public StardogUpdateSparqlConverter.ParsedNode Object { get; set; } Property Value Type Description StardogUpdateSparqlConverter.ParsedNode | Improve this Doc View Source Predicate Get or set the predicate of the triple. Declaration public StardogUpdateSparqlConverter.ParsedNode Predicate { get; set; } Property Value Type Description StardogUpdateSparqlConverter.ParsedNode | Improve this Doc View Source Subject Get or set the subject of the triple. Declaration public StardogUpdateSparqlConverter.ParsedNode Subject { get; set; } Property Value Type Description StardogUpdateSparqlConverter.ParsedNode Methods | Improve this Doc View Source ToString() Gets a SPARQL compliant string representation of the triple. Declaration public override string ToString() Returns Type Description System.String A string. Overrides System.Object.ToString()"
  },
  "api/Semiodesk.Trinity.Store.dotNetRDFStoreProvider.html": {
    "href": "api/Semiodesk.Trinity.Store.dotNetRDFStoreProvider.html",
    "title": "Trinity RDF | Class dotNetRDFStoreProvider",
    "keywords": "Class dotNetRDFStoreProvider A store provider for dotNetRDF triple store adapters. Inheritance System.Object StoreProvider dotNetRDFStoreProvider Inherited Members StoreProvider.Name StoreProvider.ConfigurationOptions System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Store Assembly : Semiodesk.Trinity.dll Syntax [Export(typeof(StoreProvider))] public class dotNetRDFStoreProvider : StoreProvider Constructors | Improve this Doc View Source dotNetRDFStoreProvider() Create a new instance of the dotNetRDFStoreProvider class. Declaration public dotNetRDFStoreProvider() Methods | Improve this Doc View Source GetStore(Dictionary<String, String>) Create a new triple store with the given settings. Declaration public override IStore GetStore(Dictionary<string, string> configurationDictionary) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.String > configurationDictionary Triple store setting variables. Returns Type Description IStore Overrides StoreProvider.GetStore(Dictionary<String, String>)"
  },
  "api/Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.ParsedNode.html": {
    "href": "api/Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.ParsedNode.html",
    "title": "Trinity RDF | Class StardogUpdateSparqlConverter.ParsedNode",
    "keywords": "Class StardogUpdateSparqlConverter.ParsedNode An RDF node. Inheritance System.Object StardogUpdateSparqlConverter.ParsedNode Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity.Store.Stardog Assembly : Semiodesk.Trinity.dll Syntax public class ParsedNode Properties | Improve this Doc View Source IsLiteralNode Indicates if the node is a literal. Declaration public bool IsLiteralNode { get; } Property Value Type Description System.Boolean | Improve this Doc View Source LiteralType Get or set the literal data type URI. Declaration public string LiteralType { get; set; } Property Value Type Description System.String | Improve this Doc View Source Value Get or set the literal node. Declaration public string Value { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ToString() Get a SPARQL compliant string representation of the node. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Semiodesk.Trinity.Query.html": {
    "href": "api/Semiodesk.Trinity.Query.html",
    "title": "Trinity RDF | Namespace Semiodesk.Trinity.Query",
    "keywords": "Namespace Semiodesk.Trinity.Query Classes ConstantExpressionExtensions Extensions for the ConstantExpression type. MemberInfoExtensions Extensions for the MemberInfo type. MethodCallExpressionExtensions Extensions for the MethodCall type. NodeFactoryExtensions Extension for the NodeFactory type."
  },
  "api/Semiodesk.Trinity.ISparqlQueryResult.html": {
    "href": "api/Semiodesk.Trinity.ISparqlQueryResult.html",
    "title": "Trinity RDF | Interface ISparqlQueryResult",
    "keywords": "Interface ISparqlQueryResult Exposes the results of a SPARQL query. Inherited Members System.IDisposable.Dispose() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public interface ISparqlQueryResult : IDisposable Methods | Improve this Doc View Source Count() Number of items in the result set. Declaration int Count() Returns Type Description System.Int32 | Improve this Doc View Source GetAnwser() Returns the bool value from ASK query forms. Declaration bool GetAnwser() Returns Type Description System.Boolean True on success, False otherwise. | Improve this Doc View Source GetBindings() Returns a set of bound values (bindings) returned from SELECT query forms. Declaration IEnumerable<BindingSet> GetBindings() Returns Type Description System.Collections.Generic.IEnumerable < BindingSet > An enumeration of bound solution variables (BindingSet). | Improve this Doc View Source GetResources() Returns marshalled Resource objects returned from DESCRIBE, CONSTRUCT or interpretable SELECT query forms. Declaration IEnumerable<Resource> GetResources() Returns Type Description System.Collections.Generic.IEnumerable < Resource > An enumeration of Resource objects. | Improve this Doc View Source GetResources(Int32, Int32) Enumerate the resource objects in the result. Declaration IEnumerable<Resource> GetResources(int offset = -1, int limit = -1) Parameters Type Name Description System.Int32 offset System.Int32 limit Returns Type Description System.Collections.Generic.IEnumerable < Resource > | Improve this Doc View Source GetResources<T>() Returns marshalled instances of the given Resource type which were returned from DESCRIBE, CONSTRUCT or interpretable SELECT query forms. Declaration IEnumerable<T> GetResources<T>() where T : Resource Returns Type Description System.Collections.Generic.IEnumerable <T> An enumeration of instances of the given type. Type Parameters Name Description T The Resource type object. | Improve this Doc View Source GetResources<T>(Int32, Int32) Enumerate the resource objects of a given type in the result. Declaration IEnumerable<T> GetResources<T>(int offset = -1, int limit = -1) where T : Resource Parameters Type Name Description System.Int32 offset System.Int32 limit Returns Type Description System.Collections.Generic.IEnumerable <T> Type Parameters Name Description T"
  },
  "api/Semiodesk.Trinity.IModel.html": {
    "href": "api/Semiodesk.Trinity.IModel.html",
    "title": "Trinity RDF | Interface IModel",
    "keywords": "Interface IModel An interface for classes which provide functionality to manage a set of resources. Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public interface IModel Properties | Improve this Doc View Source IgnoreUnmappedProperties All unampped properties will be ignored for update and thus deleted. This reduces the amount of data thats get sent to the database but also might remove important data. Setting this to true essentialy disables the triple API. Declaration bool IgnoreUnmappedProperties { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsEmpty True if the model is empty. Declaration [JsonIgnore] bool IsEmpty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Uri Uri of this model. Declaration UriRef Uri { get; } Property Value Type Description UriRef Methods | Improve this Doc View Source AddResource(IResource, ITransaction) Adds an existing resource to the model and its backing RDF store. The resulting resource supports the use of the Commit() method. Declaration IResource AddResource(IResource resource, ITransaction transaction = null) Parameters Type Name Description IResource resource The resource to be added to the model. ITransaction transaction Transaction associated with the action. Returns Type Description IResource The resource which is now connected to the current model. | Improve this Doc View Source AddResource<T>(T, ITransaction) Adds an existing resource to the model and its backing RDF store. The resulting resource supports the use of the Commit() method. Declaration T AddResource<T>(T resource, ITransaction transaction = null) where T : Resource Parameters Type Name Description T resource The resource to be added to the model. ITransaction transaction Transaction associated with this action. Returns Type Description T The resource which is now connected to the current model. Type Parameters Name Description T | Improve this Doc View Source AsQueryable<T>(Boolean) Returns a queryable object that can be used to build LINQ statements. Declaration IQueryable<T> AsQueryable<T>(bool inferenceEnabled = false) where T : Resource Parameters Type Name Description System.Boolean inferenceEnabled Returns Type Description System.Linq.IQueryable <T> Type Parameters Name Description T | Improve this Doc View Source BeginTransaction(IsolationLevel) Starts a transaction which can be used to group more queries together to be executed as one. Declaration ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel Isolation level used to lock the database. Returns Type Description ITransaction A handle to the transaction. | Improve this Doc View Source Clear() Removes all elements from the model. Declaration void Clear() | Improve this Doc View Source ContainsResource(IResource, ITransaction) Indicates wheter a given resource is part of the model. Declaration bool ContainsResource(IResource resource, ITransaction transaction = null) Parameters Type Name Description IResource resource Resource that should be looked up in the model. ITransaction transaction Transaction associated with this action. Returns Type Description System.Boolean True if the resource is part of the model, False if not. | Improve this Doc View Source ContainsResource(Uri, ITransaction) Indicates wheter a given resource is part of the model. Declaration bool ContainsResource(Uri uri, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction Transaction associated with this action. Returns Type Description System.Boolean True if the resource is part of the model, False if not. | Improve this Doc View Source CreateResource(String, ITransaction) Creates a new resource in the model and its backing RDF store. Declaration IResource CreateResource(string format = \"urn:uuid:{0}\", ITransaction transaction = null) Parameters Type Name Description System.String format The format string from which a globally unique identifier URI should be generated from. ITransaction transaction Transaction associated with this action. Returns Type Description IResource An instance of the given object type wrapping the newly created resource. Exceptions Type Condition System.ArgumentException Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source CreateResource(Type, String, ITransaction) Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type. Declaration object CreateResource(Type type, string format = \"urn:uuid:{0}\", ITransaction transaction = null) Parameters Type Name Description System.Type type The concrete type of the resource. This must be a subclass of resource. System.String format The format of the resulting uri. ITransaction transaction Transaction associated with this action. Returns Type Description System.Object An instance of the given object type wrapping the newly created resource. Exceptions Type Condition System.ArgumentException Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source CreateResource(Uri, ITransaction) Creates a new resource in the model and its backing RDF store. Declaration IResource CreateResource(Uri uri, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction Transaction associated with this action. Returns Type Description IResource The newly created resource. Exceptions Type Condition System.ArgumentException Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source CreateResource(Uri, Type, ITransaction) Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type. This method can be used to create a resource of a type which was asserted at runtime. Declaration object CreateResource(Uri uri, Type t, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. System.Type t Type of the resource object. Must be derived from Resource. ITransaction transaction Transaction associated with this action. Returns Type Description System.Object An instance of the given object type wrapping the newly created resource. Exceptions Type Condition System.Exception Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source CreateResource<T>(String, ITransaction) Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type. Declaration T CreateResource<T>(string format = \"urn:uuid:{0}\", ITransaction transaction = null) where T : Resource Parameters Type Name Description System.String format The format string from which a globally unique identifier URI should be generated from. ITransaction transaction Transaction associated with this action. Returns Type Description T An instance of the given object type wrapping the newly created resource. Type Parameters Name Description T Type of the resource object. Must be derived from Resource. Exceptions Type Condition System.ArgumentException Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source CreateResource<T>(Uri, ITransaction) Creates a new resource in the model and its backing RDF store. Provides a resource object of the given type. Declaration T CreateResource<T>(Uri uri, ITransaction transaction = null) where T : Resource Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction Transaction associated with this action. Returns Type Description T An instance of the given object type wrapping the newly created resource. Type Parameters Name Description T Type of the resource object. Must be derived from Resource. Exceptions Type Condition System.ArgumentException Throws ArgumentException if a resource with the given URI already exists in the model. | Improve this Doc View Source DeleteResource(IResource, ITransaction) Removes the given resource from the model and its backing RDF store. Note that there is no verification that the given resource and its stored represenation have identical properties. Declaration void DeleteResource(IResource resource, ITransaction transaction = null) Parameters Type Name Description IResource resource Resource that is to be removed from the model. ITransaction transaction Transaction associated with this action. | Improve this Doc View Source DeleteResource(Uri, ITransaction) Removes the given resource from the model and its backing RDF store. Note that there is no verification that the given resource and its stored represenation have identical properties. Declaration void DeleteResource(Uri uri, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction The transaction associated with this action. | Improve this Doc View Source ExecuteQuery(ISparqlQuery, Boolean, ITransaction) Execute a SPARQL query against the model. Declaration ISparqlQueryResult ExecuteQuery(ISparqlQuery query, bool inferenceEnabled = false, ITransaction transaction = null) Parameters Type Name Description ISparqlQuery query A SparqlQuery object. System.Boolean inferenceEnabled Modifier to enable inferencing. Default is false. ITransaction transaction Transaction associated with this action. Returns Type Description ISparqlQueryResult A SPARQL query result object. | Improve this Doc View Source ExecuteUpdate(SparqlUpdate, ITransaction) Execute a SparqlUpdate against the model. Declaration void ExecuteUpdate(SparqlUpdate update, ITransaction transaction = null) Parameters Type Name Description SparqlUpdate update A sparql update object. ITransaction transaction Transaction associated with this action. | Improve this Doc View Source GetBindings(ISparqlQuery, Boolean, ITransaction) Executes a SPARQL query and provides an enumeration of matching resources. Declaration IEnumerable<BindingSet> GetBindings(ISparqlQuery query, bool inferenceEnabled = false, ITransaction transaction = null) Parameters Type Name Description ISparqlQuery query A SparqlQuery object. System.Boolean inferenceEnabled Modifier to enable inferencing. Default is false. ITransaction transaction Transaction associated with the action. Returns Type Description System.Collections.Generic.IEnumerable < BindingSet > An enumeration of resources that match the given query. | Improve this Doc View Source GetResource(IResource, ITransaction) Retrieves a resource from the model. Declaration IResource GetResource(IResource resource, ITransaction transaction = null) Parameters Type Name Description IResource resource The instance of IResource to be retrieved. ITransaction transaction Transaction associated with this action. Returns Type Description IResource A resource with all asserted properties. | Improve this Doc View Source GetResource(Uri, ITransaction) Retrieves a resource from the model. Declaration IResource GetResource(Uri uri, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction Transaction associated with this action. Returns Type Description IResource A resource with all asserted properties. | Improve this Doc View Source GetResource(Uri, Type, ITransaction) Retrieves a resource from the model. Provides a resource object of the given type. Declaration object GetResource(Uri uri, Type type, ITransaction transaction = null) Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. System.Type type The type the resource should have. ITransaction transaction Transaction associated with this action. Returns Type Description System.Object A resource with all asserted properties. | Improve this Doc View Source GetResource<T>(IResource, ITransaction) Retrieves a resource from the model. Declaration T GetResource<T>(IResource resource, ITransaction transaction = null) where T : Resource Parameters Type Name Description IResource resource The instance of IResource to be retrieved. ITransaction transaction Transaction associated with this action. Returns Type Description T A resource with all asserted properties. Type Parameters Name Description T | Improve this Doc View Source GetResource<T>(Uri, ITransaction) Retrieves a resource from the model. Provides a resource object of the given type. Declaration T GetResource<T>(Uri uri, ITransaction transaction = null) where T : Resource Parameters Type Name Description System.Uri uri A Uniform Resource Identifier. ITransaction transaction Transaction associated with this action. Returns Type Description T A resource with all asserted properties. Type Parameters Name Description T | Improve this Doc View Source GetResources(ISparqlQuery, Boolean, ITransaction) Executes a SPARQL query and provides an enumeration of matching resources. Declaration IEnumerable<Resource> GetResources(ISparqlQuery query, bool inferenceEnabled = false, ITransaction transaction = null) Parameters Type Name Description ISparqlQuery query A SparqlQuery object. System.Boolean inferenceEnabled Modifier to enable inferencing. Default is false. ITransaction transaction Transaction associated with the action. Returns Type Description System.Collections.Generic.IEnumerable < Resource > An enumeration of resources that match the given query. | Improve this Doc View Source GetResources<T>(ISparqlQuery, Boolean, ITransaction) Executes a SPARQL query and provides an enumeration of matching resources. Declaration IEnumerable<T> GetResources<T>(ISparqlQuery query, bool inferenceEnabled = false, ITransaction transaction = null) where T : Resource Parameters Type Name Description ISparqlQuery query A SparqlQuery object. System.Boolean inferenceEnabled Modifier to enable inferencing. Default is false. ITransaction transaction Transaction associated with the action. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumeration of resources that match the given query. Type Parameters Name Description T | Improve this Doc View Source GetResources<T>(Boolean, ITransaction) Returns a enumeration of all resources that match the given type. Declaration IEnumerable<T> GetResources<T>(bool inferenceEnabled = false, ITransaction transaction = null) where T : Resource Parameters Type Name Description System.Boolean inferenceEnabled Modifier to enable inferencing. Default is false. ITransaction transaction Transaction associated with the action. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumeration of resources that match the given query. Type Parameters Name Description T | Improve this Doc View Source Read(Stream, RdfSerializationFormat, Boolean) Imports the contents of a graph serialized in the stream to this model. Declaration bool Read(Stream stream, RdfSerializationFormat format, bool update) Parameters Type Name Description System.IO.Stream stream The stream containing the serialization RdfSerializationFormat format Format of the serialization System.Boolean update True to update the model, false to replace the data. Returns Type Description System.Boolean True if the contents of the model were imported, False if not. | Improve this Doc View Source Read(Uri, RdfSerializationFormat, Boolean) Imports the contents of a model located by the given URL. The method supports importing files and other models stored in the local RDF store. Declaration bool Read(Uri url, RdfSerializationFormat format, bool update) Parameters Type Name Description System.Uri url A uniform resource locator. RdfSerializationFormat format The serialization format. System.Boolean update True to update the model, false to replace the data. Returns Type Description System.Boolean True if the contents of the model were imported, False if not. | Improve this Doc View Source UpdateResource(Resource, ITransaction) Updates a resource with it's current state in the model. Declaration void UpdateResource(Resource resource, ITransaction transaction = null) Parameters Type Name Description Resource resource ITransaction transaction | Improve this Doc View Source Write(Stream, RdfSerializationFormat, INamespaceMap) Serializes the contents of the model and provides a memory stream. Declaration void Write(Stream fs, RdfSerializationFormat format, INamespaceMap namespaces = null) Parameters Type Name Description System.IO.Stream fs The file stream to write to. RdfSerializationFormat format The serialization format. INamespaceMap namespaces Defines namespace to prefix mappings for the output."
  },
  "api/Semiodesk.Trinity.StringExtensions.html": {
    "href": "api/Semiodesk.Trinity.StringExtensions.html",
    "title": "Trinity RDF | Class StringExtensions",
    "keywords": "Class StringExtensions Collection of string extension related to Uris Inheritance System.Object StringExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public static class StringExtensions Methods | Improve this Doc View Source ToUriRef(String) Create a UriRef from this string. Declaration public static UriRef ToUriRef(this string uriString) Parameters Type Name Description System.String uriString Returns Type Description UriRef | Improve this Doc View Source ToUriRef(String, UriKind) Create a UriRef from this string with a given kind Declaration public static UriRef ToUriRef(this string uriString, UriKind uriKind) Parameters Type Name Description System.String uriString System.UriKind uriKind Returns Type Description UriRef"
  },
  "api/Semiodesk.Trinity.Store.Virtuoso.Graph.html": {
    "href": "api/Semiodesk.Trinity.Store.Virtuoso.Graph.html",
    "title": "Trinity RDF | Class Graph",
    "keywords": "Class Graph Inheritance System.Object Graph Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Store.Virtuoso Assembly : Semiodesk.Trinity.Virtuoso.dll Syntax public class Graph Properties | Improve this Doc View Source Uri Declaration public string Uri { get; set; } Property Value Type Description System.String"
  },
  "api/Semiodesk.Trinity.Serialization.html": {
    "href": "api/Semiodesk.Trinity.Serialization.html",
    "title": "Trinity RDF | Namespace Semiodesk.Trinity.Serialization",
    "keywords": "Namespace Semiodesk.Trinity.Serialization Classes JsonResourceConverter Converts resources to and from JSON format. JsonResourceSerializerSettings Settings for the serializing resources to and from JSON format."
  },
  "api/Semiodesk.Trinity.Store.Virtuoso.VirtuosoStoreProvider.html": {
    "href": "api/Semiodesk.Trinity.Store.Virtuoso.VirtuosoStoreProvider.html",
    "title": "Trinity RDF | Class VirtuosoStoreProvider",
    "keywords": "Class VirtuosoStoreProvider Inheritance System.Object StoreProvider VirtuosoStoreProvider Inherited Members StoreProvider.Name StoreProvider.ConfigurationOptions System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Store.Virtuoso Assembly : Semiodesk.Trinity.Virtuoso.dll Syntax [Export(typeof(StoreProvider))] public class VirtuosoStoreProvider : StoreProvider Constructors | Improve this Doc View Source VirtuosoStoreProvider() Declaration public VirtuosoStoreProvider() Methods | Improve this Doc View Source GetStore(Dictionary<String, String>) Declaration public override IStore GetStore(Dictionary<string, string> configurationDictionary) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.String > configurationDictionary Returns Type Description IStore Overrides StoreProvider.GetStore(Dictionary<String, String>)"
  },
  "api/Semiodesk.Trinity.Extensions.html": {
    "href": "api/Semiodesk.Trinity.Extensions.html",
    "title": "Trinity RDF | Namespace Semiodesk.Trinity.Extensions",
    "keywords": "Namespace Semiodesk.Trinity.Extensions Classes NamespaceMapperExtensions Extension methods for the dotNetRDF INamespaceMapper class."
  },
  "api/Semiodesk.Trinity.Collections.AsyncVirtualizingSparqlCollection-1.html": {
    "href": "api/Semiodesk.Trinity.Collections.AsyncVirtualizingSparqlCollection-1.html",
    "title": "Trinity RDF | Class AsyncVirtualizingSparqlCollection<T>",
    "keywords": "Class AsyncVirtualizingSparqlCollection<T> An generic asynchrous virtualizing collection for sparql queries. Inheritance System.Object VirtualizingCollection <T> AsyncVirtualizingCollection <T> AsyncVirtualizingSparqlCollection<T> Implements System.Collections.Generic.IList <T> System.Collections.Generic.ICollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable System.Collections.Specialized.INotifyCollectionChanged System.ComponentModel.INotifyPropertyChanged Inherited Members AsyncVirtualizingCollection<T>.SynchronizationContext AsyncVirtualizingCollection<T>.IsLoading AsyncVirtualizingCollection<T>.LoadCount() AsyncVirtualizingCollection<T>.LoadPage(Int32) AsyncVirtualizingCollection<T>.CollectionChanged AsyncVirtualizingCollection<T>.PropertyChanged VirtualizingCollection<T>._pageSize VirtualizingCollection<T>._pageTimeout VirtualizingCollection<T>.PageSize VirtualizingCollection<T>.PageTimeout VirtualizingCollection<T>.Count VirtualizingCollection<T>.SyncRoot VirtualizingCollection<T>.IsSynchronized VirtualizingCollection<T>.IsReadOnly VirtualizingCollection<T>.IsFixedSize VirtualizingCollection<T>.Item[Int32] VirtualizingCollection<T>.IList.Item[Int32] VirtualizingCollection<T>.GetEnumerator() VirtualizingCollection<T>.IEnumerable.GetEnumerator() VirtualizingCollection<T>.Add(T) VirtualizingCollection<T>.IList.Add(Object) VirtualizingCollection<T>.IList.Contains(Object) VirtualizingCollection<T>.Contains(T) VirtualizingCollection<T>.Clear() VirtualizingCollection<T>.IList.IndexOf(Object) VirtualizingCollection<T>.IndexOf(T) VirtualizingCollection<T>.Insert(Int32, T) VirtualizingCollection<T>.IList.Insert(Int32, Object) VirtualizingCollection<T>.RemoveAt(Int32) VirtualizingCollection<T>.IList.Remove(Object) VirtualizingCollection<T>.Remove(T) VirtualizingCollection<T>.CopyTo(T[], Int32) VirtualizingCollection<T>.ICollection.CopyTo(Array, Int32) VirtualizingCollection<T>.CleanUpPages() VirtualizingCollection<T>.PopulatePage(Int32, IList<T>) VirtualizingCollection<T>.RequestPage(Int32) VirtualizingCollection<T>.FetchPage(Int32) VirtualizingCollection<T>.FetchCount() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Collections Assembly : Semiodesk.Trinity.dll Syntax public class AsyncVirtualizingSparqlCollection<T> : AsyncVirtualizingCollection<T>, IList<T>, ICollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable, INotifyCollectionChanged, INotifyPropertyChanged where T : Resource Type Parameters Name Description T Constructors | Improve this Doc View Source AsyncVirtualizingSparqlCollection(IModel, SparqlQuery, Boolean) Initializes a new instance of the AsyncVirtualizingSparqlCollection<T> class. Declaration public AsyncVirtualizingSparqlCollection(IModel model, SparqlQuery query, bool inferenceEnabled = false) Parameters Type Name Description IModel model SparqlQuery query System.Boolean inferenceEnabled | Improve this Doc View Source AsyncVirtualizingSparqlCollection(IModel, SparqlQuery, Int32, Boolean) Initializes a new instance of the AsyncVirtualizingSparqlCollection<T> class. Declaration public AsyncVirtualizingSparqlCollection(IModel model, SparqlQuery query, int pageSize, bool inferenceEnabled = true) Parameters Type Name Description IModel model SparqlQuery query System.Int32 pageSize System.Boolean inferenceEnabled | Improve this Doc View Source AsyncVirtualizingSparqlCollection(IModel, SparqlQuery, Int32, Int32, Boolean) Initializes a new instance of the AsyncVirtualizingSparqlCollection<T> class. Declaration public AsyncVirtualizingSparqlCollection(IModel model, SparqlQuery query, int pageSize, int pageTimeout, bool inferenceEnabled = true) Parameters Type Name Description IModel model SparqlQuery query System.Int32 pageSize System.Int32 pageTimeout System.Boolean inferenceEnabled Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable System.Collections.Specialized.INotifyCollectionChanged System.ComponentModel.INotifyPropertyChanged"
  },
  "api/Semiodesk.Trinity.SparqlQueryItemsProvider-1.html": {
    "href": "api/Semiodesk.Trinity.SparqlQueryItemsProvider-1.html",
    "title": "Trinity RDF | Class SparqlQueryItemsProvider<T>",
    "keywords": "Class SparqlQueryItemsProvider<T> The item provider for sparql queries. Inheritance System.Object SparqlQueryItemsProvider<T> Implements IItemsProvider <T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax [Obsolete] public class SparqlQueryItemsProvider<T> : IItemsProvider<T> where T : Resource Type Parameters Name Description T Constructors | Improve this Doc View Source SparqlQueryItemsProvider(IModel, SparqlQuery, Boolean) Constructor for the SparqlQueryItemsProvider. Declaration public SparqlQueryItemsProvider(IModel model, SparqlQuery query, bool inferenceEnabled = true) Parameters Type Name Description IModel model The model on which the query should be executed. SparqlQuery query The query that should be executed. System.Boolean inferenceEnabled Modifier if inferncing should be enabled. Default is true Methods | Improve this Doc View Source Count() Number of elements in the result. Declaration public int Count() Returns Type Description System.Int32 | Improve this Doc View Source GetItems(Int32, Int32) Enumerator of the items. Should be narrowed with offset and limit. Declaration public IEnumerable<T> GetItems(int offset, int limit) Parameters Type Name Description System.Int32 offset Offset of the element where to start. System.Int32 limit Number of elements. Returns Type Description System.Collections.Generic.IEnumerable <T> Implements IItemsProvider<T>"
  },
  "api/Semiodesk.Trinity.QueryTypeNotSupportedException.html": {
    "href": "api/Semiodesk.Trinity.QueryTypeNotSupportedException.html",
    "title": "Trinity RDF | Class QueryTypeNotSupportedException",
    "keywords": "Class QueryTypeNotSupportedException This exception will be thrown when trying to access query result methods for unsupported SPARQL query forms (i.e. trying to get bindings from an ASK query). Inheritance System.Object System.Exception System.SystemException System.NotSupportedException QueryTypeNotSupportedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class QueryTypeNotSupportedException : NotSupportedException, ISerializable Constructors | Improve this Doc View Source QueryTypeNotSupportedException(SparqlQueryType) Create a new exception with an error string. Declaration public QueryTypeNotSupportedException(SparqlQueryType type) Parameters Type Name Description SparqlQueryType type SPARQL query type. Properties | Improve this Doc View Source QueryType Contains the offending query. Declaration public SparqlQueryType QueryType { get; } Property Value Type Description SparqlQueryType Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Semiodesk.Trinity.SparqlSerializer.html": {
    "href": "api/Semiodesk.Trinity.SparqlSerializer.html",
    "title": "Trinity RDF | Class SparqlSerializer",
    "keywords": "Class SparqlSerializer Provides functionality to perform serialization of native .NET types into SPARQL strings. Inheritance System.Object SparqlSerializer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class SparqlSerializer Methods | Improve this Doc View Source GenerateDatasetClause(IModel) Generate the dataset clause for a given model. Declaration public static string GenerateDatasetClause(IModel model) Parameters Type Name Description IModel model A model. Returns Type Description System.String | Improve this Doc View Source GenerateDatasetClause(IModelGroup) Generate a dataset clause for a model group. Declaration public static string GenerateDatasetClause(IModelGroup modelGroup) Parameters Type Name Description IModelGroup modelGroup A model group. Returns Type Description System.String | Improve this Doc View Source GenerateDatasetClause(IEnumerable<IModel>) Generate a dataset clause for an enumeration of models. Declaration public static string GenerateDatasetClause(IEnumerable<IModel> models) Parameters Type Name Description System.Collections.Generic.IEnumerable < IModel > models An enumeration of models. Returns Type Description System.String | Improve this Doc View Source SerializeCount(IModel, ISparqlQuery) Serialize a count query for the given SPARQL query. Declaration public static string SerializeCount(IModel model, ISparqlQuery query) Parameters Type Name Description IModel model The model to be queried. ISparqlQuery query The query which results should be counted. Returns Type Description System.String | Improve this Doc View Source SerializeDateTime(DateTime) Serializes a DateTime object. Declaration public static string SerializeDateTime(DateTime date) Parameters Type Name Description System.DateTime date A date time object. Returns Type Description System.String | Improve this Doc View Source SerializeFetchUris(IModel, ISparqlQuery, Int32, Int32) Generate a query which returns the URIs of all resources selected in a given query. Declaration public static string SerializeFetchUris(IModel model, ISparqlQuery query, int offset = -1, int limit = -1) Parameters Type Name Description IModel model The model to be queried. ISparqlQuery query The SPARQL query which provides resources. System.Int32 offset Offset solution modifier. System.Int32 limit Limit solution modifier. Returns Type Description System.String | Improve this Doc View Source SerializeOffsetLimit(IModel, ISparqlQuery, Int32, Int32) Add an offset or limit solution modifier to a given SPARQL query. Declaration public static string SerializeOffsetLimit(IModel model, ISparqlQuery query, int offset = -1, int limit = -1) Parameters Type Name Description IModel model The model to be queried. ISparqlQuery query The SPARQL query to be executed. System.Int32 offset Offset solution modifier. System.Int32 limit Limit solution modifier. Returns Type Description System.String | Improve this Doc View Source SerializeResource(IResource, Boolean) Serializes a resource. Declaration public static string SerializeResource(IResource resource, bool ignoreUnmappedProperties = false) Parameters Type Name Description IResource resource A resource. System.Boolean ignoreUnmappedProperties Ignores all unmapped properties for serialization. Returns Type Description System.String | Improve this Doc View Source SerializeString(String) Serializes a string and excapes special characters. Declaration public static string SerializeString(string str) Parameters Type Name Description System.String str A string literal. Returns Type Description System.String | Improve this Doc View Source SerializeTranslatedString(String, String) Serializes a string with a translation Declaration public static string SerializeTranslatedString(string str, string lang) Parameters Type Name Description System.String str A string literal. System.String lang A language tag. Returns Type Description System.String | Improve this Doc View Source SerializeTypedLiteral(Object, Uri) Serializes a typed literal. Declaration public static string SerializeTypedLiteral(object obj, Uri typeUri) Parameters Type Name Description System.Object obj A value. System.Uri typeUri A type URI. Returns Type Description System.String | Improve this Doc View Source SerializeUri(Uri) Serializes a URI. Declaration public static string SerializeUri(Uri uri) Parameters Type Name Description System.Uri uri A uniform resource identifier. Returns Type Description System.String | Improve this Doc View Source SerializeValue(Object) Serializes a value depdening on its type. Declaration public static string SerializeValue(object obj) Parameters Type Name Description System.Object obj An object. Returns Type Description System.String"
  },
  "api/Semiodesk.Trinity.SparqlQuery.html": {
    "href": "api/Semiodesk.Trinity.SparqlQuery.html",
    "title": "Trinity RDF | Class SparqlQuery",
    "keywords": "Class SparqlQuery A simple SPAQL Query class. This class aims to ease formulating SPARQL query strings by automatically setting PREFIX declarations from a given namespace manager. Inheritance System.Object SparqlQuery Implements ISparqlQuery Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class SparqlQuery : ISparqlQuery Constructors | Improve this Doc View Source SparqlQuery(String, Boolean) Creates a new SPARQL query. If enabled, the PREFIXES used in any of the query's graph patterns will be declared in the query header if they are found in the application config. Additionally, the query may be compacted in order to reduce processing overhead when being used repeatedly in loops. Declaration public SparqlQuery(string queryString, bool declarePrefixes = true) Parameters Type Name Description System.String queryString The SPARQL query string. System.Boolean declarePrefixes Set to true if the namespace prefixes used in the query should be declared. Properties | Improve this Doc View Source IsInferenceEnabled Indicates if the query result should be expanded using run-time inferencing. Declaration public bool IsInferenceEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Model Get or set the model used for this query. Declaration public IModel Model { get; set; } Property Value Type Description IModel | Improve this Doc View Source QueryType The query form as defined in http://www.w3.org/TR/rdf-sparql-query/#QueryForms Declaration public SparqlQueryType QueryType { get; protected set; } Property Value Type Description SparqlQueryType Methods | Improve this Doc View Source Bind(String, Object) Set the value for a query parameter which is preceeded by &apos;@'. Declaration public void Bind(string parameter, object value) Parameters Type Name Description System.String parameter The parameter name including the &apos;@'. System.Object value The paramter value. | Improve this Doc View Source GetDeclaredPrefixes() Returns all prefixes that were specified by the query. Declaration public IEnumerable<string> GetDeclaredPrefixes() Returns Type Description System.Collections.Generic.IEnumerable < System.String > | Improve this Doc View Source GetDefaultModels() Enumerates the graphs which are declared in FROM and FROM NAMED directives at the root level. Declaration public IEnumerable<string> GetDefaultModels() Returns Type Description System.Collections.Generic.IEnumerable < System.String > An enumeration of URI strings. | Improve this Doc View Source GetGlobalScopeVariableNames() Gets the names of all variables which are defined in the root graph pattern. Declaration public string[] GetGlobalScopeVariableNames() Returns Type Description System.String [] | Improve this Doc View Source GetRootGraphPattern() Gets the entire query as a string. Declaration public string GetRootGraphPattern() Returns Type Description System.String | Improve this Doc View Source GetRootOrderByClause() Indicates if the query contains an ORDER BY clause in any of its graph patterns. Declaration public string GetRootOrderByClause() Returns Type Description System.String true if the query contains an ORDER BY clause, false otherwise. | Improve this Doc View Source ProvidesStatements() Indicates if the query provides a description of one or more resources. Declaration public bool ProvidesStatements() Returns Type Description System.Boolean | Improve this Doc View Source ToString() Returns the query string with generated prefixes and subsituted parameters. Declaration public override string ToString() Returns Type Description System.String A valid SPARQL string. Overrides System.Object.ToString() Implements ISparqlQuery"
  },
  "api/Semiodesk.Trinity.XsdTypeMapper.ObjectSerializationDelegate.html": {
    "href": "api/Semiodesk.Trinity.XsdTypeMapper.ObjectSerializationDelegate.html",
    "title": "Trinity RDF | Delegate XsdTypeMapper.ObjectSerializationDelegate",
    "keywords": "Delegate XsdTypeMapper.ObjectSerializationDelegate The object serialization delegate Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public delegate string ObjectSerializationDelegate(object obj); Parameters Type Name Description System.Object obj Returns Type Description System.String"
  },
  "api/Semiodesk.Trinity.XsdTypeMapper.ObjectDeserializationDelegate.html": {
    "href": "api/Semiodesk.Trinity.XsdTypeMapper.ObjectDeserializationDelegate.html",
    "title": "Trinity RDF | Delegate XsdTypeMapper.ObjectDeserializationDelegate",
    "keywords": "Delegate XsdTypeMapper.ObjectDeserializationDelegate Deserialization delegate, format for deserialization functions. Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public delegate object ObjectDeserializationDelegate(string str); Parameters Type Name Description System.String str Returns Type Description System.Object"
  },
  "api/Semiodesk.Trinity.Class.html": {
    "href": "api/Semiodesk.Trinity.Class.html",
    "title": "Trinity RDF | Class Class",
    "keywords": "Class Class The class of resources that are RDF classes. Inheritance System.Object Resource Class Implements IResource System.ComponentModel.INotifyPropertyChanged System.IDisposable ITransactional Inherited Members Resource.Model Resource.Uri Resource.IsNew Resource.IsDisposed Resource.IsSynchronized Resource.IsReadOnly Resource.SetIsReadOnly(Boolean) Resource.Language Resource.SetModel(IModel) Resource.GetTypes() Resource.ToString() Resource.Equals(Object) Resource.GetHashCode() Resource.AddProperty(Property, IResource) Resource.AddProperty(Property, String) Resource.AddProperty(Property, String, CultureInfo) Resource.AddProperty(Property, String, String) Resource.AddProperty(Property, Int16) Resource.AddProperty(Property, Int32) Resource.AddProperty(Property, Int64) Resource.AddProperty(Property, UInt16) Resource.AddProperty(Property, UInt32) Resource.AddProperty(Property, UInt64) Resource.AddProperty(Property, Single) Resource.AddProperty(Property, Double) Resource.AddProperty(Property, Decimal) Resource.AddProperty(Property, Boolean) Resource.AddProperty(Property, DateTime) Resource.AddProperty(Property, Byte[]) Resource.AddProperty(Property, Uri) Resource.RemoveProperty(Property, IResource) Resource.RemoveProperty(Property, String) Resource.RemoveProperty(Property, String, CultureInfo) Resource.RemoveProperty(Property, String, String) Resource.RemoveProperty(Property, Int16) Resource.RemoveProperty(Property, Int32) Resource.RemoveProperty(Property, Int64) Resource.RemoveProperty(Property, UInt16) Resource.RemoveProperty(Property, UInt32) Resource.RemoveProperty(Property, UInt64) Resource.RemoveProperty(Property, Single) Resource.RemoveProperty(Property, Double) Resource.RemoveProperty(Property, Decimal) Resource.RemoveProperty(Property, Boolean) Resource.RemoveProperty(Property, DateTime) Resource.RemoveProperty(Property, Byte[]) Resource.RemoveProperty(Property, Uri) Resource.HasProperty(Property) Resource.HasProperty(Property, Object) Resource.HasProperty(Property, String, CultureInfo) Resource.HasProperty(Property, String, String) Resource.ListValues(Boolean) Resource.ListValues(Property) Resource.ListProperties() Resource.GetValue(Property) Resource.GetValue(Property, Object) Resource.Commit() Resource.Rollback() Resource.HasPropertyMapping(Property, Type) Resource.GetValue<T>(PropertyMapping<T>) Resource.SetValue<T>(PropertyMapping<T>, T) Resource.RegisterPropertyChanged(String) Resource.RaisePropertyChanged(String) Resource.ReloadLocalizedMappings() Resource.Dispose() Resource.PropertyChanged Resource.VerifyPropertyName(String) Resource.ThrowOnInvalidPropertyName System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class Class : Resource, IResource, INotifyPropertyChanged, IDisposable, ITransactional Constructors | Improve this Doc View Source Class(UriRef) Constrctor Declaration public Class(UriRef uri) Parameters Type Name Description UriRef uri | Improve this Doc View Source Class(String) Constrctor Declaration public Class(string uriString) Parameters Type Name Description System.String uriString | Improve this Doc View Source Class(Uri) Constructor Declaration public Class(Uri uri) Parameters Type Name Description System.Uri uri Implements IResource System.ComponentModel.INotifyPropertyChanged System.IDisposable ITransactional"
  },
  "api/Semiodesk.Trinity.Store.StardogStoreProvider.html": {
    "href": "api/Semiodesk.Trinity.Store.StardogStoreProvider.html",
    "title": "Trinity RDF | Class StardogStoreProvider",
    "keywords": "Class StardogStoreProvider This class allows the usage of the Stardog store. An IStore handle can be created by calling StoreFactory.CreateStore(\"provider=stardog;host=http://localhost:5820;uid=admin;pw=admin;sid=MyStore\"); Inheritance System.Object StoreProvider StardogStoreProvider Inherited Members StoreProvider.Name StoreProvider.ConfigurationOptions System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Store Assembly : Semiodesk.Trinity.dll Syntax [Export(typeof(StoreProvider))] public class StardogStoreProvider : StoreProvider Constructors | Improve this Doc View Source StardogStoreProvider() Create a new instance of the class StardogStoreProvider . Declaration public StardogStoreProvider() Methods | Improve this Doc View Source GetStore(Dictionary<String, String>) The GetStore method which will be called with the parsed configuration string. Declaration public override IStore GetStore(Dictionary<string, string> configurationDictionary) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.String > configurationDictionary Store specific configuation parameters. Returns Type Description IStore An instance of IStore . Overrides StoreProvider.GetStore(Dictionary<String, String>)"
  },
  "api/Semiodesk.Trinity.Store.Stardog.html": {
    "href": "api/Semiodesk.Trinity.Store.Stardog.html",
    "title": "Trinity RDF | Namespace Semiodesk.Trinity.Store.Stardog",
    "keywords": "Namespace Semiodesk.Trinity.Store.Stardog Classes StardogResultHandler RDF result handler for Stardog triple stores. StardogStore A store adapter for Stardog databases. StardogTransaction Wrapper to support Stardog transactions. At present, nested transaction is NOT supported as the transaction instance is a wrapper around the StardogConnector. StardogUpdateSparqlConverter SPARQL converter. Takes a typical Stardog \"update\" query and decomposes it so that it can be used with the StardogConnector's UpdateGraph method. Does require a valid Store instance to extract the Removals from the current connection. StardogUpdateSparqlConverter.ParsedNode An RDF node. StardogUpdateSparqlConverter.TripleSet An RDF triple. StringExtensions Extensions for the System.String type. Delegates ReadEndEventHandler Handle events when reading an RDF file has ended and all triples have been read. ReadStartEventHandler Handles events when reading an RDF file has started and no triples have been read. ReadTripleEventHandler Handle events when during reading of an RDF file a triple has been read."
  },
  "api/Semiodesk.Trinity.Store.SparqlEndpointStoreProvider.html": {
    "href": "api/Semiodesk.Trinity.Store.SparqlEndpointStoreProvider.html",
    "title": "Trinity RDF | Class SparqlEndpointStoreProvider",
    "keywords": "Class SparqlEndpointStoreProvider A store adapter for SPARQL protocol endpoints. Inheritance System.Object StoreProvider SparqlEndpointStoreProvider Inherited Members StoreProvider.Name StoreProvider.ConfigurationOptions System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Store Assembly : Semiodesk.Trinity.dll Syntax [Export(typeof(StoreProvider))] public class SparqlEndpointStoreProvider : StoreProvider Constructors | Improve this Doc View Source SparqlEndpointStoreProvider() Create a new instance of the SparqlEndpointStoreProvider . Declaration public SparqlEndpointStoreProvider() Methods | Improve this Doc View Source GetStore(Dictionary<String, String>) Create a new triple store with a specified configuration. Declaration public override IStore GetStore(Dictionary<string, string> configurationDictionary) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.String > configurationDictionary Triple store specific configuration variables. Returns Type Description IStore Overrides StoreProvider.GetStore(Dictionary<String, String>)"
  },
  "api/Semiodesk.Trinity.SparqlQueryVariableScope.html": {
    "href": "api/Semiodesk.Trinity.SparqlQueryVariableScope.html",
    "title": "Trinity RDF | Enum SparqlQueryVariableScope",
    "keywords": "Enum SparqlQueryVariableScope Graph pattern scope of variables defined in a SPARQL query. Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public enum SparqlQueryVariableScope Fields Name Description Default A locally accessible variable. Global A variable accessible in all levels of the query."
  },
  "api/Semiodesk.Trinity.Serialization.JsonResourceConverter.html": {
    "href": "api/Semiodesk.Trinity.Serialization.JsonResourceConverter.html",
    "title": "Trinity RDF | Class JsonResourceConverter",
    "keywords": "Class JsonResourceConverter Converts resources to and from JSON format. Inheritance System.Object Newtonsoft.Json.JsonConverter JsonResourceConverter Inherited Members Newtonsoft.Json.JsonConverter.CanRead System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Serialization Assembly : Semiodesk.Trinity.dll Syntax public class JsonResourceConverter : JsonConverter Constructors | Improve this Doc View Source JsonResourceConverter(IStore) Create a new instance of the JsonResourceConverter class. Declaration public JsonResourceConverter(IStore store) Parameters Type Name Description IStore store A triple store. Properties | Improve this Doc View Source CanWrite Indicates if the converter can write JSON. Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanWrite Methods | Improve this Doc View Source CanConvert(Type) Indicates if the given object can be converted. Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType An object. Returns Type Description System.Boolean true if the object is of type Resource , false otherwise. Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) | Improve this Doc View Source ReadJson(JsonReader, Type, Object, JsonSerializer) Convert a JSON string into an object. Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader A JSON reader. System.Type objectType Returned object type. System.Object existingValue The existing value of object being read. Newtonsoft.Json.JsonSerializer serializer The calling serializer. Returns Type Description System.Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) | Improve this Doc View Source WriteJson(JsonWriter, Object, JsonSerializer) Write the JSON representation of an object. Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer The JSON writer to be used. System.Object value The object value. Newtonsoft.Json.JsonSerializer serializer The JSON serializer to be used. Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "api/Semiodesk.Trinity.Extensions.NamespaceMapperExtensions.html": {
    "href": "api/Semiodesk.Trinity.Extensions.NamespaceMapperExtensions.html",
    "title": "Trinity RDF | Class NamespaceMapperExtensions",
    "keywords": "Class NamespaceMapperExtensions Extension methods for the dotNetRDF INamespaceMapper class. Inheritance System.Object NamespaceMapperExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Extensions Assembly : Semiodesk.Trinity.dll Syntax public static class NamespaceMapperExtensions Methods | Improve this Doc View Source ImportNamespaces(INamespaceMapper, INamespaceMap) Import namespaces from a namespace dictionary and replace the currently defined ones. Declaration public static void ImportNamespaces(this INamespaceMapper mapper, INamespaceMap namespaces) Parameters Type Name Description VDS.RDF.INamespaceMapper mapper A namespace mapper. INamespaceMap namespaces A namesapce map."
  },
  "api/Semiodesk.Trinity.Query.ConstantExpressionExtensions.html": {
    "href": "api/Semiodesk.Trinity.Query.ConstantExpressionExtensions.html",
    "title": "Trinity RDF | Class ConstantExpressionExtensions",
    "keywords": "Class ConstantExpressionExtensions Extensions for the ConstantExpression type. Inheritance System.Object ConstantExpressionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Query Assembly : Semiodesk.Trinity.dll Syntax public static class ConstantExpressionExtensions Methods | Improve this Doc View Source AsIriExpression(ConstantExpression) Convert the expression into a IriExpression. Declaration public static IriExpression AsIriExpression(this ConstantExpression constant) Parameters Type Name Description System.Linq.Expressions.ConstantExpression constant A constant expression. Returns Type Description VDS.RDF.Query.Builder.Expressions.IriExpression A IriExpression object. | Improve this Doc View Source AsLiteralExpression(ConstantExpression) Convert the expression into a LiteralExpression . Declaration public static LiteralExpression AsLiteralExpression(this ConstantExpression constant) Parameters Type Name Description System.Linq.Expressions.ConstantExpression constant A constant expression. Returns Type Description VDS.RDF.Query.Builder.Expressions.LiteralExpression A LiteralExpression object. | Improve this Doc View Source AsNode(ConstantExpression) Convert the expression into a node. Declaration public static INode AsNode(this ConstantExpression constant) Parameters Type Name Description System.Linq.Expressions.ConstantExpression constant A constant expression. Returns Type Description VDS.RDF.INode A Node object. | Improve this Doc View Source AsNumericExpression(ConstantExpression) Convert the expression into a numeric expression. Declaration public static NumericExpression AsNumericExpression(this ConstantExpression constant) Parameters Type Name Description System.Linq.Expressions.ConstantExpression constant A constant expression. Returns Type Description VDS.RDF.Query.Builder.Expressions.NumericExpression A NumericExpression object. | Improve this Doc View Source AsSparqlExpression(ConstantExpression) Convert the expression into a ConstantTerm . Declaration public static ISparqlExpression AsSparqlExpression(this ConstantExpression constant) Parameters Type Name Description System.Linq.Expressions.ConstantExpression constant A constant expression. Returns Type Description VDS.RDF.Query.Expressions.ISparqlExpression A ConstantTerm object. | Improve this Doc View Source IsNullOrFalse(ConstantExpression) Indicates if the expression can be evaluated to false . Declaration public static bool IsNullOrFalse(this ConstantExpression constant) Parameters Type Name Description System.Linq.Expressions.ConstantExpression constant A constant expression. Returns Type Description System.Boolean true if the value is either null or false , false otherwise."
  },
  "api/Semiodesk.Trinity.StoreBase.html": {
    "href": "api/Semiodesk.Trinity.StoreBase.html",
    "title": "Trinity RDF | Class StoreBase",
    "keywords": "Class StoreBase This class encapsulates the functionality of an abstract triple store. Cannot be used directly. Use StoreFactory to get a concret implementation. Inheritance System.Object StoreBase dotNetRDFStore StardogStore Implements IStore System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public abstract class StoreBase : IStore, IDisposable Properties | Improve this Doc View Source IsReady Indicates if the store is connected and awaiting queries. Declaration public virtual bool IsReady { get; protected set; } Property Value Type Description System.Boolean | Improve this Doc View Source Log Set this property to log the SPARQL queries which are executed on this store. For example, to log to the console, set this property to System.Console.Write(System.String). Declaration public Action<string> Log { get; set; } Property Value Type Description System.Action < System.String > Methods | Improve this Doc View Source BeginTransaction(IsolationLevel) Starts a transaction. The resulting transaction handle can be used to chain operations together. Declaration public abstract ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel Isolation level of the operations executed in the transaction. Returns Type Description ITransaction | Improve this Doc View Source ContainsModel(IModel) Query if the model exists in the store. OBSOLETE: This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty Declaration [Obsolete(\"This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty\")] public virtual bool ContainsModel(IModel model) Parameters Type Name Description IModel model Handle to the model which is to be queried. Returns Type Description System.Boolean | Improve this Doc View Source ContainsModel(Uri) Query if the model exists in the store. OBSOLETE: This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty Declaration [Obsolete(\"This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty\")] public abstract bool ContainsModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model which is to be queried. Returns Type Description System.Boolean | Improve this Doc View Source CreateModel(Uri) Adds a new model with the given uri to the storage. Declaration [Obsolete(\"It is not necessary to create models explicitly. Use GetModel() instead, if the model does not exist, it will be created implicitly.\")] public virtual IModel CreateModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model Returns Type Description IModel Handle to the model | Improve this Doc View Source CreateModelGroup(IModel[]) Creates a model group which allows for queries to be made on multiple models at once. Declaration public virtual IModelGroup CreateModelGroup(params IModel[] models) Parameters Type Name Description IModel [] models The list of model handles that should be grouped together. Returns Type Description IModelGroup | Improve this Doc View Source CreateModelGroup(Uri[]) Creates a model group which allows for queries to be made on multiple models at once. Declaration public virtual IModelGroup CreateModelGroup(params Uri[] models) Parameters Type Name Description System.Uri [] models The list of uris of the models that should be grouped together. Returns Type Description IModelGroup | Improve this Doc View Source Dispose() Disposes this store and it's underlying connection. This object cannot be reused after disposing. Declaration public abstract void Dispose() | Improve this Doc View Source ExecuteNonQuery(SparqlUpdate, ITransaction) Executes a query on the store which does not expect a result. Declaration public abstract void ExecuteNonQuery(SparqlUpdate update, ITransaction transaction = null) Parameters Type Name Description SparqlUpdate update SPARQL Update to be executed. ITransaction transaction An optional transaction. | Improve this Doc View Source ExecuteQuery(ISparqlQuery, ITransaction) Executes a SparqlQuery on the store. Declaration public abstract ISparqlQueryResult ExecuteQuery(ISparqlQuery query, ITransaction transaction = null) Parameters Type Name Description ISparqlQuery query SPARQL query to be executed. ITransaction transaction An optional transaction. Returns Type Description ISparqlQueryResult | Improve this Doc View Source GetModel(Uri) Gets a handle to a model in the store. Declaration public virtual IModel GetModel(Uri uri) Parameters Type Name Description System.Uri uri Model URI. Returns Type Description IModel | Improve this Doc View Source InitializeFromConfiguration(String, String) Initializes the store from the configuration. It uses either the provided file or attempts to load from \"ontologies.config\" located next to the executing assembly. For legacy reasons it also looks in the app.config file. If the ontology files are in a different path, this can be supplied as a base path.. Declaration public virtual void InitializeFromConfiguration(string configPath = null, string sourceDir = null) Parameters Type Name Description System.String configPath Path the configuration should be read from. System.String sourceDir Path where the ontologies should be searched for. | Improve this Doc View Source ListModels() Lists all models in the store. Declaration public abstract IEnumerable<IModel> ListModels() Returns Type Description System.Collections.Generic.IEnumerable < IModel > All handles to existing models. | Improve this Doc View Source LoadConfiguration(String) This method loads the configuration data from the given file. This can read the old App.config and new ontologies.config files. Declaration protected IConfiguration LoadConfiguration(string configPath = null) Parameters Type Name Description System.String configPath Path to either ontologies.config or App.config file. Returns Type Description Semiodesk.Trinity.Configuration.IConfiguration | Improve this Doc View Source LoadOntologies(IConfiguration, String) Loads Ontologies defined in the currently loaded config file into the store. Declaration protected void LoadOntologies(IConfiguration configuration, string sourceDir = null) Parameters Type Name Description Semiodesk.Trinity.Configuration.IConfiguration configuration Handle of the configuration. System.String sourceDir Searchpath for the ontologies. | Improve this Doc View Source LoadOntologySettings(String, String) Initializes the store from the configuration. It uses either the provided file or attempts to load from \"ontologies.config\" located next to the executing assembly. For legacy reasons it also looks in the app.config file. If the ontology files are in a different path, this can be supplied as a base path.. Declaration [Obsolete(\"This method will be removed in the future. Use InitializeFromConfiguration() instead.\")] public virtual void LoadOntologySettings(string configPath = null, string sourceDir = null) Parameters Type Name Description System.String configPath Load a specific configuration file. System.String sourceDir If given, this function tries to load the ontologies from this folder. | Improve this Doc View Source Read(Stream, Uri, RdfSerializationFormat, Boolean) Loads a serialized graph from the given stream into the current store. See allowed RdfSerializationFormat . Declaration public abstract Uri Read(Stream stream, Uri graphUri, RdfSerializationFormat format, bool update) Parameters Type Name Description System.IO.Stream stream Stream containing a serialized graph System.Uri graphUri Uri of the graph in this store RdfSerializationFormat format Allowed formats System.Boolean update Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing. Returns Type Description System.Uri | Improve this Doc View Source Read(Uri, Uri, RdfSerializationFormat, Boolean) Loads a serialized graph from the given location into the current store. See allowed RdfSerializationFormat . Declaration public abstract Uri Read(Uri modelUri, Uri url, RdfSerializationFormat format, bool update) Parameters Type Name Description System.Uri modelUri Uri of the graph in this store System.Uri url Location RdfSerializationFormat format Allowed formats System.Boolean update Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing. Returns Type Description System.Uri | Improve this Doc View Source RemoveModel(IModel) Removes model from the store. Declaration public virtual void RemoveModel(IModel model) Parameters Type Name Description IModel model Handle of the model which is to be removed. | Improve this Doc View Source RemoveModel(Uri) Removes model from the store. Declaration public abstract void RemoveModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model which is to be removed. | Improve this Doc View Source Write(Stream, Uri, RdfSerializationFormat, INamespaceMap) Writes a serialized graph to the given stream. See allowed RdfSerializationFormat . Declaration public abstract void Write(Stream fs, Uri graphUri, RdfSerializationFormat format, INamespaceMap namespaces = null) Parameters Type Name Description System.IO.Stream fs Stream to which the content should be written. System.Uri graphUri Uri fo the graph in this store RdfSerializationFormat format Allowed formats INamespaceMap namespaces Defines namespace to prefix mappings for the output. Implements IStore System.IDisposable"
  },
  "api/Semiodesk.Trinity.Store.Stardog.StardogResultHandler.html": {
    "href": "api/Semiodesk.Trinity.Store.Stardog.StardogResultHandler.html",
    "title": "Trinity RDF | Class StardogResultHandler",
    "keywords": "Class StardogResultHandler RDF result handler for Stardog triple stores. Inheritance System.Object VDS.RDF.Parsing.Handlers.BaseHandler VDS.RDF.Parsing.Handlers.BaseResultsHandler StardogResultHandler Implements VDS.RDF.ISparqlResultsHandler VDS.RDF.INodeFactory Inherited Members VDS.RDF.Parsing.Handlers.BaseResultsHandler.StartResults() VDS.RDF.Parsing.Handlers.BaseResultsHandler.StartResultsInternal() VDS.RDF.Parsing.Handlers.BaseResultsHandler.EndResults(System.Boolean) VDS.RDF.Parsing.Handlers.BaseResultsHandler.EndResultsInternal(System.Boolean) VDS.RDF.Parsing.Handlers.BaseResultsHandler.HandleBooleanResult(System.Boolean) VDS.RDF.Parsing.Handlers.BaseResultsHandler.HandleVariable(System.String) VDS.RDF.Parsing.Handlers.BaseResultsHandler.HandleResult(VDS.RDF.Query.SparqlResult) VDS.RDF.Parsing.Handlers.BaseHandler.CreateBlankNode() VDS.RDF.Parsing.Handlers.BaseHandler.CreateBlankNode(System.String) VDS.RDF.Parsing.Handlers.BaseHandler.CreateGraphLiteralNode() VDS.RDF.Parsing.Handlers.BaseHandler.CreateGraphLiteralNode(VDS.RDF.IGraph) VDS.RDF.Parsing.Handlers.BaseHandler.CreateLiteralNode(System.String, System.Uri) VDS.RDF.Parsing.Handlers.BaseHandler.CreateLiteralNode(System.String) VDS.RDF.Parsing.Handlers.BaseHandler.CreateLiteralNode(System.String, System.String) VDS.RDF.Parsing.Handlers.BaseHandler.CreateUriNode(System.Uri) VDS.RDF.Parsing.Handlers.BaseHandler.CreateVariableNode(System.String) VDS.RDF.Parsing.Handlers.BaseHandler.GetNextBlankNodeID() VDS.RDF.Parsing.Handlers.BaseHandler.NodeFactory System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Store.Stardog Assembly : Semiodesk.Trinity.dll Syntax public class StardogResultHandler : BaseResultsHandler, ISparqlResultsHandler, INodeFactory Constructors | Improve this Doc View Source StardogResultHandler() Create a new instance of the class StardogResultHandler . Declaration public StardogResultHandler() Properties | Improve this Doc View Source SparqlResultSet Binding result of SELECT queries. Declaration public SparqlResultSet SparqlResultSet { get; } Property Value Type Description VDS.RDF.Query.SparqlResultSet Methods | Improve this Doc View Source GetAnwser() Indicates the result value of ASK queries. Declaration public bool GetAnwser() Returns Type Description System.Boolean true or false | Improve this Doc View Source HandleBooleanResultInternal(Boolean) Must be overridden by derived handlers to appropriately handle boolean results. Declaration protected override void HandleBooleanResultInternal(bool result) Parameters Type Name Description System.Boolean result Boolean result value. Overrides VDS.RDF.Parsing.Handlers.BaseResultsHandler.HandleBooleanResultInternal(System.Boolean) | Improve this Doc View Source HandleResultInternal(SparqlResult) Must be overridden by derived handlers to appropriately handler SPARQL Results. Declaration protected override bool HandleResultInternal(SparqlResult result) Parameters Type Name Description VDS.RDF.Query.SparqlResult result SPARQL bindings. Returns Type Description System.Boolean Overrides VDS.RDF.Parsing.Handlers.BaseResultsHandler.HandleResultInternal(VDS.RDF.Query.SparqlResult) | Improve this Doc View Source HandleVariableInternal(String) Must be overridden by derived handlers to appropriately handle variable declarations. Declaration protected override bool HandleVariableInternal(string var) Parameters Type Name Description System.String var Variable name. Returns Type Description System.Boolean Overrides VDS.RDF.Parsing.Handlers.BaseResultsHandler.HandleVariableInternal(System.String) Implements VDS.RDF.ISparqlResultsHandler VDS.RDF.INodeFactory"
  },
  "api/Semiodesk.Trinity.SparqlUpdate.html": {
    "href": "api/Semiodesk.Trinity.SparqlUpdate.html",
    "title": "Trinity RDF | Class SparqlUpdate",
    "keywords": "Class SparqlUpdate A simple SPARQL Update class. This class aims to ease formulating SPARQL query strings by automatically setting PREFIX declarations from a given namespace manager. Inheritance System.Object SparqlUpdate Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class SparqlUpdate Constructors | Improve this Doc View Source SparqlUpdate(String) Create a new SPARQL Update with an optional namespace manager instance which can be used to declare PREFIX declarations for the namespace abbreviations used in the update string. Declaration public SparqlUpdate(string updateString) Parameters Type Name Description System.String updateString The u update string. Properties | Improve this Doc View Source Model Get or set the model used for this query. Declaration public IModel Model { get; set; } Property Value Type Description IModel | Improve this Doc View Source Resource Get or set the resource being updated. Declaration public IResource Resource { get; set; } Property Value Type Description IResource Methods | Improve this Doc View Source Bind(String, Object) Set the value for a query parameter which is preceeded by &apos;@'. Declaration public void Bind(string parameter, object value) Parameters Type Name Description System.String parameter The parameter name including the &apos;@'. System.Object value The paramter value. | Improve this Doc View Source ToString() Returns the query string with generated prefixes and subsituted parameters. Declaration public override string ToString() Returns Type Description System.String A valid SPARQL string. Overrides System.Object.ToString()"
  },
  "api/Semiodesk.Trinity.StoreProviderMissingException.html": {
    "href": "api/Semiodesk.Trinity.StoreProviderMissingException.html",
    "title": "Trinity RDF | Class StoreProviderMissingException",
    "keywords": "Class StoreProviderMissingException Represents errors when a suitable triple store adapter could not be found. Inheritance System.Object System.Exception StoreProviderMissingException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class StoreProviderMissingException : Exception, ISerializable Constructors | Improve this Doc View Source StoreProviderMissingException(String) Create a new instance of the StoreProviderMissingException class. Declaration public StoreProviderMissingException(string message) Parameters Type Name Description System.String message Error message. | Improve this Doc View Source StoreProviderMissingException(String, Exception) Create a new instance of the StoreProviderMissingException class. Declaration public StoreProviderMissingException(string message, Exception inner) Parameters Type Name Description System.String message Error message. System.Exception inner Inner exception. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Semiodesk.Trinity.StoreProvider.html": {
    "href": "api/Semiodesk.Trinity.StoreProvider.html",
    "title": "Trinity RDF | Class StoreProvider",
    "keywords": "Class StoreProvider This is the abstract store provider class. Implement it if you want to write your own store provider. Inheritance System.Object StoreProvider dotNetRDFStoreProvider SparqlEndpointStoreProvider StardogStoreProvider VirtuosoStoreProvider Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public abstract class StoreProvider Constructors | Improve this Doc View Source StoreProvider() The constructor of the store provider Declaration public StoreProvider() Properties | Improve this Doc View Source ConfigurationOptions All valid configuration options Declaration protected string[] ConfigurationOptions { get; set; } Property Value Type Description System.String [] | Improve this Doc View Source Name The name of the store. Declaration public string Name { get; protected set; } Property Value Type Description System.String Methods | Improve this Doc View Source GetStore(Dictionary<String, String>) The GetStore method which will be called with the parsed configuration string. Declaration public abstract IStore GetStore(Dictionary<string, string> configurationDictionary) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.String > configurationDictionary Store specific configuation parameters. Returns Type Description IStore An instance of IStore ."
  },
  "api/Semiodesk.Trinity.Store.Stardog.ReadEndEventHandler.html": {
    "href": "api/Semiodesk.Trinity.Store.Stardog.ReadEndEventHandler.html",
    "title": "Trinity RDF | Delegate ReadEndEventHandler",
    "keywords": "Delegate ReadEndEventHandler Handle events when reading an RDF file has ended and all triples have been read. Namespace : Semiodesk.Trinity.Store.Stardog Assembly : Semiodesk.Trinity.dll Syntax public delegate void ReadEndEventHandler(object sender, bool ok); Parameters Type Name Description System.Object sender The source of the event. System.Boolean ok Indicates if errors have occured while reading the file."
  },
  "api/Semiodesk.Trinity.Ontology.html": {
    "href": "api/Semiodesk.Trinity.Ontology.html",
    "title": "Trinity RDF | Class Ontology",
    "keywords": "Class Ontology Abstract class which marks subclasses as ontologies. Needed for automatic discovery. Inheritance System.Object Ontology Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public abstract class Ontology"
  },
  "api/Semiodesk.Trinity.ITransaction.html": {
    "href": "api/Semiodesk.Trinity.ITransaction.html",
    "title": "Trinity RDF | Interface ITransaction",
    "keywords": "Interface ITransaction Exposes a repository which supports transactions. Inherited Members System.IDisposable.Dispose() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public interface ITransaction : IDisposable Properties | Improve this Doc View Source IsolationLevel The isolation level of the transaction. Declaration IsolationLevel IsolationLevel { get; } Property Value Type Description System.Data.IsolationLevel Methods | Improve this Doc View Source Commit() Commit the transaction. Declaration void Commit() | Improve this Doc View Source Rollback() Rolls the transaction back. Declaration void Rollback() Events | Improve this Doc View Source OnFinishedTransaction Will be raised if transaction finishes. Declaration event FinishedTransactionEvent OnFinishedTransaction Event Type Type Description FinishedTransactionEvent"
  },
  "api/Semiodesk.Trinity.InvalidQueryException.html": {
    "href": "api/Semiodesk.Trinity.InvalidQueryException.html",
    "title": "Trinity RDF | Class InvalidQueryException",
    "keywords": "Class InvalidQueryException This exception will be thrown if the store rejects the query as invalid. Inheritance System.Object System.Exception System.SystemException System.ArgumentException InvalidQueryException Implements System.Runtime.Serialization.ISerializable Inherited Members System.ArgumentException.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.ArgumentException.Message System.ArgumentException.ParamName System.Exception.GetBaseException() System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class InvalidQueryException : ArgumentException, ISerializable Constructors | Improve this Doc View Source InvalidQueryException() Create a new exception without information. Declaration public InvalidQueryException() | Improve this Doc View Source InvalidQueryException(String) Create a new exception with an error string. Declaration public InvalidQueryException(string message) Parameters Type Name Description System.String message Details about the issue. | Improve this Doc View Source InvalidQueryException(String, Exception, String) Create a new exception with an error string and an inner exception. Declaration public InvalidQueryException(string message, Exception innerException, string query) Parameters Type Name Description System.String message Details about the issue. System.Exception innerException The exception that propmted the query failure. System.String query The offending query Properties | Improve this Doc View Source Query Contains the offending query Declaration public string Query { get; } Property Value Type Description System.String Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Semiodesk.Trinity.Collections.IItemsProvider-1.html": {
    "href": "api/Semiodesk.Trinity.Collections.IItemsProvider-1.html",
    "title": "Trinity RDF | Interface IItemsProvider<T>",
    "keywords": "Interface IItemsProvider<T> A generic items provider collection. Namespace : Semiodesk.Trinity.Collections Assembly : Semiodesk.Trinity.dll Syntax [Obsolete] public interface IItemsProvider<T> Type Parameters Name Description T Methods | Improve this Doc View Source Count() Number of element in the provider. Declaration int Count() Returns Type Description System.Int32 | Improve this Doc View Source GetItems(Int32, Int32) Enumerator of the items. Declaration IEnumerable<T> GetItems(int offset, int limit) Parameters Type Name Description System.Int32 offset System.Int32 limit Returns Type Description System.Collections.Generic.IEnumerable <T>"
  },
  "api/Semiodesk.Trinity.SparqlQueryPreprocessor.html": {
    "href": "api/Semiodesk.Trinity.SparqlQueryPreprocessor.html",
    "title": "Trinity RDF | Class SparqlQueryPreprocessor",
    "keywords": "Class SparqlQueryPreprocessor A preprocsesor for SPARQL queries. Inheritance System.Object VDS.RDF.Parsing.Tokens.BaseTokeniser VDS.RDF.Parsing.Tokens.SparqlTokeniser SparqlPreprocessor SparqlQueryPreprocessor Implements VDS.RDF.Parsing.Tokens.ITokeniser Inherited Members SparqlPreprocessor.Tokens SparqlPreprocessor.PreviousTokenType SparqlPreprocessor.DefaultGraphs SparqlPreprocessor.DeclaredPrefixes SparqlPreprocessor.UsedPrefixes SparqlPreprocessor.Parameters SparqlPreprocessor.ParameterValues SparqlPreprocessor.ParameterTypes SparqlPreprocessor.Process(Boolean) SparqlPreprocessor.AddDefaultGraph(Uri) SparqlPreprocessor.AddNamedGraph(Uri) SparqlPreprocessor.GetPrefixDeclarations() SparqlPreprocessor.Bind(String, Object) SparqlPreprocessor.Serialize(Int32) SparqlPreprocessor.ToString() VDS.RDF.Parsing.Tokens.BaseTokeniser.StartNewToken() VDS.RDF.Parsing.Tokens.BaseTokeniser.Peek() VDS.RDF.Parsing.Tokens.BaseTokeniser.Backtrack() VDS.RDF.Parsing.Tokens.BaseTokeniser.ConsumeCharacter() VDS.RDF.Parsing.Tokens.BaseTokeniser.ConsumeCharacter(System.Boolean) VDS.RDF.Parsing.Tokens.BaseTokeniser.ConsumeNewLine(System.Boolean) VDS.RDF.Parsing.Tokens.BaseTokeniser.ConsumeNewLine(System.Boolean, System.Boolean) VDS.RDF.Parsing.Tokens.BaseTokeniser.SkipCharacter() VDS.RDF.Parsing.Tokens.BaseTokeniser.DiscardWhiteSpace() VDS.RDF.Parsing.Tokens.BaseTokeniser.HandleEscapes(VDS.RDF.Parsing.Tokens.TokeniserEscapeMode) VDS.RDF.Parsing.Tokens.BaseTokeniser.HandleComplexLocalNameEscapes() VDS.RDF.Parsing.Tokens.BaseTokeniser.IsHexDigit(System.Char) VDS.RDF.Parsing.Tokens.BaseTokeniser.Error(System.String) VDS.RDF.Parsing.Tokens.BaseTokeniser.UnexpectedCharacter(System.Char, System.String) VDS.RDF.Parsing.Tokens.BaseTokeniser.UnexpectedEndOfInput(System.String) VDS.RDF.Parsing.Tokens.BaseTokeniser.UnexpectedNewLine(System.String) VDS.RDF.Parsing.Tokens.BaseTokeniser.UnexpectedToken(System.String, VDS.RDF.Parsing.Tokens.IToken) VDS.RDF.Parsing.Tokens.BaseTokeniser.Format VDS.RDF.Parsing.Tokens.BaseTokeniser.Value VDS.RDF.Parsing.Tokens.BaseTokeniser.Length VDS.RDF.Parsing.Tokens.BaseTokeniser.CurrentLine VDS.RDF.Parsing.Tokens.BaseTokeniser.CurrentPosition VDS.RDF.Parsing.Tokens.BaseTokeniser.StartLine VDS.RDF.Parsing.Tokens.BaseTokeniser.StartPosition VDS.RDF.Parsing.Tokens.BaseTokeniser.EndLine VDS.RDF.Parsing.Tokens.BaseTokeniser.EndPosition VDS.RDF.Parsing.Tokens.BaseTokeniser.LastTokenType VDS.RDF.Parsing.Tokens.BaseTokeniser.HasBacktracked System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class SparqlQueryPreprocessor : SparqlPreprocessor, ITokeniser Constructors | Improve this Doc View Source SparqlQueryPreprocessor(TextReader, SparqlQuerySyntax) Create a new instance of the SparqlQueryPreprocessor class. Declaration public SparqlQueryPreprocessor(TextReader input, SparqlQuerySyntax syntax) Parameters Type Name Description System.IO.TextReader input A text reader. VDS.RDF.Parsing.SparqlQuerySyntax syntax SPARQL syntax level. Fields | Improve this Doc View Source GlobalScopeVariables Variables visible in the query root scope. Declaration public readonly List<string> GlobalScopeVariables Field Value Type Description System.Collections.Generic.List < System.String > | Improve this Doc View Source InScopeVariables Variables only visible in local scope. Declaration public readonly List<string> InScopeVariables Field Value Type Description System.Collections.Generic.List < System.String > Properties | Improve this Doc View Source IsOrdered Indicates if the query has an ORDER BY solution modifier. Declaration public bool IsOrdered { get; protected set; } Property Value Type Description System.Boolean | Improve this Doc View Source QueryProvidesStatements Indicates if the query returns triples. Declaration public bool QueryProvidesStatements { get; protected set; } Property Value Type Description System.Boolean | Improve this Doc View Source QueryType The SPARQL query form, i.e. ASK, DESCRIBE, SELECT, CONSTRUCT. Declaration public SparqlQueryType QueryType { get; protected set; } Property Value Type Description SparqlQueryType Methods | Improve this Doc View Source GetNextToken() Gets the next token in the query and advance the reader position. Declaration public override IToken GetNextToken() Returns Type Description VDS.RDF.Parsing.Tokens.IToken A SPARQL token. Overrides SparqlPreprocessor.GetNextToken() | Improve this Doc View Source GetOrderByClause() Get the ORDER BY clause. Declaration public string GetOrderByClause() Returns Type Description System.String A string. | Improve this Doc View Source GetRootGraphPattern() Get the entire SPARQL query string. Declaration public string GetRootGraphPattern() Returns Type Description System.String A SPARQL query string. | Improve this Doc View Source SetLimit(Int32) Adds a LIMIT clause to the query in order to restrict it to put an upper bound on the number of solutions returned. Declaration public void SetLimit(int limit) Parameters Type Name Description System.Int32 limit The number of return values. | Improve this Doc View Source SetOffset(Int32) Adds an OFFSET clause to the query which causes the solutions generated to start after the specified number of solutions. Declaration public void SetOffset(int offset) Parameters Type Name Description System.Int32 offset The number of return values. Implements VDS.RDF.Parsing.Tokens.ITokeniser"
  },
  "api/Semiodesk.Trinity.ResourceNotFoundException.html": {
    "href": "api/Semiodesk.Trinity.ResourceNotFoundException.html",
    "title": "Trinity RDF | Class ResourceNotFoundException",
    "keywords": "Class ResourceNotFoundException Represents error when a resource could not be retrieved. Inheritance System.Object System.Exception System.SystemException System.ArgumentException ResourceNotFoundException Implements System.Runtime.Serialization.ISerializable Inherited Members System.ArgumentException.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.ArgumentException.Message System.ArgumentException.ParamName System.Exception.GetBaseException() System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class ResourceNotFoundException : ArgumentException, ISerializable Remarks The exception is derived from ArgumentException to ensure backwards compatibility. Constructors | Improve this Doc View Source ResourceNotFoundException(Uri) Create a new instance of the ResourceNotFoundException class. Declaration public ResourceNotFoundException(Uri uri) Parameters Type Name Description System.Uri uri URI of the resource. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Semiodesk.Trinity.html": {
    "href": "api/Semiodesk.Trinity.html",
    "title": "Trinity RDF | Namespace Semiodesk.Trinity",
    "keywords": "Namespace Semiodesk.Trinity Classes BindingSet A dictionary of named value bindings which represents a single query solution. Class The class of resources that are RDF classes. FileSystemInfoExtensions Extension to FileSystemInfo concerting UriRef handling InvalidQueryException This exception will be thrown if the store rejects the query as invalid. MappingDiscovery This static class is responsible for discovering mapped classes. Every assembly that defines mapping classes needs to register them with this service. MappingDiscovery.MappingClass A class containing information about a RDF class mapped to c#. Model A set of resources which represent a logical model for a given application domain. NamespaceMap A dictionary which maps prefixes to namespace URIs. NotifyPropertyChangedAttribute Marks the property as NotifyingProperty. Ontology Abstract class which marks subclasses as ontologies. Needed for automatic discovery. OntologyDiscovery This static class contains a mapping of all properties and classes to its uris for discovery of the proper object and its attributes. For future reference: look into PreApplicationStartMethodAttribute Class or ModuleInitializer Property Objects of this class represent RDF properties. PropertyMapping<T> This class does the heavy lifting of the property mapping mechanism. It stores the value and acts as intermediary for the resource. QueryTypeNotSupportedException This exception will be thrown when trying to access query result methods for unsupported SPARQL query forms (i.e. trying to get bindings from an ASK query). RdfClassAttribute Decorate a class with this attribute to mark it as mapping for an RDF class of the given type. RdfPropertyAttribute Decorate a property with this attribute to mark it as mapped RDF property with the given type. Resource This class repesents a RDF resource. ResourceLockedException Represents error when one or more resources you tried to access was locked. ResourceNotFoundException Represents error when a resource could not be retrieved. SparqlPreprocessor A simple SPARQL parser. SparqlQuery A simple SPAQL Query class. This class aims to ease formulating SPARQL query strings by automatically setting PREFIX declarations from a given namespace manager. SparqlQueryItemsProvider<T> The item provider for sparql queries. SparqlQueryPreprocessor A preprocsesor for SPARQL queries. SparqlSerializer Provides functionality to perform serialization of native .NET types into SPARQL strings. SparqlUpdate A simple SPARQL Update class. This class aims to ease formulating SPARQL query strings by automatically setting PREFIX declarations from a given namespace manager. StoreBase This class encapsulates the functionality of an abstract triple store. Cannot be used directly. Use StoreFactory to get a concret implementation. StoreFactory This is the factory for object implementing the IStore interface. If you want to use your own store, you can load the assembly containing the provider with the LoadProvider method. StoreProvider This is the abstract store provider class. Implement it if you want to write your own store provider. StoreProviderMissingException Represents errors when a suitable triple store adapter could not be found. StringExtensions Collection of string extension related to Uris TransactionEventArgs This class encapsulates arguments for transaction event. UriExtensions Extension of Uri class concering UriRef handling. UriRef This class extends the framework Uri class to also include fragments for equality testing. Urn A Uniform Resource Name (URN). VirtualizingSparqlCollection<T> A virtualizing collection for sparql query results XsdTypeMapper Provides functionality for the serialization and deserialization of .NET objects to XML Schema encoded strings. Interfaces IModel An interface for classes which provide functionality to manage a set of resources. IModelGroup The model group can be used to query over multiple models at once. INamespaceMap Exposes a dictionary which maps prefixes to namespace URIs. IResource This interface encapsulates the access to the methods of a RDF resource. ISparqlQuery Exposes a SPARQL query. ISparqlQueryResult Exposes the results of a SPARQL query. IStore The IStorage interface describes the methods an RDF Storage has to implement. ITransaction Exposes a repository which supports transactions. ITransactional Interface for a transactional object Enums RdfSerializationFormat Enumerates all supported RDF serialization formats. SparqlQueryType The SPARQL query forms as specified in http://www.w3.org/TR/rdf-sparql-query/#QueryForms SparqlQueryVariableScope Graph pattern scope of variables defined in a SPARQL query. Delegates FinishedTransactionEvent Handle for transaction events. XsdTypeMapper.ObjectDeserializationDelegate Deserialization delegate, format for deserialization functions. XsdTypeMapper.ObjectSerializationDelegate The object serialization delegate"
  },
  "api/Semiodesk.Trinity.Store.Virtuoso.html": {
    "href": "api/Semiodesk.Trinity.Store.Virtuoso.html",
    "title": "Trinity RDF | Namespace Semiodesk.Trinity.Store.Virtuoso",
    "keywords": "Namespace Semiodesk.Trinity.Store.Virtuoso Classes Graph Ruleset Rulesets VirtuosoManager A Manager for accessing the Native Virtuoso Quad Store VirtuosoStoreProvider VirtuosoTransaction Virtuoso transactions support For more information refer to : http://docs.openlinksw.com/virtuoso/coredbengine.html#Locking http://docs.openlinksw.com/virtuoso/ptune.html#TRANSACTION_ISOLATION_LEVELS Auto row commit = DEFINE sql:log-enable 2"
  },
  "api/Semiodesk.Trinity.RdfClassAttribute.html": {
    "href": "api/Semiodesk.Trinity.RdfClassAttribute.html",
    "title": "Trinity RDF | Class RdfClassAttribute",
    "keywords": "Class RdfClassAttribute Decorate a class with this attribute to mark it as mapping for an RDF class of the given type. Inheritance System.Object System.Attribute RdfClassAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public class RdfClassAttribute : Attribute Constructors | Improve this Doc View Source RdfClassAttribute(String) Constructor Declaration public RdfClassAttribute(string uriString) Parameters Type Name Description System.String uriString The uri of the RDF class for this mapping. Fields | Improve this Doc View Source MappedUri The Uri of the type. Declaration public readonly Uri MappedUri Field Value Type Description System.Uri"
  },
  "api/Semiodesk.Trinity.PropertyMapping-1.html": {
    "href": "api/Semiodesk.Trinity.PropertyMapping-1.html",
    "title": "Trinity RDF | Class PropertyMapping<T>",
    "keywords": "Class PropertyMapping<T> This class does the heavy lifting of the property mapping mechanism. It stores the value and acts as intermediary for the resource. Inheritance System.Object PropertyMapping<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class PropertyMapping<T> : IPropertyMapping Type Parameters Name Description T Constructors | Improve this Doc View Source PropertyMapping(String, Property, T, Boolean) Creates a new property mapping. Declaration public PropertyMapping(string propertyName, Property property, T defaultValue, bool languageInvariant = false) Parameters Type Name Description System.String propertyName Name of the property in the class Property property The RDF property that should be mapped T defaultValue The default value used to initialize this property System.Boolean languageInvariant This parameter is only valid if the type is string. Tells the mapping that the values should be treated as non-localized literals. | Improve this Doc View Source PropertyMapping(String, Property, Boolean) Creates a new property mapping. Declaration public PropertyMapping(string propertyName, Property property, bool languageInvariant = false) Parameters Type Name Description System.String propertyName Name of the property in the class Property property The RDF property that should be mapped System.Boolean languageInvariant This parameter is only valid if the type is string. Tells the mapping that the values should be treated as non-localized literals. | Improve this Doc View Source PropertyMapping(String, String, T, Boolean) Creates a new property mapping. Declaration public PropertyMapping(string propertyName, string propertyUri, T defaultValue, bool languageInvariant = false) Parameters Type Name Description System.String propertyName Name of the property in the class System.String propertyUri The URI of the RDF property that should be mapped T defaultValue The default value used to initialize this property System.Boolean languageInvariant This parameter is only valid if the type is string. Tells the mapping that the values should be treated as non-localized literals. | Improve this Doc View Source PropertyMapping(String, String, Boolean) Creates a new property mapping. Declaration public PropertyMapping(string propertyName, string propertyUri, bool languageInvariant = false) Parameters Type Name Description System.String propertyName Name of the property in the class System.String propertyUri The URI of the RDF property that should be mapped System.Boolean languageInvariant This parameter is only valid if the type is string. Tells the mapping that the values should be treated as non-localized literals. Properties | Improve this Doc View Source Language Language of the value. Declaration public string Language { get; set; } Property Value Type Description System.String | Improve this Doc View Source LanguageInvariant Only valid if type or generic type is string. The mapping ignores the language setting and is always non-localized. Declaration public bool LanguageInvariant { get; } Property Value Type Description System.Boolean | Improve this Doc View Source PropertyName Gets the name of the mapped .NET property. Declaration public string PropertyName { get; } Property Value Type Description System.String | Improve this Doc View Source PropertyUri Gets the URI of the mapped RDF property. Declaration public string PropertyUri { get; } Property Value Type Description System.String Methods | Improve this Doc View Source IsNumericType(Type) Indicates if the mapped value is a numeric type. Declaration public static bool IsNumericType(Type type) Parameters Type Name Description System.Type type A .NET type object. Returns Type Description System.Boolean true if the type is numeric, false otherwise. | Improve this Doc View Source IsPrecisionCompatible(Type, Type) Indicates if the precision of a numeric target type is greater or equal to a given source type. Declaration public bool IsPrecisionCompatible(Type source, Type target) Parameters Type Name Description System.Type source The source type. System.Type target The target type. Returns Type Description System.Boolean true if the types are precision compatible, false otherwise."
  },
  "api/Semiodesk.Trinity.TransactionEventArgs.html": {
    "href": "api/Semiodesk.Trinity.TransactionEventArgs.html",
    "title": "Trinity RDF | Class TransactionEventArgs",
    "keywords": "Class TransactionEventArgs This class encapsulates arguments for transaction event. Inheritance System.Object System.EventArgs TransactionEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class TransactionEventArgs : EventArgs Constructors | Improve this Doc View Source TransactionEventArgs(Boolean) Create a new transaction event object. Declaration public TransactionEventArgs(bool success) Parameters Type Name Description System.Boolean success Pass true to indicate that a commit happened. Pass false to indicate that a rollback happend. Fields | Improve this Doc View Source FinishedWithCommit Indicates that the transaction finished with a commit. Declaration public readonly bool FinishedWithCommit Field Value Type Description System.Boolean | Improve this Doc View Source FinishedWithRollback Indicates that the transaction finished with a rollback. Declaration public readonly bool FinishedWithRollback Field Value Type Description System.Boolean"
  },
  "api/Semiodesk.Trinity.Store.Virtuoso.Ruleset.html": {
    "href": "api/Semiodesk.Trinity.Store.Virtuoso.Ruleset.html",
    "title": "Trinity RDF | Class Ruleset",
    "keywords": "Class Ruleset Inheritance System.Object Ruleset Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Store.Virtuoso Assembly : Semiodesk.Trinity.Virtuoso.dll Syntax public class Ruleset Properties | Improve this Doc View Source GraphCollection Declaration public List<Graph> GraphCollection { get; set; } Property Value Type Description System.Collections.Generic.List < Graph > | Improve this Doc View Source Uri Declaration public string Uri { get; set; } Property Value Type Description System.String"
  },
  "api/Semiodesk.Trinity.Store.Stardog.ReadTripleEventHandler.html": {
    "href": "api/Semiodesk.Trinity.Store.Stardog.ReadTripleEventHandler.html",
    "title": "Trinity RDF | Delegate ReadTripleEventHandler",
    "keywords": "Delegate ReadTripleEventHandler Handle events when during reading of an RDF file a triple has been read. Namespace : Semiodesk.Trinity.Store.Stardog Assembly : Semiodesk.Trinity.dll Syntax public delegate void ReadTripleEventHandler(object sender, Triple triple); Parameters Type Name Description System.Object sender The source of the event. VDS.RDF.Triple triple The triple."
  },
  "tutorials/license.html": {
    "href": "tutorials/license.html",
    "title": "Trinity RDF | License",
    "keywords": "License The Trinity RDF library and tools found in this repository are licensed under the the MIT License (MIT). Copyright (c) 2015-2019 Semiodesk GmbH Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "tutorials/firstSteps.html": {
    "href": "tutorials/firstSteps.html",
    "title": "Trinity RDF | First Steps",
    "keywords": "First Steps Download Project The tutorial on this page should give you a first impression what you can do with Trinity RDF. If you follow the steps you will have a working application that already uses many features of the Semantic Web technology stack. This example is a simple console application that creates and queries some data. In following examples we will show you how to do more advanced things. Create Project To get started we will open Visual Studio and create a new console project. You can name it how you want, we called ours 'FirstSteps'. Now we can start to add the dependencies using NuGet. We add the Semiodesk.Trinity to the project. This package contains the tools that are neccessary to create the object mapping. To get started with the configuration we have prepared a package with a configuration file and some basic ontologies. Download the example project . It should look like this: In the next section we will unpack what is happening here. Manage Ontologies You just added your first ontologies to your project. They are the basically the schemas for graph databases. They contain the descriptions and semantics of classes and properties of a domain. This is why they are also called vocabularies. In contrast to relational databases you are not restricted to just one schema. The more ontologies you use, and the more you classify your data as instances of different ontologies the more precice the understanding of what your entities really are. If you want some background information on ontologies, read this Wikipedia article . In this example we're going to use the 'schema.org' ontology, or just schema in short. Have a look in the configuration file ontologies.config to see how it is set up. <ontology uri=\"http://schema.org/\" prefix=\"schema\"> <filesource location=\"ontologies/schema.ttl\"/> </ontology> With this, we tell the framework where the ontology resides, which base URI it has and the namespace prefix we want to use. A namespace prefix is just a shorthand for the bulky URI. When you build your project now, C# represenations of the ontologies will be created in the background. The code for this resides in ontologies/Ontologies.g.cs Important: This is also the place to set the namespace of the generated code. Create Mappings Now we want to create our domain model which contains just an abstract Thing and a Person class. using Semiodesk.Trinity; using System; namespace FirstSteps { [RdfClass(SCHEMA.Thing)] public class Thing : Resource { [RdfProperty(SCHEMA.name)] public string Name { get; set; } public Thing(Uri uri) : base(uri) { } } } The class needs to be derived from Resource . The mapping can simply be done by decorating the class and the properties with the RDF classes and properties from the schema ontology. Note: There is a distinction to be made between the generated 'schema' class and the upper case 'SCHEMA' class. The upper case version provides the string representaion of the ontology elements and can be used in decorators and attributes. The lower case variant provides Class and Property instances. Now, let's create the Person class. It is derived from Agent and has a property that models the relationship between a person and other people. using Semiodesk.Trinity; using System; using System.Collections.ObjectModel; using TrinityExample; namespace FirstSteps { [RdfClass(SCHEMA.Person)] public class Person : Thing { [RdfProperty(SCHEMA.givenName), NotifyPropertyChanged] public string FirstName { get; set; } [RdfProperty(SCHEMA.familyName), NotifyPropertyChanged] public string LastName { get; set; } [RdfProperty(SCHEMA.birthDate)] public DateTime BirthDate { get; set; } [RdfProperty(SCHEMA.knows)] public ObservableCollection<Person> KnownPersons { get; set; } public Person(Uri uri) : base(uri) {} } } Database Connection In this simple example we just rely on the built-in memory store. Building the Application Now we can start writing the application. First we need to let the framework know where to look for ontologies and our mapping. As it is the current assembly we can just call the convinence methods. Then we load a new memory store from the StoreFactory. OntologyDiscovery.AddAssembly(Assembly.GetExecutingAssembly()); MappingDiscovery.RegisterCallingAssembly(); IStore store = StoreFactory.CreateStore(\"provider=dotnetrdf\"); In the next step we get a handle to a model from the store. If no model exists, one is created automatically. The as name of the model we give a URI (Unique Resource Identifier). Note: A model in a graph database is a container for a set of resources that belong together logically. Context = store.GetModel(new Uri(\"http://example.com/model\")); Then we can start to add our mapped objects to the model. First we let the model create a new resource of type Person . In RDF resources are also identified by a URI. In contrast to URLs (Unique Resource Locator), URIs don't have to be resolvable. So you can pick any domain you like and structure the URI how you want to, you could just use a GUID. In this example we are going for the more readable solution (\" http://example.com/person/john \"). After adding values to the resource we need to commit it to the model by calling the Commit() method. Person john = Model.CreateResource<Person>(new Uri(\"http://example.com/person/john\")); john.FirstName = \"John\"; john.LastName = \"Doe\"; john.BirthDate = new DateTime(2010, 1, 1); john.Commit(); Person alice = Model.CreateResource<Person>(new Uri(\"http://example.com/person/alice\")); alice.FirstName = \"Alice\"; alice.LastName = \"Doe\"; alice.BirthDate = new DateTime(2000, 1, 1); alice.Commit(); To access the resources directly you can just call the Model.GetResource() method. You can provide a type here if you already know what the response will be like. If you omit the type, it will return the object also as the appropriate type, but have to cast it manually. Person alice2 = Model.GetResource<Person>(new Uri(\"http://example.com/person/alice\")); var john2 = Model.GetResource(new Uri(\"http://example.com/person/john\")) as Person; alice2.KnownPersons.Add(john2); alice2.Commit(); john2.Commit(); To query from the model you can use the AsQueryable() method to build a LINQ query. In the following example we query for all person with a last name that starts with a \"d\". var theDoeFamily = from person in Model.AsQueryable<Person>() where person.LastName.StartsWith(\"d\", StringComparison.InvariantCultureIgnoreCase) select person; foreach (var p in theDoeFamily) Console.WriteLine($\"Name: {p.FirstName} {p.LastName} Birthdate: {p.BirthDate}\"); Finally we are going to delete the entities from our model. This can be done by just calling Model.DeleteResource() with the appropriate URI. Model.DeleteResource(new Uri(\"http://example.com/person/alice\")); Model.DeleteResource(new Uri(\"http://example.com/person/john\")); Hopefully this small tutorial has given you a first overview of the possiblitiles that Trinity RDF offers."
  },
  "index.html": {
    "href": "index.html",
    "title": "Trinity RDF | Overview",
    "keywords": "Overview Trinity RDF is an application development platform for Microsoft .NET and Mono. It allows to easily build knowledge graph applications based on the RDF Metadata Standard issued by the World Wide Web Consortium (W3C) . Benefits Because Trinity RDF is based on open standard technology your data will be vendor-independent and easily exchangable in many years to come. Compared to many propriety graph databases, it has some considerable advantages: Standardized Graph Data Model The World Wide Web Consortium is an independent organization which standardizes internet technology such as HTML, CSS, SVG and many more. RDF technology has been continously developed and supported since 2001 and will be receiving support in the long term future. This means your data will be accessible and exchangable in decades. SPARQL Query Language Trinity RDF builds on the standardized SPARQL query language for graph databases. It is by design very similar to SQL and therefore very easy to learn. In contrast to the query languages of many property graph databases such as Neo4J , SPARQL is vendor independent and supported by a variety of database systems. Ontologies In RDF, ontologies provide powerful and flexible means for describing data structures such as classes, properties and primitive data types. Because ontologies are also stored in RDF, they are independent of the data they describe and can be updated during application runtime. Logical Inferencing When compared to traditional data modelling frameworks such as UML, ontologies allow you to define inheritance relationships not only for classes but also for properties. Thea also offer more advanced features modelling features such as stating the equality of objects and transitivity of properties. Many RDF databases can make use of logical reasoning during application runtime to answer queries about facts which have not been explicitly saved. This is very powerful in data integration and business intelligence scenarios. License The Trinity RDF library and tools are all released under the terms of the MIT license. This means you can use it for all kinds of projects, including commercial ones. The source code, documentation and issue tracking can be found at our Github project page . Technical Support If you encounter problems with Trinity RDF you can use our issue tracking system . If you are interested in priority support or need some technical expertise, you can contact Semiodesk . Please ask questions at Stackoverflow using the tag 'trinity-rdf'. Community & Contributing We'd like to encourage anyone who is interested in using or contributing to Trinity RDF to join our public mailing list for discussing anything related to this project. If you want to contribute source code, please make sure that you have all the rights for publication under a MIT license and create a pull request at our Github project site."
  },
  "tutorials/musicBrowser.html": {
    "href": "tutorials/musicBrowser.html",
    "title": "Trinity RDF | Music Browser",
    "keywords": "Music Browser IMPORTANT: This example was written for an older version of Semiodesk.Trinity and might not be compatible with the current release. Download Project This example shows you how to access the LinkedBrainz dataset with Trinity RDF. It uses Windows Forms as UI toolkit and utilises data binding. Linkedbrainz seems to be offline. Before you try this example check the SPARQL endpoint at linkedbrainz.org! Because of the way NuGet works, there is one step that needs to be completed for the example to work. Open the Nuget Package Manager console ('Tools' -> 'NuGet Package Manager' -> 'Package Manager Console') and enter the following: PM> Install-Package Semiodesk.Trinity Data Model This example leverages the following ontologies for creating the data model: Music Ontology (mo) Friend Of A Friend Vocabulary (foaf) Dublin Core Element Set Vocabulary (dces) For the object model we have created representations of artists and their created works: Note: As you can see, there is no connection between MusicArtist and Release . In this example we have solved the latency problem by wrapping this request in a separate query. SPARQL Endpoint To query the SPARQL endpoint we need to create a store with the appropriate parameters: IStore _store = StoreFactory.CreateSparqlEndpointStore(new Uri(\"http://linkedbrainz.org/sparql\")); IModel _model = _store.GetModel(new Uri(\"http://linkedbrainz.org/sparql\")); We use the SPARQL endpoint provider and configure the endpoint adress at http://linkedbrainz.org/sparql . Data Binding Though a bit rudimentary, data binding is possible in Windows Forms. We have created two ListBoxe s which are displaying the Title property of our objects. This can be done by setting the DisplayMember property of the ListBox . We create a VirtualizingResourceCollection and set it to the DataSource property of the ListBox . ResourceQuery artistEntity = new ResourceQuery(artist); // Artist is the concrete artist resource. ResourceQuery madeEntity = new ResourceQuery(mo.Release); artistEntity.Where(foaf.made, madeEntity); albumListBox.DataSource = new VirtualizingResourceCollection<Release>(Model, madeEntity); UI Responsiveness We have used the async / await pattern to keep the UI responsive during querying. As threading is not an issue when using a SPARQL endpoint there is no need to worry about connection pooling."
  },
  "tutorials/simpleUnity.html": {
    "href": "tutorials/simpleUnity.html",
    "title": "Trinity RDF | Unity 3D Game",
    "keywords": "Unity 3D Game IMPORTANT: This example was written for an older version of Semiodesk.Trinity and might not be compatible with the current release. Download Project We look at how, in general, the Trinity RDF platform can be used in combination with the Unity gaming engine . Required Knowledge Basic knowledge about Unity 3D Knowledge about C# and threading (BackgroundWorker) Technical Restrictions Object Mapping should be done in a separate project .NET 3.5 only (because of Unity) Goals This is a small 'game' which lists all books of a series on the press of a button. In this example it's the 'Lord of the Rings'. It follows the links of the subsequent works. We start out with a hard coded link to the book ' The Fellowship of the Ring '. The property dbo:subsequentWork links all three books of the trilogy together. Challenges DBpedia data does not always follow ontologies. We use for this example the Lord of the Rings trilogy. If we were to exchange that for Harry Potter books, it doesn't work because the links are not there. Setup Open the Nuget Package Manager console (Tools -> NuGet Package Manager -> Package Manager Console) and type the following: PM> Install-Package Semiodesk.Trinity Make a release build before you open the project in Unity. You can find the scene under Assets/Scenes/Simple.scene . Getting Started First you need to set up a new Unity 3D Project. Next to the Assets folder you can put a new folder for the ontology mapping project. I usually call it External. Here we create a new C# Library project (create it either in Visual Studio or XamarinStudio/Monodevelop). To make the results of this projects available our Unity projects, we need to set the build output (preferably of the release build) to ..\\..\\Assets\\Plugins\\ The Plugins directory is a special folder of Unity which treats the contained DLLs differently. DBpedia Ontology I have picked up the DBpdia ontology here . The next step is to extract it to the ontologies directory. Then we need the foaf ontology which I stored as foaf.rdf in the ontologies directory. Then we can add the following part to the OntologySettings section in the App.config <Ontology Uri=\"http://dbpedia.org/ontology/\" Prefix=\"dbo\"> <FileSource Location=\"Ontologies\\dbpedia_2015-04.nt\"/> </Ontology> <Ontology Uri=\"http://xmlns.com/foaf/0.1/\" Prefix=\"foaf\"> <FileSource Location=\"Ontologies\\foaf.rdf\" /> </Ontology> Object Mapping Now we add the C# classes for the object mappings we want. For example we want information about written works: [RdfClass(DBO.WrittenWork)] public class WrittenWork : Resource { #region Properties [RdfProperty(FOAF.name)] public string Name { get; set; } [RdfProperty(DBO.previousWork)] public List<WrittenWork> PreviousWork { get; set; } [RdfProperty(DBO.subsequentWork)] public List<WrittenWork> SubsequentWork { get; set; } [RdfProperty(DBO.author)] public Person Author { get; set; } #endregion #region Constructors public WrittenWork(Uri uri) : base(uri) {} public WrittenWork(Resource other) : base(other) {} public WrittenWork(string uriString) : base(uriString) {} #endregion } To get information about the author, we need a mapping for foaf:Person [RdfClass(FOAF.Person)] public class Person : Resource { #region Properties [RdfProperty(FOAF.name)] public string Name { get; set; } [RdfProperty(FOAF.surname)] public string Surname { get; set; } [RdfProperty(FOAF.givenname)] public string GivenName { get; set; } #endregion #region Constructors public Person(Uri uri) : base(uri) {} #endregion } For convenience we also create a 'DataStore' class which connects to the store on creation. #!csharp public class DataStore { #region Members private readonly Uri _endpoint = new Uri(\"http://live.dbpedia.org/sparql\"); private IStore _store; public IStore Store { get { return _store; } } #endregion #region Constructors public DataStore() { SemiodeskDiscovery.Discover(); _store = StoreFactory.CreateSparqlEndpointStore(_endpoint); } #endregion } Unity 3D Integration To get Trinity RDF running in Unity 3D, you first need to set the Api Compatibility Level to .NET 2.0 Subset . For this, open the Player settings in Unity3D (Edit -> Project Settings -> Player) and change the appropriate entry. When the DataModel project is now being built in Release mode, Unity should automatically pick it up and make it available for scripting. Adding Simple Interaction For this example we just need a Canvas with a Button and a Text control. Add them to your scene (GameObject -> UI -> Canvas / Button / Text). Now we add the querying mechanism by adding a script to the canvas. For this, just select the canvas and in the Inspector click Add Component -> New Script and make sure Csharp is selected. We call this script LoadData and add the following code to it. using UnityEngine; using UnityEngine.UI; using DataModel; using Semiodesk.Trinity; using System; using System.ComponentModel; using System.Collections; using System.Collections.Generic; public class LoadData : MonoBehaviour { #region Members private DataStore _store; private IModel _model; private BackgroundWorker _worker; private readonly Queue<Action> _actions = new Queue<Action>(); private WrittenWork _currentBook; private Uri _targetBook; public Text Target; #endregion #region Methods // Use this for initialization. void Start() { _targetBook = new Uri(\"http://dbpedia.org/resource/The_Fellowship_of_the_Ring\"); _store = new DataStore(); _model = _store.Model; _worker = new BackgroundWorker(); _worker.DoWork += (object sender, DoWorkEventArgs e) => ExecuteLoad(); } // Update is called once per frame. void Update() { lock (_actions) { if( _actions.Count > 0 ) { _actions.Dequeue().Invoke(); } } } public void StartLoading() { _worker.RunWorkerAsync(); } void ExecuteLoad() { if (_currentBook == null) { _currentBook = _model.GetResource<WrittenWork>(_targetBook, null); } else { var works = _currentBook.SubsequentWork; if( works.Count > 0 ) { _currentBook = works[0]; } } if (_currentBook != null) { lock(_actions) { _actions.Enqueue(new Action (() => Target.text = _currentBook.Name)); } } } void OnDestroy() { _worker.Dispose(); } #endregion } Now we just need to set the Button to call the appropriate function. Select it and set the On Click() handler like in the following image. Note: Even tough the setting of Target.text does not seem like a call to Unity method, it could be property that calls methods which are not allowed to be called from a thread. To be safe, relay as much as possible back to the UI thread. The Result You now have a small game that gives you the title of all three parts of The Lord of the Rings if you press the button repeatedly. Hurray! :-)"
  },
  "tutorials/webApp.html": {
    "href": "tutorials/webApp.html",
    "title": "Trinity RDF | Web Application",
    "keywords": "Web Application IMPORTANT: This example was written for an older version of Semiodesk.Trinity and might not be compatible with the current release. This example demonstrate how to use Semiodesk Trinity with ASP.NET MVC 5 and SignalR. The resulting application is able to generate random people and connections between them. The web page visualizes the dependencies in a graph with D3js . You can download the finished example from http://static.semiodesk.com/semiodesk.trinity/examples/0.9/WebApp.zip Because of the way NuGet works, you have to add the Semiodesk Trinity packages manually. Open the Nuget Package Manager console (\"Tools\" -> \"NuGet Package Manager\" -> \"Package Manager Console\") and install Semiodesk.Trinity.Modelling to the DataModel Project and Semiodesk.Trinity.Core to the EbApp. #! PM> Install-Package Semiodesk.Trinity.Modelling -ProjectName DataModel PM> Install-Package Semiodesk.Trinity.Core -ProjectName WebApp Also, you might need to configure the Virtuoso connection string in the Web.config file appropriately. Architecture and Object Model Overview To separate the data model from the application I have created a project that only contains the ontologies and the mapped classes. To keep things simple, I used the foaf ontology again. The mapping is nearly the same as the first steps example . As we want to serialize our objects to Json we need to change it a bit. Serializers often have limitation when it comes to possible dependency cycles. We need to handle the Knows relationship differently than before. To prevent loops we hide the Knows property from the serializer with JsonIgnore and create a new property that only exposes the URIs of the related objects. That way we can still access the objects, but only when we actively decide to do so. #!csharp [RdfProperty(FOAF.knows), JsonIgnore] public List<Person> Knows { get; set; } public IEnumerable<Uri> knows { get { return from x in Knows select x.Uri; } } To make the data available, I have implemented the repository pattern under Models/ResourceRepository.cs . This is used to create an additional abstraction layer between the database and it's peculiarities and the application logic. Displaying the Data The actual data is not rendered directly to html, but queried by the Javascript code that is deployed using ASP.NET. Creating a data backend is very easy using the aforementioned repository pattern and SignalR . This has the advantage that the data can be loaded asynchronously, while the web page is already displayed. The following diagram shows the full process how the data is acquired. The result is then transformed to create a visualisation with D3. Checklist Things to consider when you build a new project with ASP.NET and Trinity: Add SemiodeskDiscovery.Discover(); to Global.asax.cs -- Application_Start() Get ResourceRepository.cs and StoreFactory.cs from this example, they are generic and make your life easier. While creating the mapping classes, think about serialization issues. If you have trouble with SignalR, use $.connection.hub.logging = true;"
  },
  "tutorials/installation.html": {
    "href": "tutorials/installation.html",
    "title": "Trinity RDF | Installation",
    "keywords": "Installation On this page we describe the methods to install Trinity RDF. NuGet (Recommended) The easiest way to install the library is via NuGet . You can install the base library with the following command: > PM> Install-Package Semiodesk.Trinity GitHub package (Not recommended)## Download the latest stable package . This archive contains everything that is needed to create a knowledge graph application with Trinity RDF. Further Information For a complete introduction follow our First Steps tutorial."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Trinity RDF | Trinity RDF 1.0",
    "keywords": "Trinity RDF 1.0 We wanted to create a high-level RDF API for C# and Mono that makes working with RDF graph databases as simple as possible. With Trinity RDF developers can work with mapped objects and LINQ without seeing any RDF at all. ORM Benefits Shallow learning curve for developers. Best possible compatibility when integrating with existing platforms and tools. Supports enterprise application development patterns such as MVC / MVVM . Reduces potential for errors through object type constraints. Setup One of the core requirements for Trinity RDF was that ontology terms need to be easily accessible from native .NET languages. If you are using the Semiodesk.Trinity -NuGet package you are ready to go. Ontology Constants In a pre-compilation step, our framework generates a C# representation of your ontologies in a file named Ontologies/Ontologies.g.cs . Make sure to register the assembly containing the ontologies by calling one of the following methods. OntologyDiscovery.RegisterCallingAssembly(); // OR OntologyDiscovery.AddAssembly(Assembly.GetAssembly(typeof(rdf))); The generated file creates classes for each ontology configured in ontologies.config . These classes contain basic information about the ontology: // Default ontology namespace prefix (i.e. \"schema\"). string prefix = schema.Prefix; // Ontology namespace URI (i.e. \"http://schema.org\"). Uri ns = schema.Namespace; and all the RDF classes and properties defined in the ontology: // The 'Person' class with the URI \"http://schema.org/Person\" and all properties defined in the vocabulary. Class personClass = schema.Person; // String constant with the URI \"http://schema.org/Person\" string personUriString = SCHEMA.Person; These constants can then be used to create queries, add values to resources or create mappings. The convention is that lower case ontology classes (e.g. rdf) contains the Class and Property instances, upper case classes (e.g. RDF) contains the string representations neccessary for the attributes. The generation of the ontolgies can be configured in the ontologies.config file: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <configuration> <ontologies namespace=\"TrinityExample\" > <!--http://www.w3.org/1999/02/22-rdf-syntax-ns#--> <ontology uri=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" prefix=\"rdf\"> <filesource location=\"Ontologies/rdf.ttl\"/> </ontology> <!--http://www.w3.org/2000/01/rdf-schema#--> <ontology uri=\"http://www.w3.org/2000/01/rdf-schema#\" prefix=\"rdfs\"> <filesource location=\"Ontologies/rdfs.ttl\"/> </ontology> <ontology uri=\"http://schema.org/\" prefix=\"schema\"> <filesource location=\"Ontologies/schema.ttl\"/> </ontology> </ontologies> </configuration> Using the namespace attribute of the ontologies element you can control the CLR namespace in which the ontologies should be generated. The uri is the namespace of the ontology. The prefix is a short identifier for the ontology. It is used as the generated classes name. The filesource element defines the location of the file relative to the configuration. Note: If you are using NuGet, please be aware that if you change the framework (for example from .Net 4.5 to .Net 3.5 you need to retarget the packages. In most cases the easiest way to do that is by reinstalling them. Store Connection A RDF store, Triple Store or simply just 'store' represents the physical location of the data. This can either be in a database, a remote SPARQL endpoint or just a temporary store in memory. Establish connection to a store with IStore store = StoreFactory.CreateStore(\"CONNECTIONSTRING\"); If you don't want to keep the connection store in code, you can define a connection string in the App.config <configuration> ... <connectionStrings> <add name=\"virt0\" providerName=\"Semiodesk.Trinity\" connectionString=\"provider=virtuoso;host=localhost;port=1111;uid=dba;pw=dba;rule=urn:semiodesk/ruleset\" /> </connectionStrings> ... </configuration> Then you can create a store with the followling call IStore store = StoreFactory.CreateStoreFromConfiguration(\"virt0\"); The connection string has one fixed key, the so called 'provider'. All following keys depend on the selected provider. Currently three providers are supported, OpenLink Virtuoso, SparqlEndpoints and a memory store based on dotNetRdf . It is also possible to write and load a custom store module. Loading Configurations The ontologies specified in the configuration need to be loaded into the store to do things like inferencing. The method to do this is called Store.LoadOntologySettings() . Optionally it can be given the path of a configuration file. By default it will use the ontologies.config file of the current assembly. As second parameter you can define the base directory for the ontologies. IMPORTANT: Do not forget to set all ontologies to \"Copy always\" so they will be found at runtime. store.LoadOntologySettings(); // Or store.LoadOntologySettings(Path.Combine(Environment.CurrentDirectory, \"myConfig.cfg\")); // Or store.LoadOntologySettings(Path.Combine(Environment.CurrentDirectory, \"myConfig.cfg\"), \"C:\\\\ontologyDir\"); It is in the responsibility of the developer to decide whether the ontologies have changed and need to be redeployed. During development it usually is no issue to do that at the start of the software. OpenLink Virtuoso This store is an excellent choice as backend if you want to host your own Semantic-enabled application. You can download the open source version of it here . The following example creates a connection to an OpenLink Virtuoso: IStore store = StoreFactory.CreateStore(\"provider=virtuoso;host=localhost;port=1111;uid=dba;pw=dba\"); Possible options are: Parameter Description host Hostename of the running Virtuoso instance. port Port of the Virtuoso instance. This can be looked up in the server configuration. uid Username pw Password rule The default ruleset for inferencing. Rulesets can be defined in the ontologies.config like this: <?xml version=\"1.0\" encoding=\"utf-8\" ?> <configuration> ... <stores> <store type=\"virtuoso\"> <data> <rulesets> <ruleset uri=\"urn:semiodesk/test/ruleset\"> <graph uri=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"/> <graph uri=\"http://www.w3.org/2000/01/rdf-schema#\"/> <graph uri=\"http://www.w3.org/2002/07/owl#\"/> <graph uri=\"http://xmlns.com/foaf/0.1/\"/> </ruleset> </rulesets> </data> </store> </stores> </configuration> Sparql Endpoints SPARQL endpoints offer a platform independent way to access linked data sets. IStore store = StoreFactory.CreateSparqlEndpointStore(new Uri(\"http://live.dbpedia.org/sparql\")); Please keep in mind that SPARQL endpoints usually do not support model management or data updates. Memory Store This store is ideal as a playground or for temporarily manipulating data. If you just want to load a serialized collection of triples or an ontology, this offers the most flexiblity. Please remember that you have to save the content manually before shutting down the application or everything is lost. IStore store = StoreFactory.CreateMemoryStore(); Custom Store If you want to use the Trinity RDF with an unsupported store, you can write a custom store provider and register it. With the following function you can try to load the custom module: StoreFactory.LoadProvider(\"CustomStoreProvider.dll\") StoreFactory.LoadProvider(Assembly.GetExecutingAssembly()); The CustomStoreProvider.dll needs to contain a class derived from StoreProvider and an IStore implementation to work. Then you can create a connection to the store by calling the CreateStore function with the provider name you set. IStore store = StoreFactory.CreateStore(\"provider=YourProviderName\"); Model Management A model can be used to group contextual data together. They create a barrier between data that can be used to separate information and controll the access to the data. For example, it makes sense to create a model for each registered user on your system, if they are not allowed to share data. These barriers can be softend tough, as it is possible to query multiple models at once. The following code snippet outlines the basic methods for managing the models in a store: IStore store = StoreFactory.CreateStore(\"provider=virtuoso;host=localhost;port=1111;uid=dba;pw=dba\"); // We retrieve an existing or a new model. IModel model = store.GetModel(new Uri(\"http://localhost:8890/models/example\")); if(!model.IsEmpty) { model.Clear(); } // Load the contents from a file into the model. store.Read(modelUri, new Uri(\"file://example.n3\"), RdfSerializationFormat.N3); // Write the contents of a model into a file. FileStream stream = new FileStream(\"file://example.rdf\", FileMode.Create); store.Write(stream, modelUri, RdfSerializationFormat.RdfXml); Model Groups A model group allows to make queries over multiple models at once. This is great way to blend different information sources together. Due to technical restrictions it is not possible to modify the result resources tough. They are marked as read-only and a commit will result in an error. The following code piece demonstrates how model groups work: // Create model group of two models IModelGroup modelGroup = store.CreateModelGroup( new Uri(\"http://localhost/models/test1\"), new Uri(\"http://localhost/models/test2\") ); // We can use a model group like a regular model. bool contains = modelGroup.ContainsResource(new Uri(\"ex:something\")); // We can make queris on them. foreach(Contact c in modelGroup.AsQueryable<Contact>()) { Console.WriteLine(c.Name); } // Note: we cannot change resources directly! To do this we need to get // a writable represenation from the model it is stored in.. IModel test1 = store.GetModel(new Uri(\"http://localhost:8890/models/test1\")); if(test1.ContainsResource(new Uri(\"ex:thing\"))) { IResource thing = test1.GetResource(new Uri(\"ex:thing\")); thing.Name = \"Anything\"; thing.Commit(); } It is possible that a resource exist in multiple models at once, all of them with different bits of information. Therefore we have to decide which resource he want to change and thus, which part of the information we want to modify. Resource Management Creating new generic resources is done with the CreateResource function on the model: IResource john = model.CreateResource(new Uri(\"ex:john\")); Checking Properties To test if a property exists for a resource, you can call HasProperty either just with a property or with a property and value combination: // With generated ontologies john.HasProperty(schema.name); john.HasProperty(schema.name, \"John Doe\"); Iterating Properties To iterate over all properties, we can call the ListProperties method. To access the values, we have then have to call the ListValues method. There is also a GetValue method, which will only return the first value or null. foreach(Property property in john.ListProperties()) { foreach(var value in john.ListValues(property)) { Console.WriteLine($\"{john} {property} {value}\"); } } Alternatively you can call ListValues and iterate over all the triples: foreach(Tuple<Property, object> propertyValue in john.ListValues()) { Console.WriteLine($\"{john} {propertyValue.Item1} {propertyValue.Item2}\"); } Adding Properties To add a property we use the AddProperty method. Look at the Chapter Ontology Handling to see how to use properties from an ontology. // Without using generated ontologies. john.AddProperty(new Property(new Uri(\"http://schema.org/name\"), \"John Doe\"); // Using generated ontologies. john.AddProperty(rdf.type, schema.Person); john.AddProperty(schema.name, \"John Doe\"); Removing Properties To remove a property, simply call RemoveProperty with the property and the value you want to remove. // Without using generated ontologies. john.RemoveProperty(new Property(new Uri(\"http://schema.org/name\")), \"John Doe\"); // Using generated ontologies. john.RemoveProperty(schema.name, \"John Doe\"); Saving Changes To persist changes in the model, they need to be comitted. Every modification in the resource is temporary until the Commit method is called: john.Commit(); If the resource has been created by calling it's constructor and not using the IModel.CreateResource method, it can be added retroactivly by calling IModel.AddResource . The resulting copy of the resource supports the Commit method: IResource john2 = new Resource(\"ex:john2\"); john2 = model.AddResource(john); john2.Commit(); Object Mapping (ORM) Trinity RDF offers two ways for defining object mappings. The recommended way is by decorating classes and properties using attributes. The mapping is then implemented in a post-compiler step by our byte-code manipulator (cilg.exe). If for some reason you are not able do that, you can also implement the mapping manually. In the following we describe both ways. Note: Valid types for mapping are all value types, DateTime structs and classes derived from Resource. Additionally, all collections of these types which implement the IList interface. Initialization To regiser the mapped classes make sure to register the assembly containing them by calling the appropriate MappingDiscovery method. Use the following one if you have a small project and have everything in one assembly. MappingDiscovery.RegisterCallingAssembly(); If you have a dedicate data model assembly you can use the following call. You only have to provide one type, the rest will be loaded directly from the assembly. MappingDiscovery.RegisterAssembly(Assembly.GetAssembly(typeof(MyMappedType))); Using Decorators // The class needs to be decorated with the RDF class it is being mapped to. [RdfClass(SCHEMA.Person)] public class Person : Agent { [RdfProperty(SCHEMA.givenName)] public string FirstName{ get; set; } [RdfProperty(SCHEMA.familyName)] public string LastName { get; set; } // It is important that the constructor with a Uri parameter is implemented. public Person(Uri uri) : base(uri) {} } For the actual mapping of properties, you just need to decorate them with the RDF property you want them to be mapped. The getter and setter need to be empty. For decoration you need to use the upper case prefix of the ontologies (e.g. SCHEMA instead of schema ) because C# only accepts string constants in this context. Manual Mapping In environments where you cannot do post-build processing, it can be desirable to use the native mapping mechanism. The following example demonstrates how this works: public class Person : Agent { // This method defines the RDF classes the type is mapped to. public override IEnumerable<Class> GetTypes() { yield return schema.Person; } // Every mapped property needs a PropertyMapping object to store the value. // It also needs the name of the property as well as the mapped RDF property as a parameter. private PropertyMapping<string> _firstNameProperty = new PropertyMapping<string>(\"FirstName\", schema.givenName); // The getters and setters access the backing field. public string FirstName { get { return GetValue(_firstNameProperty); } set { SetValue(_firstNameProperty, value); } } private PropertyMapping<string> _lastNameProperty = new PropertyMapping<string>(\"LastName\", schema.familyName); public string LastName { get { return GetValue(_lastNameProperty); } set { SetValue(_lastNameProperty, value); } } // It is important that the constructor with a Uri parameter is implemented. public Person(Uri uri) : base(uri) {} } LINQ Trinity RDF has built-in support for the Language Integrated Query (LINQ) feature of the .NET platform. This works by translating native LINQ queries into SPARQL queries at runtime. Executing Queries The AsQueryable method of the Model class is the entry point for issuing LINQ queries. The generic type argument is the type you want to start your query with. This defaults to Resource . The method accepts one boolean parameter to enable or disable inferencing with your query: using Semiodesk.Trinity; using System.Linq; public class Program { public static void Main() { IStore store = StoreFactory.CreateMemoryStore(); IModel model = store.GetModel(new Uri(\"http://localhost/models/test1\")); // Execute query without inferencing. foreach(Person person in model.AsQueryable<Person>()) { Console.WriteLine(person.Name); } // Execute query with inferencing. foreach(Agent agent in model.AsQueryable<Agent>(true)) { // Includes all the person instances listed above.. Console.WriteLine(agent.Id); } } } Paged Data Access Loading a large amount of resources takes some time. In most cases it is not necessary to access them all at once but only one at a time. For these cases the data can be loaded in chunks. The following example shows how it is done: using Semiodesk.Trinity; using System.Linq; public class Program { public static void Main() { IStore store = StoreFactory.CreateMemoryStore(); IModel model = store.GetModel(new Uri(\"http://localhost/models/test1\")); // Load 100 items per page var persons = model.AsQueryable<Person>(); // Load 10 persons per page. var pageSize = 10; // Skip one page and load the next 10 persons. foreach (Person p in persons.Skip(1 * pageSize).Take(pageSize)) { Console.WriteLine(p.Name); } } }"
  },
  "tutorials/intro.html": {
    "href": "tutorials/intro.html",
    "title": "Trinity RDF | Tutorials",
    "keywords": "Tutorials First Steps Learn the basic steps to get started. Music Browser A sample desktop application that lets you browse through artists and their records. Unity 3D A small Unity 3D example to get you started. ASP.NET A basic web application with ASP.NET and SignalR."
  },
  "api/Semiodesk.Trinity.VirtualizingSparqlCollection-1.html": {
    "href": "api/Semiodesk.Trinity.VirtualizingSparqlCollection-1.html",
    "title": "Trinity RDF | Class VirtualizingSparqlCollection<T>",
    "keywords": "Class VirtualizingSparqlCollection<T> A virtualizing collection for sparql query results Inheritance System.Object VirtualizingCollection <T> VirtualizingSparqlCollection<T> Implements System.Collections.Generic.IList <T> System.Collections.Generic.ICollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable Inherited Members VirtualizingCollection<T>._pageSize VirtualizingCollection<T>._pageTimeout VirtualizingCollection<T>.PageSize VirtualizingCollection<T>.PageTimeout VirtualizingCollection<T>.Count VirtualizingCollection<T>.SyncRoot VirtualizingCollection<T>.IsSynchronized VirtualizingCollection<T>.IsReadOnly VirtualizingCollection<T>.IsFixedSize VirtualizingCollection<T>.Item[Int32] VirtualizingCollection<T>.IList.Item[Int32] VirtualizingCollection<T>.GetEnumerator() VirtualizingCollection<T>.IEnumerable.GetEnumerator() VirtualizingCollection<T>.Add(T) VirtualizingCollection<T>.IList.Add(Object) VirtualizingCollection<T>.IList.Contains(Object) VirtualizingCollection<T>.Contains(T) VirtualizingCollection<T>.Clear() VirtualizingCollection<T>.IList.IndexOf(Object) VirtualizingCollection<T>.IndexOf(T) VirtualizingCollection<T>.Insert(Int32, T) VirtualizingCollection<T>.IList.Insert(Int32, Object) VirtualizingCollection<T>.RemoveAt(Int32) VirtualizingCollection<T>.IList.Remove(Object) VirtualizingCollection<T>.Remove(T) VirtualizingCollection<T>.CopyTo(T[], Int32) VirtualizingCollection<T>.ICollection.CopyTo(Array, Int32) VirtualizingCollection<T>.CleanUpPages() VirtualizingCollection<T>.LoadPage(Int32) VirtualizingCollection<T>.PopulatePage(Int32, IList<T>) VirtualizingCollection<T>.RequestPage(Int32) VirtualizingCollection<T>.LoadCount() VirtualizingCollection<T>.FetchPage(Int32) VirtualizingCollection<T>.FetchCount() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class VirtualizingSparqlCollection<T> : VirtualizingCollection<T>, IList<T>, ICollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable where T : Resource Type Parameters Name Description T Constructors | Improve this Doc View Source VirtualizingSparqlCollection(IModel, SparqlQuery, Boolean) Initializes a new instance of the VirtualizingSparqlCollection<T> class. Declaration public VirtualizingSparqlCollection(IModel model, SparqlQuery query, bool inferenceEnabled = false) Parameters Type Name Description IModel model SparqlQuery query System.Boolean inferenceEnabled | Improve this Doc View Source VirtualizingSparqlCollection(IModel, SparqlQuery, Int32, Boolean) Initializes a new instance of the VirtualizingSparqlCollection<T> class. Declaration public VirtualizingSparqlCollection(IModel model, SparqlQuery query, int pageSize, bool inferenceEnabled = true) Parameters Type Name Description IModel model The model to query. SparqlQuery query The query. System.Int32 pageSize Size of the page. System.Boolean inferenceEnabled Using inferencing | Improve this Doc View Source VirtualizingSparqlCollection(IModel, SparqlQuery, Int32, Int32, Boolean) Initializes a new instance of the VirtualizingSparqlCollection<T> class. Declaration public VirtualizingSparqlCollection(IModel model, SparqlQuery query, int pageSize, int pageTimeout, bool inferenceEnabled = true) Parameters Type Name Description IModel model SparqlQuery query System.Int32 pageSize System.Int32 pageTimeout System.Boolean inferenceEnabled Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/Semiodesk.Trinity.Urn.html": {
    "href": "api/Semiodesk.Trinity.Urn.html",
    "title": "Trinity RDF | Class Urn",
    "keywords": "Class Urn A Uniform Resource Name (URN). Inheritance System.Object System.Uri UriRef Urn Implements System.Runtime.Serialization.ISerializable Inherited Members UriRef.Equals(Object) UriRef.GetHashCode() UriRef.GetGuid(String) System.Uri.SchemeDelimiter System.Uri.UriSchemeFile System.Uri.UriSchemeFtp System.Uri.UriSchemeGopher System.Uri.UriSchemeHttp System.Uri.UriSchemeHttps System.Uri.UriSchemeMailto System.Uri.UriSchemeNetPipe System.Uri.UriSchemeNetTcp System.Uri.UriSchemeNews System.Uri.UriSchemeNntp System.Uri.Canonicalize() System.Uri.CheckHostName(System.String) System.Uri.CheckSchemeName(System.String) System.Uri.CheckSecurity() System.Uri.Compare(System.Uri, System.Uri, System.UriComponents, System.UriFormat, System.StringComparison) System.Uri.Escape() System.Uri.EscapeDataString(System.String) System.Uri.EscapeString(System.String) System.Uri.EscapeUriString(System.String) System.Uri.FromHex(System.Char) System.Uri.GetComponents(System.UriComponents, System.UriFormat) System.Uri.GetLeftPart(System.UriPartial) System.Uri.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Uri.HexEscape(System.Char) System.Uri.HexUnescape(System.String, System.Int32) System.Uri.IsBadFileSystemCharacter(System.Char) System.Uri.IsBaseOf(System.Uri) System.Uri.IsExcludedCharacter(System.Char) System.Uri.IsHexDigit(System.Char) System.Uri.IsHexEncoding(System.String, System.Int32) System.Uri.IsReservedCharacter(System.Char) System.Uri.IsWellFormedOriginalString() System.Uri.IsWellFormedUriString(System.String, System.UriKind) System.Uri.MakeRelative(System.Uri) System.Uri.MakeRelativeUri(System.Uri) System.Uri.Parse() System.Uri.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Uri.ToString() System.Uri.TryCreate(System.String, System.UriKind, System.Uri) System.Uri.TryCreate(System.Uri, System.String, System.Uri) System.Uri.TryCreate(System.Uri, System.Uri, System.Uri) System.Uri.Unescape(System.String) System.Uri.UnescapeDataString(System.String) System.Uri.AbsolutePath System.Uri.AbsoluteUri System.Uri.Authority System.Uri.DnsSafeHost System.Uri.Fragment System.Uri.Host System.Uri.HostNameType System.Uri.IdnHost System.Uri.IsAbsoluteUri System.Uri.IsDefaultPort System.Uri.IsFile System.Uri.IsLoopback System.Uri.IsUnc System.Uri.LocalPath System.Uri.OriginalString System.Uri.PathAndQuery System.Uri.Port System.Uri.Query System.Uri.Scheme System.Uri.Segments System.Uri.UserEscaped System.Uri.UserInfo System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class Urn : UriRef, ISerializable Constructors | Improve this Doc View Source Urn(String) Create a new instance of a URN from an identifier. Declaration public Urn(string nid) Parameters Type Name Description System.String nid Identifier associated with a URN namespace. Implements System.Runtime.Serialization.ISerializable Extension Methods UriExtensions.ToUriRef(Uri)"
  },
  "api/Semiodesk.Trinity.Store.Virtuoso.VirtuosoManager.html": {
    "href": "api/Semiodesk.Trinity.Store.Virtuoso.VirtuosoManager.html",
    "title": "Trinity RDF | Class VirtuosoManager",
    "keywords": "Class VirtuosoManager A Manager for accessing the Native Virtuoso Quad Store Inheritance System.Object VDS.RDF.Storage.BaseAsyncSafeConnector VirtuosoManager Implements VDS.RDF.Storage.IAsyncStorageProvider VDS.RDF.Storage.IUpdateableStorage VDS.RDF.Storage.IQueryableStorage VDS.RDF.Storage.IStorageProvider VDS.RDF.Storage.IStorageCapabilities System.IDisposable Inherited Members VDS.RDF.Storage.BaseAsyncSafeConnector.LoadGraph(VDS.RDF.IGraph, System.Uri, VDS.RDF.Storage.AsyncStorageCallback, System.Object) VDS.RDF.Storage.BaseAsyncSafeConnector.LoadGraph(VDS.RDF.IGraph, System.String, VDS.RDF.Storage.AsyncStorageCallback, System.Object) VDS.RDF.Storage.BaseAsyncSafeConnector.LoadGraph(VDS.RDF.IRdfHandler, System.Uri, VDS.RDF.Storage.AsyncStorageCallback, System.Object) VDS.RDF.Storage.BaseAsyncSafeConnector.LoadGraph(VDS.RDF.IRdfHandler, System.String, VDS.RDF.Storage.AsyncStorageCallback, System.Object) VDS.RDF.Storage.BaseAsyncSafeConnector.SaveGraph(VDS.RDF.IGraph, VDS.RDF.Storage.AsyncStorageCallback, System.Object) VDS.RDF.Storage.BaseAsyncSafeConnector.UpdateGraph(System.Uri, System.Collections.Generic.IEnumerable<VDS.RDF.Triple>, System.Collections.Generic.IEnumerable<VDS.RDF.Triple>, VDS.RDF.Storage.AsyncStorageCallback, System.Object) VDS.RDF.Storage.BaseAsyncSafeConnector.UpdateGraph(System.String, System.Collections.Generic.IEnumerable<VDS.RDF.Triple>, System.Collections.Generic.IEnumerable<VDS.RDF.Triple>, VDS.RDF.Storage.AsyncStorageCallback, System.Object) VDS.RDF.Storage.BaseAsyncSafeConnector.DeleteGraph(System.Uri, VDS.RDF.Storage.AsyncStorageCallback, System.Object) VDS.RDF.Storage.BaseAsyncSafeConnector.DeleteGraph(System.String, VDS.RDF.Storage.AsyncStorageCallback, System.Object) VDS.RDF.Storage.BaseAsyncSafeConnector.ListGraphs(VDS.RDF.Storage.AsyncStorageCallback, System.Object) VDS.RDF.Storage.BaseAsyncSafeConnector.ParentServer VDS.RDF.Storage.BaseAsyncSafeConnector.AsyncParentServer System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity.Store.Virtuoso Assembly : Semiodesk.Trinity.Virtuoso.dll Syntax public class VirtuosoManager : BaseAsyncSafeConnector, IAsyncStorageProvider, IUpdateableStorage, IQueryableStorage, IStorageProvider, IStorageCapabilities, IDisposable Remarks This class implements VDS.RDF.Storage.IStorageProvider allowing it to be used with any of the general classes that support this interface as well as the Virtuoso specific classes. Although this class takes a Database Name to ensure compatability with any Virtuoso installation (i.e. this allows for the Native Quad Store to be in a non-standard database) generally you should always specify DB as the Database Name parameter Virtuoso automatically assigns IDs to Blank Nodes input into it, these IDs are not based on the actual Blank Node ID so inputting a Blank Node with the same ID multiple times will result in multiple Nodes being created in Virtuoso. This means that data containing Blank Nodes which is stored to Virtuoso and then retrieved will have different Blank Node IDs to those input. In addition there is no guarentee that when you save a Graph containing Blank Nodes into Virtuoso that retrieving it will give the same Blank Node IDs even if the Graph being saved was originally retrieved from Virtuoso. Finally please see the remarks on the UpdateGraph(Uri, IEnumerable<Triple>, IEnumerable<Triple>) method which deal with how insertion and deletion of triples containing blank nodes into existing graphs operates. You can use a null Uri or an empty String as a Uri to indicate that operations should affect the Default Graph. Where the argument is only a Graph a null VDS.RDF.IGraph.BaseUri property indicates that the Graph affects the Default Graph Constructors | Improve this Doc View Source VirtuosoManager(String) Creates a Manager for a Virtuoso Native Quad Store Declaration public VirtuosoManager(string connectionString) Parameters Type Name Description System.String connectionString Connection String Remarks Allows the end user to specify a customised connection string | Improve this Doc View Source VirtuosoManager(String, Int32, String, String, String) Creates a Manager for a Virtuoso Native Quad Store Declaration public VirtuosoManager(string server, int port, string db, string user, string password) Parameters Type Name Description System.String server Server System.Int32 port Port System.String db Database Name System.String user Username System.String password Password | Improve this Doc View Source VirtuosoManager(String, Int32, String, String, String, Int32) Creates a Manager for a Virtuoso Native Quad Store Declaration public VirtuosoManager(string server, int port, string db, string user, string password, int timeout) Parameters Type Name Description System.String server Server System.Int32 port Port System.String db Database Name System.String user Username System.String password Password System.Int32 timeout Connection Timeout in Seconds Remarks Timeouts less than equal to zero are ignored and treated as using the default timeout which is dictated by the underlying Virtuoso ADO.Net provider | Improve this Doc View Source VirtuosoManager(String, String, String) Creates a Manager for a Virtuoso Native Quad Store Declaration public VirtuosoManager(string db, string user, string password) Parameters Type Name Description System.String db Database Name System.String user Username System.String password Password Remarks Assumes the Server is on the localhost and the port is the default installation port of 1111 | Improve this Doc View Source VirtuosoManager(String, String, String, Int32) Creates a Manager for a Virtuoso Native Quad Store Declaration public VirtuosoManager(string db, string user, string password, int timeout) Parameters Type Name Description System.String db Database Name System.String user Username System.String password Password System.Int32 timeout Connection Timeout in Seconds Remarks Assumes the Server is on the localhost and the port is the default installation port of 1111 Fields | Improve this Doc View Source DefaultDB Default Database for Virtuoso Server Quad Store Declaration public const string DefaultDB = \"DB\" Field Value Type Description System.String | Improve this Doc View Source DefaultPort Default Port for Virtuoso Servers Declaration public const int DefaultPort = 1111 Field Value Type Description System.Int32 Properties | Improve this Doc View Source DeleteSupported Returns that deleting Graphs is supported Declaration public override bool DeleteSupported { get; } Property Value Type Description System.Boolean Overrides VDS.RDF.Storage.BaseAsyncSafeConnector.DeleteSupported | Improve this Doc View Source HasActiveTransaction Gets whether there is any active transaction on the Virtuoso database Declaration public bool HasActiveTransaction { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasOpenConnection Gets whether there is an active connection to the Virtuoso database Declaration public bool HasOpenConnection { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IOBehaviour Gets the IO Behaviour of the store Declaration public override IOBehaviour IOBehaviour { get; } Property Value Type Description VDS.RDF.Storage.IOBehaviour Overrides VDS.RDF.Storage.BaseAsyncSafeConnector.IOBehaviour | Improve this Doc View Source IsReadOnly Returns that the Manager is not read-only Declaration public override bool IsReadOnly { get; } Property Value Type Description System.Boolean Overrides VDS.RDF.Storage.BaseAsyncSafeConnector.IsReadOnly | Improve this Doc View Source IsReady Returns that the Manager is ready Declaration public override bool IsReady { get; } Property Value Type Description System.Boolean Overrides VDS.RDF.Storage.BaseAsyncSafeConnector.IsReady | Improve this Doc View Source ListGraphsSupported Returns that listing graphs is supported Declaration public override bool ListGraphsSupported { get; } Property Value Type Description System.Boolean Overrides VDS.RDF.Storage.BaseAsyncSafeConnector.ListGraphsSupported | Improve this Doc View Source UpdateSupported Indicates that Updates are supported by the Virtuoso Native Quad Store Declaration public override bool UpdateSupported { get; } Property Value Type Description System.Boolean Overrides VDS.RDF.Storage.BaseAsyncSafeConnector.UpdateSupported Methods | Improve this Doc View Source DeleteGraph(String) Deletes a Graph from the store Declaration public override void DeleteGraph(string graphUri) Parameters Type Name Description System.String graphUri URI of the Graph to delete Overrides VDS.RDF.Storage.BaseAsyncSafeConnector.DeleteGraph(System.String) | Improve this Doc View Source DeleteGraph(Uri) Deletes a Graph from the Virtuoso store Declaration public override void DeleteGraph(Uri graphUri) Parameters Type Name Description System.Uri graphUri URI of the Graph to delete Overrides VDS.RDF.Storage.BaseAsyncSafeConnector.DeleteGraph(System.Uri) | Improve this Doc View Source Dispose() Disposes of the Manager Declaration public override void Dispose() Overrides VDS.RDF.Storage.BaseAsyncSafeConnector.Dispose() | Improve this Doc View Source ListGraphs() Lists the Graphs in the store Declaration public override IEnumerable<Uri> ListGraphs() Returns Type Description System.Collections.Generic.IEnumerable < System.Uri > Overrides VDS.RDF.Storage.BaseAsyncSafeConnector.ListGraphs() | Improve this Doc View Source LoadGraph(IGraph, String) Loads a Graph from the Quad Store Declaration public override void LoadGraph(IGraph g, string graphUri) Parameters Type Name Description VDS.RDF.IGraph g Graph to load into System.String graphUri URI of the Graph to Load Overrides VDS.RDF.Storage.BaseAsyncSafeConnector.LoadGraph(VDS.RDF.IGraph, System.String) | Improve this Doc View Source LoadGraph(IGraph, Uri) Loads a Graph from the Quad Store Declaration public override void LoadGraph(IGraph g, Uri graphUri) Parameters Type Name Description VDS.RDF.IGraph g Graph to load into System.Uri graphUri URI of the Graph to Load Overrides VDS.RDF.Storage.BaseAsyncSafeConnector.LoadGraph(VDS.RDF.IGraph, System.Uri) | Improve this Doc View Source LoadGraph(IRdfHandler, String) Loads a Graph from the Quad Store Declaration public override void LoadGraph(IRdfHandler handler, string graphUri) Parameters Type Name Description VDS.RDF.IRdfHandler handler RDF Handler System.String graphUri URI of the Graph to Load Overrides VDS.RDF.Storage.BaseAsyncSafeConnector.LoadGraph(VDS.RDF.IRdfHandler, System.String) | Improve this Doc View Source LoadGraph(IRdfHandler, Uri) Loads a Graph from the Quad Store Declaration public override void LoadGraph(IRdfHandler handler, Uri graphUri) Parameters Type Name Description VDS.RDF.IRdfHandler handler RDF Handler System.Uri graphUri URI of the Graph to Load Overrides VDS.RDF.Storage.BaseAsyncSafeConnector.LoadGraph(VDS.RDF.IRdfHandler, System.Uri) | Improve this Doc View Source Query(String) Executes a SPARQL Query on the native Quad Store Declaration public object Query(string sparqlQuery) Parameters Type Name Description System.String sparqlQuery SPARQL Query to execute Returns Type Description System.Object Remarks This method will first attempt to parse the query into a SparqlQuery object. If this succeeds then the Query Type can be used to determine how to handle the response. If the parsing fails then the query will be executed anyway using Virtuoso's SPASQL (SPARQL + SQL) syntax. Parsing can fail because Virtuoso supports various SPARQL extensions which the library does not support. These include things like aggregate functions but also SPARUL updates (the non-standard precusor to SPARQL 1.1 Update). If you use an aggregate query which has an Integer, Decimal or Double type result then you will receive a VDS.RDF.Query.SparqlResultSet containing a single VDS.RDF.Query.SparqlResult which has contains a binding for a variable named Result which contains a VDS.RDF.LiteralNode typed to the appropriate datatype. Exceptions Type Condition VDS.RDF.Query.RdfQueryException Thrown if an error occurs in making the query | Improve this Doc View Source Query(IRdfHandler, ISparqlResultsHandler, String) Executes a SPARQL Query on the native Quad Store processing the results with an appropriate handler from those provided Declaration public void Query(IRdfHandler rdfHandler, ISparqlResultsHandler resultsHandler, string sparqlQuery) Parameters Type Name Description VDS.RDF.IRdfHandler rdfHandler RDF Handler VDS.RDF.ISparqlResultsHandler resultsHandler Results Handler System.String sparqlQuery SPARQL Query to execute Remarks This method will first attempt to parse the query into a SparqlQuery object. If this succeeds then the Query Type can be used to determine how to handle the response. If the parsing fails then the query will be executed anyway using Virtuoso's SPASQL (SPARQL + SQL) syntax. Parsing can fail because Virtuoso supports various SPARQL non-standardised extensions which the library does not support. These include things like aggregate functions but also SPARUL updates (the non-standard precusor to SPARQL 1.1 Update). If you use an aggregate query which has an Integer, Decimal or Double type result then you will receive a VDS.RDF.Query.SparqlResultSet containing a single VDS.RDF.Query.SparqlResult which has contains a binding for a variable named Result which contains a VDS.RDF.LiteralNode typed to the appropriate datatype. Exceptions Type Condition VDS.RDF.Query.RdfQueryException Thrown if an error occurs in making the query | Improve this Doc View Source SaveGraph(IGraph) Saves a Graph into the Quad Store (Warning: Completely replaces any existing Graph with the same URI) Declaration public override void SaveGraph(IGraph g) Parameters Type Name Description VDS.RDF.IGraph g Graph to save Overrides VDS.RDF.Storage.BaseAsyncSafeConnector.SaveGraph(VDS.RDF.IGraph) Remarks Completely replaces any previously saved Graph with the same Graph URI | Improve this Doc View Source ToString() Gets a String which gives details of the Connection Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source Update(String) Executes a SPARQL Update on the native Quad Store Declaration public void Update(string sparqlUpdate) Parameters Type Name Description System.String sparqlUpdate SPARQL Update to execute Remarks This method will first attempt to parse the update into a VDS.RDF.Update.SparqlUpdateCommandSet object. If this succeeds then each command in the command set will be issued to Virtuoso. If the parsing fails then the update will be executed anyway using Virtuoso's SPASQL (SPARQL + SQL) syntax. Parsing can fail because Virtuoso supports various SPARQL extensions which the library does not support and primarily supports SPARUL updates (the precusor to SPARQL 1.1 Update). Exceptions Type Condition VDS.RDF.Update.SparqlUpdateException Thrown if an error occurs in making the update | Improve this Doc View Source UpdateGraph(String, IEnumerable<Triple>, IEnumerable<Triple>) Updates a Graph in the Quad Store Declaration public override void UpdateGraph(string graphUri, IEnumerable<Triple> additions, IEnumerable<Triple> removals) Parameters Type Name Description System.String graphUri Graph Uri of the Graph to update System.Collections.Generic.IEnumerable < VDS.RDF.Triple > additions Triples to be added System.Collections.Generic.IEnumerable < VDS.RDF.Triple > removals Triples to be removed Overrides VDS.RDF.Storage.BaseAsyncSafeConnector.UpdateGraph(System.String, System.Collections.Generic.IEnumerable<VDS.RDF.Triple>, System.Collections.Generic.IEnumerable<VDS.RDF.Triple>) | Improve this Doc View Source UpdateGraph(Uri, IEnumerable<Triple>, IEnumerable<Triple>) Updates a Graph in the Quad Store Declaration public override void UpdateGraph(Uri graphUri, IEnumerable<Triple> additions, IEnumerable<Triple> removals) Parameters Type Name Description System.Uri graphUri Graph Uri of the Graph to update System.Collections.Generic.IEnumerable < VDS.RDF.Triple > additions Triples to be added System.Collections.Generic.IEnumerable < VDS.RDF.Triple > removals Triples to be removed Overrides VDS.RDF.Storage.BaseAsyncSafeConnector.UpdateGraph(System.Uri, System.Collections.Generic.IEnumerable<VDS.RDF.Triple>, System.Collections.Generic.IEnumerable<VDS.RDF.Triple>) Remarks In the case of inserts where blank nodes are present the data will be inserted but new blank nodes will be created. You cannot insert data that refers to existing blank nodes via this method, consider using a INSERT WHERE style SPARQL Update instead. Note that Blank Nodes cannot always be deleted successfully, if you have retrieved the triples you are now trying to delete from Virtuoso and they contain blank nodes then this will likely work as expected. Otherwise deletetions of Blank Nodes cannot be guaranteed. If the Graph being modified is relatively small it may be safer to load the graph into memory, makes the modifications there and then persist the graph back to the store (which overwrites the previous version of the graph). Implements VDS.RDF.Storage.IAsyncStorageProvider VDS.RDF.Storage.IUpdateableStorage VDS.RDF.Storage.IQueryableStorage VDS.RDF.Storage.IStorageProvider VDS.RDF.Storage.IStorageCapabilities System.IDisposable"
  },
  "api/Semiodesk.Trinity.Store.Virtuoso.Rulesets.html": {
    "href": "api/Semiodesk.Trinity.Store.Virtuoso.Rulesets.html",
    "title": "Trinity RDF | Class Rulesets",
    "keywords": "Class Rulesets Inheritance System.Object Rulesets Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Store.Virtuoso Assembly : Semiodesk.Trinity.Virtuoso.dll Syntax public class Rulesets Properties | Improve this Doc View Source RulesetCollection Declaration public List<Ruleset> RulesetCollection { get; set; } Property Value Type Description System.Collections.Generic.List < Ruleset >"
  },
  "api/Semiodesk.Trinity.Store.Stardog.ReadStartEventHandler.html": {
    "href": "api/Semiodesk.Trinity.Store.Stardog.ReadStartEventHandler.html",
    "title": "Trinity RDF | Delegate ReadStartEventHandler",
    "keywords": "Delegate ReadStartEventHandler Handles events when reading an RDF file has started and no triples have been read. Namespace : Semiodesk.Trinity.Store.Stardog Assembly : Semiodesk.Trinity.dll Syntax public delegate void ReadStartEventHandler(object sender); Parameters Type Name Description System.Object sender The source of the event."
  },
  "api/Semiodesk.Trinity.NotifyPropertyChangedAttribute.html": {
    "href": "api/Semiodesk.Trinity.NotifyPropertyChangedAttribute.html",
    "title": "Trinity RDF | Class NotifyPropertyChangedAttribute",
    "keywords": "Class NotifyPropertyChangedAttribute Marks the property as NotifyingProperty. Inheritance System.Object System.Attribute NotifyPropertyChangedAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class NotifyPropertyChangedAttribute : Attribute"
  },
  "api/Semiodesk.Trinity.ISparqlQuery.html": {
    "href": "api/Semiodesk.Trinity.ISparqlQuery.html",
    "title": "Trinity RDF | Interface ISparqlQuery",
    "keywords": "Interface ISparqlQuery Exposes a SPARQL query. Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public interface ISparqlQuery Properties | Improve this Doc View Source IsInferenceEnabled Indicates if inference should be enabled. It depends on the underlying store if and how this is used. Declaration bool IsInferenceEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Model The model on which the query will be run. Declaration IModel Model { get; set; } Property Value Type Description IModel | Improve this Doc View Source QueryType The type of the query. Declaration SparqlQueryType QueryType { get; } Property Value Type Description SparqlQueryType Methods | Improve this Doc View Source Bind(String, Object) Bind parameters to specified values. Declaration void Bind(string parameter, object value) Parameters Type Name Description System.String parameter System.Object value | Improve this Doc View Source GetDeclaredPrefixes() Returns all prefixes that were specified by the query. Declaration IEnumerable<string> GetDeclaredPrefixes() Returns Type Description System.Collections.Generic.IEnumerable < System.String > | Improve this Doc View Source GetDefaultModels() Enumerates the graphs which are declared in FROM and FROM NAMED directives at the root level. Declaration IEnumerable<string> GetDefaultModels() Returns Type Description System.Collections.Generic.IEnumerable < System.String > An enumeration of URI strings. | Improve this Doc View Source GetGlobalScopeVariableNames() Get an array of all variable names that are defined in the root scope of the query. Declaration string[] GetGlobalScopeVariableNames() Returns Type Description System.String [] An array of avaiable names without the preceding '$' or '?' characters, if any. | Improve this Doc View Source GetRootGraphPattern() Get the root graph pattern. Declaration string GetRootGraphPattern() Returns Type Description System.String A non empty string, on success. | Improve this Doc View Source GetRootOrderByClause() Gets the outermost ORDER BY clause. Declaration string GetRootOrderByClause() Returns Type Description System.String A non empty string if a ORDER BY clause is defined. | Improve this Doc View Source ProvidesStatements() Indicates if the query selects variables that are used as subject, predicate and object in a triple pattern. Declaration bool ProvidesStatements() Returns Type Description System.Boolean true if the query selects triples, false otherwise. | Improve this Doc View Source ToString() Returns the string representation of the query. Declaration string ToString() Returns Type Description System.String The SPARQL query string."
  },
  "api/Semiodesk.Trinity.INamespaceMap.html": {
    "href": "api/Semiodesk.Trinity.INamespaceMap.html",
    "title": "Trinity RDF | Interface INamespaceMap",
    "keywords": "Interface INamespaceMap Exposes a dictionary which maps prefixes to namespace URIs. Inherited Members System.Collections.Generic.IDictionary<System.String, System.Uri>.Add(System.String, System.Uri) System.Collections.Generic.IDictionary<System.String, System.Uri>.ContainsKey(System.String) System.Collections.Generic.IDictionary<System.String, System.Uri>.Remove(System.String) System.Collections.Generic.IDictionary<System.String, System.Uri>.TryGetValue(System.String, System.Uri) System.Collections.Generic.IDictionary<System.String, System.Uri>.Item[System.String] System.Collections.Generic.IDictionary<System.String, System.Uri>.Keys System.Collections.Generic.IDictionary<System.String, System.Uri>.Values System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Uri>>.Add(System.Collections.Generic.KeyValuePair<System.String, System.Uri>) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Uri>>.Clear() System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Uri>>.Contains(System.Collections.Generic.KeyValuePair<System.String, System.Uri>) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Uri>>.CopyTo(System.Collections.Generic.KeyValuePair<System.String, System.Uri>[], System.Int32) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Uri>>.Remove(System.Collections.Generic.KeyValuePair<System.String, System.Uri>) System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Uri>>.Count System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String, System.Uri>>.IsReadOnly System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String, System.Uri>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public interface INamespaceMap : IDictionary<string, Uri>, ICollection<KeyValuePair<string, Uri>>, IEnumerable<KeyValuePair<string, Uri>>, IEnumerable"
  },
  "api/Semiodesk.Trinity.Collections.VirtualizingCollection-1.html": {
    "href": "api/Semiodesk.Trinity.Collections.VirtualizingCollection-1.html",
    "title": "Trinity RDF | Class VirtualizingCollection<T>",
    "keywords": "Class VirtualizingCollection<T> A generic virtualizing collection. Inheritance System.Object VirtualizingCollection<T> AsyncVirtualizingCollection<T> VirtualizingSparqlCollection<T> Implements System.Collections.Generic.IList <T> System.Collections.Generic.ICollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Collections Assembly : Semiodesk.Trinity.dll Syntax public class VirtualizingCollection<T> : IList<T>, ICollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable Type Parameters Name Description T Constructors | Improve this Doc View Source VirtualizingCollection(IItemsProvider<T>) Initializes a new instance of the VirtualizingCollection<T> class. Declaration public VirtualizingCollection(IItemsProvider<T> itemsProvider) Parameters Type Name Description IItemsProvider <T> itemsProvider | Improve this Doc View Source VirtualizingCollection(IItemsProvider<T>, Int32) Initializes a new instance of the VirtualizingCollection<T> class. Declaration public VirtualizingCollection(IItemsProvider<T> itemsProvider, int pageSize) Parameters Type Name Description IItemsProvider <T> itemsProvider The items provider. System.Int32 pageSize Size of the page. | Improve this Doc View Source VirtualizingCollection(IItemsProvider<T>, Int32, Int32) Initializes a new instance of the VirtualizingCollection<T> class. Declaration public VirtualizingCollection(IItemsProvider<T> itemsProvider, int pageSize, int pageTimeout) Parameters Type Name Description IItemsProvider <T> itemsProvider Items provider System.Int32 pageSize Size of the page. System.Int32 pageTimeout The page timeout. Fields | Improve this Doc View Source _pageSize The page size contains the number of elements per page. Declaration protected int _pageSize Field Value Type Description System.Int32 | Improve this Doc View Source _pageTimeout The time after which a page can be removed. Declaration protected long _pageTimeout Field Value Type Description System.Int64 Properties | Improve this Doc View Source Count Number of elements in the list. Declaration public virtual int Count { get; protected set; } Property Value Type Description System.Int32 | Improve this Doc View Source IsFixedSize Gets a value indicating whether the System.Collections.IList has a fixed size. Declaration public bool IsFixedSize { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsReadOnly Gets a value indicating whether the System.Collections.Generic.ICollection<T> is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSynchronized Gets a value indicating whether access to the System.Collections.ICollection is synchronized (thread safe). Declaration public bool IsSynchronized { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Access an element at a certain index. Declaration public T this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description T | Improve this Doc View Source PageSize The page size contains the number of elements per page. Declaration public int PageSize { get; } Property Value Type Description System.Int32 | Improve this Doc View Source PageTimeout Timeout in ms. If the page has not been touched it can be removed with CleanUpPages. Declaration public long PageTimeout { get; } Property Value Type Description System.Int64 | Improve this Doc View Source SyncRoot Gets an object that can be used to synchronize access to the System.Collections.ICollection . Declaration public object SyncRoot { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source Add(T) The list is read-only, not supported. Declaration public void Add(T item) Parameters Type Name Description T item | Improve this Doc View Source CleanUpPages() Removes pages that have not been touched recently. The timeout can be configured with the PageTimeout. Declaration public void CleanUpPages() | Improve this Doc View Source Clear() The list is read-only, not supported. Declaration public void Clear() | Improve this Doc View Source Contains(T) The list is read-only, not supported. Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description System.Boolean | Improve this Doc View Source CopyTo(T[], Int32) The list is read-only, not supported. Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array System.Int32 arrayIndex | Improve this Doc View Source FetchCount() Gets the element count from the item provider. Declaration protected int FetchCount() Returns Type Description System.Int32 | Improve this Doc View Source FetchPage(Int32) Gets the page from the item provider. Declaration protected IList<T> FetchPage(int pageIndex) Parameters Type Name Description System.Int32 pageIndex Returns Type Description System.Collections.Generic.IList <T> | Improve this Doc View Source GetEnumerator() Returns the enumerator of the collection Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> | Improve this Doc View Source IndexOf(T) Returns the index of a certain element. Declaration public int IndexOf(T item) Parameters Type Name Description T item Returns Type Description System.Int32 | Improve this Doc View Source Insert(Int32, T) The list is read-only, not supported. Declaration public void Insert(int index, T item) Parameters Type Name Description System.Int32 index T item | Improve this Doc View Source LoadCount() Loads the count of the collection. Declaration protected virtual void LoadCount() | Improve this Doc View Source LoadPage(Int32) Load page with the given index. Declaration protected virtual void LoadPage(int pageIndex) Parameters Type Name Description System.Int32 pageIndex | Improve this Doc View Source PopulatePage(Int32, IList<T>) Sets the given page to the given index. Declaration protected virtual void PopulatePage(int pageIndex, IList<T> page) Parameters Type Name Description System.Int32 pageIndex System.Collections.Generic.IList <T> page | Improve this Doc View Source Remove(T) The list is read-only, not supported. Declaration public bool Remove(T item) Parameters Type Name Description T item Returns Type Description System.Boolean | Improve this Doc View Source RemoveAt(Int32) The list is read-only, not supported. Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index | Improve this Doc View Source RequestPage(Int32) Load the page with the given index. Declaration protected virtual void RequestPage(int pageIndex) Parameters Type Name Description System.Int32 pageIndex Explicit Interface Implementations | Improve this Doc View Source ICollection.CopyTo(Array, Int32) The list is read-only, not supported. Declaration void ICollection.CopyTo(Array array, int index) Parameters Type Name Description System.Array array System.Int32 index | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator | Improve this Doc View Source IList.Add(Object) Declaration int IList.Add(object value) Parameters Type Name Description System.Object value Returns Type Description System.Int32 | Improve this Doc View Source IList.Contains(Object) Declaration bool IList.Contains(object value) Parameters Type Name Description System.Object value Returns Type Description System.Boolean | Improve this Doc View Source IList.IndexOf(Object) Declaration int IList.IndexOf(object value) Parameters Type Name Description System.Object value Returns Type Description System.Int32 | Improve this Doc View Source IList.Insert(Int32, Object) The list is read-only, not supported. Declaration void IList.Insert(int index, object value) Parameters Type Name Description System.Int32 index System.Object value | Improve this Doc View Source IList.Item[Int32] Declaration object IList.this[int index] { get; set; } Parameters Type Name Description System.Int32 index Returns Type Description System.Object | Improve this Doc View Source IList.Remove(Object) The list is read-only, not supported. Declaration void IList.Remove(object value) Parameters Type Name Description System.Object value Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IList System.Collections.ICollection System.Collections.IEnumerable"
  },
  "api/Semiodesk.Trinity.FileSystemInfoExtensions.html": {
    "href": "api/Semiodesk.Trinity.FileSystemInfoExtensions.html",
    "title": "Trinity RDF | Class FileSystemInfoExtensions",
    "keywords": "Class FileSystemInfoExtensions Extension to FileSystemInfo concerting UriRef handling Inheritance System.Object FileSystemInfoExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public static class FileSystemInfoExtensions Methods | Improve this Doc View Source ToUriRef(FileSystemInfo) Create a UriRef from a FileSystemInfo Declaration public static UriRef ToUriRef(this FileSystemInfo fileInfo) Parameters Type Name Description System.IO.FileSystemInfo fileInfo Returns Type Description UriRef"
  },
  "api/Semiodesk.Trinity.Store.Stardog.StringExtensions.html": {
    "href": "api/Semiodesk.Trinity.Store.Stardog.StringExtensions.html",
    "title": "Trinity RDF | Class StringExtensions",
    "keywords": "Class StringExtensions Extensions for the System.String type. Inheritance System.Object StringExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Store.Stardog Assembly : Semiodesk.Trinity.dll Syntax public static class StringExtensions Methods | Improve this Doc View Source Between(String, String, String, Int32) Extracts the instance'th string between start and end. If start or end is null/empty then instance is assumed to always be 1 regardless of the value. Declaration public static string Between(this string input, string start, string end, int instance = 1) Parameters Type Name Description System.String input Input string System.String start Start delimiter System.String end End delimiter System.Int32 instance Instance of start/end to use. Returns Type Description System.String | Improve this Doc View Source Between(String, String, String, out Int32, Int32) Extracts the instance'th string between start and end. If start or end is null/empty then instance is assumed to always be 1 regardless of the value. Declaration public static string Between(this string input, string start, string end, out int indexAtEnd, int instance = 1) Parameters Type Name Description System.String input Input string System.String start Start delimiter System.String end End delimiter System.Int32 indexAtEnd Pointer into input where parsing ended. This will be at the point AFTER end was found. System.Int32 instance Instance of start/end to use. Returns Type Description System.String | Improve this Doc View Source BetweenSingleQuotes(String, out Int32) Returns the string between the first set of single quotes. Supports escaped single quotes but only \\' Declaration public static string BetweenSingleQuotes(this string input, out int indexAtEnd) Parameters Type Name Description System.String input Input string System.Int32 indexAtEnd Pointer into input where parsing ended. This will be at the point AFTER end was found. Returns Type Description System.String"
  },
  "api/Semiodesk.Trinity.Store.ITripleProvider.html": {
    "href": "api/Semiodesk.Trinity.Store.ITripleProvider.html",
    "title": "Trinity RDF | Interface ITripleProvider",
    "keywords": "Interface ITripleProvider A generic triple provider interface Namespace : Semiodesk.Trinity.Store Assembly : Semiodesk.Trinity.dll Syntax public interface ITripleProvider Properties | Improve this Doc View Source Count Number of total triples Declaration int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source HasNext Indicates if another triple is available Declaration bool HasNext { get; } Property Value Type Description System.Boolean | Improve this Doc View Source O Object Declaration INode O { get; } Property Value Type Description VDS.RDF.INode | Improve this Doc View Source P Predicate Declaration Uri P { get; } Property Value Type Description System.Uri | Improve this Doc View Source S Subject Declaration INode S { get; } Property Value Type Description VDS.RDF.INode Methods | Improve this Doc View Source Reset() Resets the provider Declaration void Reset() | Improve this Doc View Source SetNext() Iterates to the next triple Declaration void SetNext()"
  },
  "tutorials/virtuoso.html": {
    "href": "tutorials/virtuoso.html",
    "title": "Trinity RDF | OpenLink Virtuoso",
    "keywords": "OpenLink Virtuoso Many features of the Trinity RDF are geared towards the OpenLink Virtuoso database. If you create a quick installation to get you started then just follow these instructions. Windows 1. Obtaining Virtuoso You can download a pre-build OpenLink Virtuoso version here . 2. Unzip Package This is where your Virtuoso installation will reside, so pick a sensible directory. Inside this directory, you will have the following folders: Folder Description bin Contains appliation binaries. database Contains an example configuration. doc Contains documentation. hosting Additional modules. lib The libraries to access the database. vad VAD packages BPEL, Conductor, tutorials, documentation. 3. Configuring To get started quickly, you can just use the example configuration in the database folder. 4. Starting Virtuoso Here we have two options, the quickstart which creates a Virtuoso instance that stops once the console window is closed and installing Virtuoso as a Windows Service. a. Console Open a console in your Virtuoso directory and start it with the following command: bin\\virtuoso-t.exe -f -c database/virtuoso.ini Closing the console or pressing CTRL+C will stop the database server. b. Windows Service This process takes a few more steps, but the Server will automatically be started when the computer is restarted. First you need a console with administration rights. The easiest way to get one is to open the start menu, type in cmd.exe and press CTRL+SHIFT+ENTER . You then need to navigate into your Virtuoso installation directory. To install the service, enter bin\\virtuoso-t.exe +service screate -I 'My Virtuoso Server' -c database/virtuoso.ini To start the service, enter bin\\virtuoso-t.exe +service start -I 'My Virtuoso Server' If you want to delete it from your system, you can use bin\\virtuoso-t.exe +service delete -I 'My Virtuoso Server' 5. Testing Navigate to http://localhost:8890/conductor/ and try to login with the credentials dba/dba . If everything works you should now have a running Virtuoso server. 6. Using Virtuoso When you use the default configuration, you can use the following configuration string: provider=virtuoso;host=localhost;port=1111;uid=dba;pw=dba To create the store, use the following snippet: IStore store = StoreFactory.CreateStore(\"provider=virtuoso;host=localhost;port=1111;uid=dba;pw=dba\");"
  },
  "api/Semiodesk.Trinity.Store.Stardog.StardogTransaction.html": {
    "href": "api/Semiodesk.Trinity.Store.Stardog.StardogTransaction.html",
    "title": "Trinity RDF | Class StardogTransaction",
    "keywords": "Class StardogTransaction Wrapper to support Stardog transactions. At present, nested transaction is NOT supported as the transaction instance is a wrapper around the StardogConnector. Inheritance System.Object StardogTransaction Implements ITransaction System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Store.Stardog Assembly : Semiodesk.Trinity.dll Syntax public class StardogTransaction : ITransaction, IDisposable Constructors | Improve this Doc View Source StardogTransaction(StardogConnector) Declaration public StardogTransaction(StardogConnector connector) Parameters Type Name Description VDS.RDF.Storage.StardogConnector connector Properties | Improve this Doc View Source AddTripleCount Number of pending \"Additions\" in the current transaction. Declaration public int AddTripleCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Connector StardogConnector instance associated with this transaction Declaration public StardogConnector Connector { get; } Property Value Type Description VDS.RDF.Storage.StardogConnector | Improve this Doc View Source HasPendingChanges Has any pending changes. Declaration public bool HasPendingChanges { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsActive Instance is active and has not been committed or rolled back. Once the transaction has been committed or rolled back, it should be disposed of. Declaration public bool IsActive { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsolationLevel Declaration public IsolationLevel IsolationLevel { get; } Property Value Type Description System.Data.IsolationLevel | Improve this Doc View Source RemoveTripleCount Number of pending \"Removals\" in the current transaction. Declaration public int RemoveTripleCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Commit() Declaration public void Commit() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Rollback() Declaration public void Rollback() Events | Improve this Doc View Source OnFinishedTransaction Declaration public event FinishedTransactionEvent OnFinishedTransaction Event Type Type Description FinishedTransactionEvent Implements ITransaction System.IDisposable"
  },
  "api/Semiodesk.Trinity.Store.Virtuoso.VirtuosoTransaction.html": {
    "href": "api/Semiodesk.Trinity.Store.Virtuoso.VirtuosoTransaction.html",
    "title": "Trinity RDF | Class VirtuosoTransaction",
    "keywords": "Class VirtuosoTransaction Virtuoso transactions support For more information refer to : http://docs.openlinksw.com/virtuoso/coredbengine.html#Locking http://docs.openlinksw.com/virtuoso/ptune.html#TRANSACTION_ISOLATION_LEVELS Auto row commit = DEFINE sql:log-enable 2 Inheritance System.Object VirtuosoTransaction Implements ITransaction System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Store.Virtuoso Assembly : Semiodesk.Trinity.Virtuoso.dll Syntax public class VirtuosoTransaction : ITransaction, IDisposable Fields | Improve this Doc View Source Transaction Declaration public VirtuosoTransaction Transaction Field Value Type Description OpenLink.Data.Virtuoso.VirtuosoTransaction Properties | Improve this Doc View Source IsolationLevel Declaration public IsolationLevel IsolationLevel { get; } Property Value Type Description System.Data.IsolationLevel Methods | Improve this Doc View Source Commit() Declaration public void Commit() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Rollback() Declaration public void Rollback() Events | Improve this Doc View Source OnFinishedTransaction Declaration public event FinishedTransactionEvent OnFinishedTransaction Event Type Type Description FinishedTransactionEvent Implements ITransaction System.IDisposable"
  },
  "api/Semiodesk.Trinity.Store.Stardog.StardogStore.html": {
    "href": "api/Semiodesk.Trinity.Store.Stardog.StardogStore.html",
    "title": "Trinity RDF | Class StardogStore",
    "keywords": "Class StardogStore A store adapter for Stardog databases. Inheritance System.Object StoreBase StardogStore Implements IStore System.IDisposable Inherited Members StoreBase.Log StoreBase.RemoveModel(IModel) StoreBase.ContainsModel(IModel) StoreBase.LoadOntologySettings(String, String) StoreBase.InitializeFromConfiguration(String, String) StoreBase.LoadConfiguration(String) StoreBase.LoadOntologies(IConfiguration, String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Store.Stardog Assembly : Semiodesk.Trinity.dll Syntax public class StardogStore : StoreBase, IStore, IDisposable Constructors | Improve this Doc View Source StardogStore(String, String, String, String) Create a new instance of the StardogStore class. Declaration public StardogStore(string host, string username, string password, string storeId) Parameters Type Name Description System.String host URL of the host to connect to. System.String username Username to be used when connecting. System.String password Password to be used when connecting. System.String storeId Knowledge base / database identifier. Properties | Improve this Doc View Source IsReady Indicates if the store is connected and awaiting queries. Declaration public bool IsReady { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source BeginTransaction(IsolationLevel) Starts a transaction. The resulting transaction handle can be used to chain operations together. Declaration public override ITransaction BeginTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel Isolation level of the operations executed in the transaction. Returns Type Description ITransaction Overrides StoreBase.BeginTransaction(IsolationLevel) | Improve this Doc View Source ContainsModel(Uri) Query if the model exists in the store. OBSOLETE: This method does not list empty models. At the moment you should just call GetModel() and test for IsEmpty Declaration [Obsolete] public override bool ContainsModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model which is to be queried. Returns Type Description System.Boolean Overrides StoreBase.ContainsModel(Uri) | Improve this Doc View Source CreateModel(Uri) Adds a new model with the given uri to the storage. Declaration [Obsolete] public override IModel CreateModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model Returns Type Description IModel Handle to the model Overrides StoreBase.CreateModel(Uri) | Improve this Doc View Source CreateModelGroup(IModel[]) Creates a model group which allows for queries to be made on multiple models at once. Declaration public override IModelGroup CreateModelGroup(params IModel[] models) Parameters Type Name Description IModel [] models The list of model handles that should be grouped together. Returns Type Description IModelGroup Overrides StoreBase.CreateModelGroup(IModel[]) | Improve this Doc View Source CreateModelGroup(Uri[]) Creates a model group which allows for queries to be made on multiple models at once. Declaration public override IModelGroup CreateModelGroup(params Uri[] models) Parameters Type Name Description System.Uri [] models The list of uris of the models that should be grouped together. Returns Type Description IModelGroup Overrides StoreBase.CreateModelGroup(Uri[]) | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides StoreBase.Dispose() | Improve this Doc View Source ExecuteNonQuery(SparqlUpdate, ITransaction) Executes a query on the store which does not expect a result. Declaration public override void ExecuteNonQuery(SparqlUpdate update, ITransaction transaction = null) Parameters Type Name Description SparqlUpdate update SPARQL Update to be executed. ITransaction transaction An optional transaction. Overrides StoreBase.ExecuteNonQuery(SparqlUpdate, ITransaction) | Improve this Doc View Source ExecuteQuery(ISparqlQuery, ITransaction) Executes a SparqlQuery on the store. Declaration public override ISparqlQueryResult ExecuteQuery(ISparqlQuery query, ITransaction transaction = null) Parameters Type Name Description ISparqlQuery query SPARQL query to be executed. ITransaction transaction An optional transaction. Returns Type Description ISparqlQueryResult Overrides StoreBase.ExecuteQuery(ISparqlQuery, ITransaction) | Improve this Doc View Source ExecuteQuery(String, ITransaction) Executes a SparqlQuery on the store. Declaration public StardogResultHandler ExecuteQuery(string query, ITransaction transaction = null) Parameters Type Name Description System.String query SPARQL query string to be executed. ITransaction transaction An optional transaction. Returns Type Description StardogResultHandler | Improve this Doc View Source GetModel(Uri) Gets a handle to a model in the store. Declaration public override IModel GetModel(Uri uri) Parameters Type Name Description System.Uri uri Model URI. Returns Type Description IModel Overrides StoreBase.GetModel(Uri) | Improve this Doc View Source ListModels() Lists all models in the store. Declaration public override IEnumerable<IModel> ListModels() Returns Type Description System.Collections.Generic.IEnumerable < IModel > All handles to existing models. Overrides StoreBase.ListModels() | Improve this Doc View Source OnTransactionCompleted(Object, TransactionEventArgs) Invoked when a transaction is completed. Declaration protected void OnTransactionCompleted(object sender, TransactionEventArgs e) Parameters Type Name Description System.Object sender Object which invoked the event. TransactionEventArgs e Event arguments. | Improve this Doc View Source Read(Stream, Uri, RdfSerializationFormat, Boolean) Loads a serialized graph from the given stream into the current store. See allowed RdfSerializationFormat . Declaration public override Uri Read(Stream stream, Uri modelUri, RdfSerializationFormat format, bool update) Parameters Type Name Description System.IO.Stream stream Stream containing a serialized graph System.Uri modelUri Uri of the graph in this store RdfSerializationFormat format Allowed formats System.Boolean update Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing. Returns Type Description System.Uri Overrides StoreBase.Read(Stream, Uri, RdfSerializationFormat, Boolean) | Improve this Doc View Source Read(Uri, Uri, RdfSerializationFormat, Boolean) Loads a serialized graph from the given location into the current store. See allowed RdfSerializationFormat . Declaration public override Uri Read(Uri modelUri, Uri url, RdfSerializationFormat format, bool update) Parameters Type Name Description System.Uri modelUri Uri of the graph in this store System.Uri url Location RdfSerializationFormat format Allowed formats System.Boolean update Pass false if you want to overwrite the existing data. True if you want to add the new data to the existing. Returns Type Description System.Uri Overrides StoreBase.Read(Uri, Uri, RdfSerializationFormat, Boolean) | Improve this Doc View Source RemoveModel(Uri) Removes model from the store. Declaration public override void RemoveModel(Uri uri) Parameters Type Name Description System.Uri uri Uri of the model which is to be removed. Overrides StoreBase.RemoveModel(Uri) | Improve this Doc View Source Write(Stream, Uri, RdfSerializationFormat, INamespaceMap) Writes a serialized graph to the given stream. See allowed RdfSerializationFormat . Declaration public override void Write(Stream stream, Uri graphUri, RdfSerializationFormat format, INamespaceMap namespaces = null) Parameters Type Name Description System.IO.Stream stream Stream to which the content should be written. System.Uri graphUri Uri fo the graph in this store RdfSerializationFormat format Allowed formats INamespaceMap namespaces Defines namespace to prefix mappings for the output. Overrides StoreBase.Write(Stream, Uri, RdfSerializationFormat, INamespaceMap) Implements IStore System.IDisposable"
  },
  "api/Semiodesk.Trinity.RdfSerializationFormat.html": {
    "href": "api/Semiodesk.Trinity.RdfSerializationFormat.html",
    "title": "Trinity RDF | Enum RdfSerializationFormat",
    "keywords": "Enum RdfSerializationFormat Enumerates all supported RDF serialization formats. Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public enum RdfSerializationFormat Fields Name Description Json JSON JsonLd JSON-LD https://www.w3.org/TR/json-ld/ N3 N3 http://www.w3.org/TeamSubmission/n3/ NQuads NTriples https://www.w3.org/TR/2014/REC-n-quads-20140225/ NTriples NTriples http://www.w3.org/2001/sw/RDFCore/ntriples/ RdfXml RDF/XML http://www.w3.org/TR/REC-rdf-syntax/ Trig TriG http://www.w3.org/TR/trig/ Turtle Turtle http://www.w3.org/TR/turtle/"
  },
  "api/Semiodesk.Trinity.RdfPropertyAttribute.html": {
    "href": "api/Semiodesk.Trinity.RdfPropertyAttribute.html",
    "title": "Trinity RDF | Class RdfPropertyAttribute",
    "keywords": "Class RdfPropertyAttribute Decorate a property with this attribute to mark it as mapped RDF property with the given type. Inheritance System.Object System.Attribute RdfPropertyAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class RdfPropertyAttribute : Attribute Constructors | Improve this Doc View Source RdfPropertyAttribute(String, Boolean) Constructor Declaration public RdfPropertyAttribute(string uriString, bool languageInvariant = false) Parameters Type Name Description System.String uriString There uri of the rdf property for this mapping. System.Boolean languageInvariant The mapping ignores the language setting and is always non-localized. Only valid if type or generic type is string or string collection. Fields | Improve this Doc View Source LanguageInvariant Flag determining if property is language invariant. Only valid for string or string collections. Declaration public bool LanguageInvariant Field Value Type Description System.Boolean | Improve this Doc View Source MappedUri Uri of the the RDF property Declaration public readonly Uri MappedUri Field Value Type Description System.Uri"
  },
  "api/Semiodesk.Trinity.Query.NodeFactoryExtensions.html": {
    "href": "api/Semiodesk.Trinity.Query.NodeFactoryExtensions.html",
    "title": "Trinity RDF | Class NodeFactoryExtensions",
    "keywords": "Class NodeFactoryExtensions Extension for the NodeFactory type. Inheritance System.Object NodeFactoryExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Query Assembly : Semiodesk.Trinity.dll Syntax public static class NodeFactoryExtensions Methods | Improve this Doc View Source CreateLiteralNode(NodeFactory, Boolean) Create a boolean literal value. Declaration public static INode CreateLiteralNode(this NodeFactory factory, bool value) Parameters Type Name Description VDS.RDF.NodeFactory factory A node factory. System.Boolean value Value of the literal node. Returns Type Description VDS.RDF.INode A new literal node object."
  },
  "api/Semiodesk.Trinity.Store.html": {
    "href": "api/Semiodesk.Trinity.Store.html",
    "title": "Trinity RDF | Namespace Semiodesk.Trinity.Store",
    "keywords": "Namespace Semiodesk.Trinity.Store Classes dotNetRDFStore A store adapter for dotNetRDF. dotNetRDFStoreProvider A store provider for dotNetRDF triple store adapters. SparqlEndpointStoreProvider A store adapter for SPARQL protocol endpoints. StardogStoreProvider This class allows the usage of the Stardog store. An IStore handle can be created by calling StoreFactory.CreateStore(\"provider=stardog;host=http://localhost:5820;uid=admin;pw=admin;sid=MyStore\"); Interfaces ITripleProvider A generic triple provider interface"
  },
  "api/Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.html": {
    "href": "api/Semiodesk.Trinity.Store.Stardog.StardogUpdateSparqlConverter.html",
    "title": "Trinity RDF | Class StardogUpdateSparqlConverter",
    "keywords": "Class StardogUpdateSparqlConverter SPARQL converter. Takes a typical Stardog \"update\" query and decomposes it so that it can be used with the StardogConnector's UpdateGraph method. Does require a valid Store instance to extract the Removals from the current connection. Inheritance System.Object StardogUpdateSparqlConverter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity.Store.Stardog Assembly : Semiodesk.Trinity.dll Syntax public class StardogUpdateSparqlConverter Constructors | Improve this Doc View Source StardogUpdateSparqlConverter() Create an instance of the class StardogUpdateSparqlConvertor . Declaration public StardogUpdateSparqlConverter() | Improve this Doc View Source StardogUpdateSparqlConverter(StardogStore) Create an instance of the class StardogUpdateSparqlConvertor . Declaration public StardogUpdateSparqlConverter(StardogStore store) Parameters Type Name Description StardogStore store Startdog store instance. Properties | Improve this Doc View Source Additions Triple instances converted from UpdateTriples Declaration public IList<Triple> Additions { get; } Property Value Type Description System.Collections.Generic.IList < VDS.RDF.Triple > | Improve this Doc View Source GraphUri The URI of the Graph Additions and Deletes will be applied to. Declaration public string GraphUri { get; } Property Value Type Description System.String | Improve this Doc View Source LastParsedQuery The last SPARQL query supplied to ParseQuery(String) Declaration public string LastParsedQuery { get; } Property Value Type Description System.String | Improve this Doc View Source PrimaryUri The URI of the entity being updated/saved. Declaration public string PrimaryUri { get; } Property Value Type Description System.String | Improve this Doc View Source Removals Triple instances which will be removed Declaration public IList<Triple> Removals { get; } Property Value Type Description System.Collections.Generic.IList < VDS.RDF.Triple > | Improve this Doc View Source UpdateTriples Parsed TripleSet instances which constitute the Additions Declaration public IList<StardogUpdateSparqlConverter.TripleSet> UpdateTriples { get; set; } Property Value Type Description System.Collections.Generic.IList < StardogUpdateSparqlConverter.TripleSet > Methods | Improve this Doc View Source ParseQuery(String) Given a typical SPARQL update query, it will be parsed and decomposed into the appropriate artifacts suitable to call the StardogConnector UpdateGraph method. Declaration public void ParseQuery(string sparqlQuery) Parameters Type Name Description System.String sparqlQuery SPARQL query string."
  },
  "api/Semiodesk.Trinity.SparqlPreprocessor.html": {
    "href": "api/Semiodesk.Trinity.SparqlPreprocessor.html",
    "title": "Trinity RDF | Class SparqlPreprocessor",
    "keywords": "Class SparqlPreprocessor A simple SPARQL parser. Inheritance System.Object VDS.RDF.Parsing.Tokens.BaseTokeniser VDS.RDF.Parsing.Tokens.SparqlTokeniser SparqlPreprocessor SparqlQueryPreprocessor Implements VDS.RDF.Parsing.Tokens.ITokeniser Inherited Members VDS.RDF.Parsing.Tokens.BaseTokeniser.StartNewToken() VDS.RDF.Parsing.Tokens.BaseTokeniser.Peek() VDS.RDF.Parsing.Tokens.BaseTokeniser.Backtrack() VDS.RDF.Parsing.Tokens.BaseTokeniser.ConsumeCharacter() VDS.RDF.Parsing.Tokens.BaseTokeniser.ConsumeCharacter(System.Boolean) VDS.RDF.Parsing.Tokens.BaseTokeniser.ConsumeNewLine(System.Boolean) VDS.RDF.Parsing.Tokens.BaseTokeniser.ConsumeNewLine(System.Boolean, System.Boolean) VDS.RDF.Parsing.Tokens.BaseTokeniser.SkipCharacter() VDS.RDF.Parsing.Tokens.BaseTokeniser.DiscardWhiteSpace() VDS.RDF.Parsing.Tokens.BaseTokeniser.HandleEscapes(VDS.RDF.Parsing.Tokens.TokeniserEscapeMode) VDS.RDF.Parsing.Tokens.BaseTokeniser.HandleComplexLocalNameEscapes() VDS.RDF.Parsing.Tokens.BaseTokeniser.IsHexDigit(System.Char) VDS.RDF.Parsing.Tokens.BaseTokeniser.Error(System.String) VDS.RDF.Parsing.Tokens.BaseTokeniser.UnexpectedCharacter(System.Char, System.String) VDS.RDF.Parsing.Tokens.BaseTokeniser.UnexpectedEndOfInput(System.String) VDS.RDF.Parsing.Tokens.BaseTokeniser.UnexpectedNewLine(System.String) VDS.RDF.Parsing.Tokens.BaseTokeniser.UnexpectedToken(System.String, VDS.RDF.Parsing.Tokens.IToken) VDS.RDF.Parsing.Tokens.BaseTokeniser.Format VDS.RDF.Parsing.Tokens.BaseTokeniser.Value VDS.RDF.Parsing.Tokens.BaseTokeniser.Length VDS.RDF.Parsing.Tokens.BaseTokeniser.CurrentLine VDS.RDF.Parsing.Tokens.BaseTokeniser.CurrentPosition VDS.RDF.Parsing.Tokens.BaseTokeniser.StartLine VDS.RDF.Parsing.Tokens.BaseTokeniser.StartPosition VDS.RDF.Parsing.Tokens.BaseTokeniser.EndLine VDS.RDF.Parsing.Tokens.BaseTokeniser.EndPosition VDS.RDF.Parsing.Tokens.BaseTokeniser.LastTokenType VDS.RDF.Parsing.Tokens.BaseTokeniser.HasBacktracked System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public class SparqlPreprocessor : SparqlTokeniser, ITokeniser Remarks This class is primarily intended to support a limited range of query preprocessing tasks such as setting the values of query parameters (@-variables) as quickly as possible. It does not aim to support the full SPARQL standard syntax. Constructors | Improve this Doc View Source SparqlPreprocessor(TextReader, SparqlQuerySyntax) Creates a new instance of the SparqlPreprocessor class. Declaration public SparqlPreprocessor(TextReader input, SparqlQuerySyntax syntax) Parameters Type Name Description System.IO.TextReader input A text reader. VDS.RDF.Parsing.SparqlQuerySyntax syntax SPARQL syntax level. Fields | Improve this Doc View Source DeclaredPrefixes Namespace prefixes defined in the query. Declaration public readonly HashSet<string> DeclaredPrefixes Field Value Type Description System.Collections.Generic.HashSet < System.String > | Improve this Doc View Source DefaultGraphs URIs of the graphs queried or manipulated by the query. Declaration public readonly HashSet<string> DefaultGraphs Field Value Type Description System.Collections.Generic.HashSet < System.String > | Improve this Doc View Source Parameters Names of the bindable query parameters starting with &apos;@'. Declaration public readonly HashSet<string> Parameters Field Value Type Description System.Collections.Generic.HashSet < System.String > | Improve this Doc View Source ParameterTypes Token types of the query parameters. Declaration public readonly Dictionary<string, int> ParameterTypes Field Value Type Description System.Collections.Generic.Dictionary < System.String , System.Int32 > | Improve this Doc View Source ParameterValues Bound literal values of the query parameters. Declaration public readonly Dictionary<string, string> ParameterValues Field Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > | Improve this Doc View Source PreviousTokenType Type of the last read token. Declaration protected int PreviousTokenType Field Value Type Description System.Int32 | Improve this Doc View Source Tokens We use the list of tokens to generate the query string with bound parameters on demand. Declaration protected readonly List<IToken> Tokens Field Value Type Description System.Collections.Generic.List < VDS.RDF.Parsing.Tokens.IToken > | Improve this Doc View Source UsedPrefixes Namespace prefixes referenced in the query. Declaration public readonly HashSet<string> UsedPrefixes Field Value Type Description System.Collections.Generic.HashSet < System.String > Methods | Improve this Doc View Source AddDefaultGraph(Uri) Add FROM definition to the query. Declaration public void AddDefaultGraph(Uri uri) Parameters Type Name Description System.Uri uri URI of the graph. | Improve this Doc View Source AddNamedGraph(Uri) Add a FROM NAMED definition to the query. Declaration public void AddNamedGraph(Uri uri) Parameters Type Name Description System.Uri uri URI of the graph. | Improve this Doc View Source Bind(String, Object) Set the value for a query parameter which is preceeded by &apos;@'. Declaration public void Bind(string parameter, object value) Parameters Type Name Description System.String parameter The parameter name including the &apos;@'. System.Object value The paramter value. | Improve this Doc View Source GetNextToken() Gets the next parseable Token from the Input or raises an Error. Declaration public override IToken GetNextToken() Returns Type Description VDS.RDF.Parsing.Tokens.IToken Overrides VDS.RDF.Parsing.Tokens.SparqlTokeniser.GetNextToken() | Improve this Doc View Source GetPrefixDeclarations() Gets the PREFIX definitions in the query. Declaration public string GetPrefixDeclarations() Returns Type Description System.String | Improve this Doc View Source Process(Boolean) Starts analyzing the SPARQL query. Declaration public void Process(bool declarePrefixes) Parameters Type Name Description System.Boolean declarePrefixes Trz to add prefix definitions for the namespaces used but not declared in the query. | Improve this Doc View Source Serialize(Int32) Return the query with all bound variables. Declaration protected string Serialize(int outputLevel = 0) Parameters Type Name Description System.Int32 outputLevel Level of the sub graph to be returned (0 := entire query). Returns Type Description System.String | Improve this Doc View Source ToString() Returns the entire query string. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements VDS.RDF.Parsing.Tokens.ITokeniser"
  },
  "api/Semiodesk.Trinity.ITransactional.html": {
    "href": "api/Semiodesk.Trinity.ITransactional.html",
    "title": "Trinity RDF | Interface ITransactional",
    "keywords": "Interface ITransactional Interface for a transactional object Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public interface ITransactional Methods | Improve this Doc View Source Commit() Persist any changes to the object. Declaration void Commit() | Improve this Doc View Source Rollback() Discard any changes to the object. Declaration void Rollback()"
  },
  "api/Semiodesk.Trinity.IModelGroup.html": {
    "href": "api/Semiodesk.Trinity.IModelGroup.html",
    "title": "Trinity RDF | Interface IModelGroup",
    "keywords": "Interface IModelGroup The model group can be used to query over multiple models at once. Inherited Members IModel.Uri IModel.IsEmpty IModel.IgnoreUnmappedProperties IModel.AddResource(IResource, ITransaction) IModel.AddResource<T>(T, ITransaction) IModel.CreateResource(String, ITransaction) IModel.CreateResource(Uri, ITransaction) IModel.CreateResource<T>(String, ITransaction) IModel.CreateResource<T>(Uri, ITransaction) IModel.CreateResource(Type, String, ITransaction) IModel.CreateResource(Uri, Type, ITransaction) IModel.DeleteResource(Uri, ITransaction) IModel.DeleteResource(IResource, ITransaction) IModel.ContainsResource(Uri, ITransaction) IModel.ContainsResource(IResource, ITransaction) IModel.ExecuteQuery(ISparqlQuery, Boolean, ITransaction) IModel.ExecuteUpdate(SparqlUpdate, ITransaction) IModel.GetResource(Uri, ITransaction) IModel.GetResource<T>(Uri, ITransaction) IModel.GetResource<T>(IResource, ITransaction) IModel.GetResource(Uri, Type, ITransaction) IModel.GetResource(IResource, ITransaction) IModel.GetResources(ISparqlQuery, Boolean, ITransaction) IModel.GetResources<T>(ISparqlQuery, Boolean, ITransaction) IModel.GetResources<T>(Boolean, ITransaction) IModel.AsQueryable<T>(Boolean) IModel.GetBindings(ISparqlQuery, Boolean, ITransaction) IModel.Read(Uri, RdfSerializationFormat, Boolean) IModel.Read(Stream, RdfSerializationFormat, Boolean) IModel.Write(Stream, RdfSerializationFormat, INamespaceMap) IModel.UpdateResource(Resource, ITransaction) IModel.Clear() IModel.BeginTransaction(IsolationLevel) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.Add(Semiodesk.Trinity.IModel) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.ExceptWith(System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.IntersectWith(System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.IsSubsetOf(System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.IsSupersetOf(System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.Overlaps(System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.SetEquals(System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>) System.Collections.Generic.ISet<Semiodesk.Trinity.IModel>.UnionWith(System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>) System.Collections.Generic.ICollection<Semiodesk.Trinity.IModel>.Contains(Semiodesk.Trinity.IModel) System.Collections.Generic.ICollection<Semiodesk.Trinity.IModel>.CopyTo(Semiodesk.Trinity.IModel[], System.Int32) System.Collections.Generic.ICollection<Semiodesk.Trinity.IModel>.Remove(Semiodesk.Trinity.IModel) System.Collections.Generic.ICollection<Semiodesk.Trinity.IModel>.Count System.Collections.Generic.ICollection<Semiodesk.Trinity.IModel>.IsReadOnly System.Collections.Generic.IEnumerable<Semiodesk.Trinity.IModel>.GetEnumerator() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public interface IModelGroup : IModel, ISet<IModel>, ICollection<IModel>, IEnumerable<IModel>, IEnumerable Properties | Improve this Doc View Source DefaultModel The default model of this group Declaration IModel DefaultModel { get; set; } Property Value Type Description IModel"
  },
  "api/Semiodesk.Trinity.UriExtensions.html": {
    "href": "api/Semiodesk.Trinity.UriExtensions.html",
    "title": "Trinity RDF | Class UriExtensions",
    "keywords": "Class UriExtensions Extension of Uri class concering UriRef handling. Inheritance System.Object UriExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Semiodesk.Trinity Assembly : Semiodesk.Trinity.dll Syntax public static class UriExtensions Methods | Improve this Doc View Source ToUriRef(Uri) Create a UriRef from this Uri. Declaration public static UriRef ToUriRef(this Uri uri) Parameters Type Name Description System.Uri uri Returns Type Description UriRef"
  }
}